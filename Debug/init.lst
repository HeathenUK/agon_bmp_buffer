Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED08-Oct-23     18:35:10     page:   1


PC     Object              I  Line    Source 
                           A     1    ;
                           A     2    ; Title:	Hello World - Initialisation Code
                           A     3    ; Author:	Dean Belfield / Jeroen Venema
                           A     4    ; Created:	22/11/2022
                           A     5    ; Last Updated: 20/03/2023
                           A     6    ;
                           A     7    ; Modinfo:
                           A     8    ; 25/11/2022:	Added parameter parsing; now ac
                           A     9    ; 20/03/2023:	Added MBASE zeroing and save/re
                           A    10    
                           A    11    			SEGMENT CODE
                           A    12    			
                           A    13    			XREF	__low_bss
                           A    14    			XREF	__len_bss
                           A    15    			
                           A    16    			XREF	_main
                           A    17    				
                           A    18    			.ASSUME	ADL = 1	
                           A    19    
       00000010            A    20    argv_ptrs_max:		EQU	16			; Maximum n
                           A    21    
                           A    22    ;
                           A    23    ; Start in ADL mode
                           A    24    ;
                           A    25    
0B0000 C3 45 00 0B         A    26    			JP	_start			; Jump to start
                           A    27    
                           A    28    ;
                           A    29    ; The header stuff
                           A    30    ;
0B0004 424D5042 00         A    31    _exec_name:		DB	"BMPB", 0		; The execu
                           A    32    
                           A    33    			ALIGN	64			; The executabl
                           A    34    			
0B0040 4D4F53              A    35    			DB	"MOS"			; Flag for MOS 
0B0043 00                  A    36    			DB	00h			; MOS header versio
0B0044 01                  A    37    			DB	01h			; Flag for run mode
                           A    38    
                           A    39    ;
                           A    40    ; And the code follows on immediately after the
                           A    41    ;
0B0045 F5                  A    42    _start:			PUSH	AF			; Preserve 
0B0046 C5                  A    43    			PUSH	BC
0B0047 D5                  A    44    			PUSH	DE
0B0048 DDE5                A    45    			PUSH	IX
0B004A FDE5                A    46    			PUSH	IY			; Need to prese
                           A    47    
0B004C ED6E                A    48    			LD	A, MB			; Save MB
0B004E F5                  A    49    			PUSH 	AF
0B004F AF                  A    50    			XOR 	A
0B0050 ED6D                A    51    			LD 	MB, A                   ; Clear
                           A    52    
0B0052 E5                  A    53    			PUSH	HL			; Clear the RAM
0B0053 CD 77 00 0B         A    54    			CALL	_clear_bss
0B0057 E1                  A    55    			POP	HL
                           A    56    ;
0B0058 DD21 84 30 0B       A    57    			LD	IX, argv_ptrs		; The argv 
0B005D DDE5                A    58    			PUSH	IX			; Parameter 2: 
0B005F CD 96 00 0B         A    59    			CALL	_parse_params		; Parse
0B0063 0600                A    60    			LD	B, 0			; Clear B from 
0B0065 C5                  A    61    			PUSH	BC			; Parameter 1: 
0B0066 CD 81 17 0B         A    62    			CALL	_main			; int main(
0B006A D1                  A    63    			POP	DE			; Balance the stack
0B006B D1                  A    64    			POP	DE
                           A    65    
0B006C F1                  A    66    			POP AF
0B006D ED6D                A    67    			LD	MB, A
                           A    68    
0B006F FDE1                A    69    			POP	IY			; Restore registers
0B0071 DDE1                A    70    			POP	IX
0B0073 D1                  A    71    			POP	DE
0B0074 C1                  A    72    			POP 	BC
0B0075 F1                  A    73    			POP	AF
0B0076 C9                  A    74    			RET
                           A    75    			
                           A    76    ; Clear the memory
                           A    77    ;
0B0077 01 2C 00 00         A    78    _clear_bss:		LD	BC, __len_bss		; Check
0B007B 3E 00               A    79    			LD	a, __len_bss >> 16
0B007D B1                  A    80    			OR	A, C
0B007E B0                  A    81    			OR	A, B
0B007F C8                  A    82    			RET	Z			; BSS is zero-lengt
0B0080 AF                  A    83    			XOR	A, A
0B0081 32 92 31 0B         A    84    			LD 	(__low_bss), A
0B0085 ED62                A    85    			SBC	HL, HL			; HL = 0
0B0087 0B                  A    86    			DEC	BC			; 1st byte's taken 
0B0088 ED42                A    87    			SBC	HL, BC
0B008A C8                  A    88    			RET	Z		  	; Just 1 byte ...
0B008B 21 92 31 0B         A    89    			LD	HL, __low_bss		; Reset HL
0B008F 11 93 31 0B         A    90    			LD	DE, __low_bss + 1	; [DE] = bs
0B0093 EDB0                A    91    			LDIR				; Clear this se
0B0095 C9                  A    92    			RET
                           A    93    			
                           A    94    ; Parse the parameter string into a C array
                           A    95    ; Parameters
                           A    96    ; - HL: Address of parameter string
                           A    97    ; - IX: Address for array pointer storage
                           A    98    ; Returns:
                           A    99    ; -  C: Number of parameters parsed
                           A   100    ;
0B0096 01 04 00 0B         A   101    _parse_params:		LD	BC, _exec_name
0B009A DD0F00              A   102    			LD	(IX+0), BC		; ARGV[0] = the
0B009D DD23                A   103    			INC	IX
0B009F DD23                A   104    			INC	IX
0B00A1 DD23                A   105    			INC	IX
0B00A3 CD DE 00 0B         A   106    			CALL	_skip_spaces		; Skip 
                           A   107    ;
0B00A7 01010000            A   108    			LD	BC, 1			; C: ARGC = 1 -
0B00AB 060F                A   109    			LD	B, argv_ptrs_max - 1	; B: Ma
                           A   110    ;
0B00AD                     A   111    _parse_params_1:	
0B00AD C5                  A   112    			PUSH	BC			; Stack ARGC	
0B00AE E5                  A   113    			PUSH	HL			; Stack start a
0B00AF CD CF 00 0B         A   114    			CALL	_get_token		; Get the n
0B00B3 79                  A   115    			LD	A, C			; A: Length of 
0B00B4 D1                  A   116    			POP	DE			; Start address of 
0B00B5 C1                  A   117    			POP	BC			; ARGC
0B00B6 B7                  A   118    			OR	A			; Check for A=0 (no
0B00B7 C8                  A   119    			RET	Z
                           A   120    ;
0B00B8 DD1F00              A   121    			LD	(IX+0), DE		; Store the poi
0B00BB E5                  A   122    			PUSH	HL			; DE=HL
0B00BC D1                  A   123    			POP	DE
0B00BD CD DE 00 0B         A   124    			CALL	_skip_spaces		; And s
0B00C1 AF                  A   125    			XOR	A
0B00C2 12                  A   126    			LD	(DE), A			; Zero-terminat
0B00C3 DD23                A   127    			INC	IX
0B00C5 DD23                A   128    			INC	IX
0B00C7 DD23                A   129    			INC	IX			; Advance to next p
0B00C9 0C                  A   130    			INC	C			; Increment ARGC
0B00CA 79                  A   131    			LD	A, C			; Check for C >
0B00CB B8                  A   132    			CP	B
0B00CC 38 DF               A   133    			JR	C, _parse_params_1	; And loop
0B00CE C9                  A   134    			RET
                           A   135    
                           A   136    ; Get the next token
                           A   137    ; Parameters:
                           A   138    ; - HL: Address of parameter string
                           A   139    ; Returns:
                           A   140    ; - HL: Address of first character after token
                           A   141    ; -  C: Length of token (in characters)
                           A   142    ;
0B00CF 0E00                A   143    _get_token:		LD	C, 0			; Initialis
0B00D1 7E                  A   144    $$:			LD	A, (HL)			; Get the chara
0B00D2 B7                  A   145    			OR	A			; Exit if 0 (end of
0B00D3 C8                  A   146    			RET 	Z
0B00D4 FE0D                A   147    			CP	13			; Exit if CR (end o
0B00D6 C8                  A   148    			RET	Z
0B00D7 FE20                A   149    			CP	' '			; Exit if space (en
0B00D9 C8                  A   150    			RET	Z
0B00DA 23                  A   151    			INC	HL			; Advance to next c
0B00DB 0C                  A   152    			INC 	C			; Increment len
0B00DC 18 F3               A   153    			JR	$B
                           A   154    	
                           A   155    ; Skip spaces in the parameter string
                           A   156    ; Parameters:
                           A   157    ; - HL: Address of parameter string
                           A   158    ; Returns:
                           A   159    ; - HL: Address of next none-space character
                           A   160    ;    F: Z if at end of string, otherwise NZ if 
                           A   161    ;
0B00DE 7E                  A   162    _skip_spaces:		LD	A, (HL)			; Get t
0B00DF FE20                A   163    			CP	' '			; Exit if not space
0B00E1 C0                  A   164    			RET	NZ
0B00E2 23                  A   165    			INC	HL			; Advance to next c
0B00E3 18 F9               A   166    			JR	_skip_spaces		; Increment
                           A   167    
                           A   168    			SEGMENT DATA
                           A   169    
                           A   170    
0B3081                     A   171    _errno:
0B3081                     A   172            DS 3                   ; extern int _er
                           A   173    
                           A   174    ; Storage for the argv array pointers
                           A   175    ;
0B3084 000000 000000       A   176    argv_ptrs:		BLKP	argv_ptrs_max, 0
0B308A 000000 000000 
0B3090 000000 000000 
0B3096 000000 000000 
0B309C 000000 000000 
0B30A2 000000 000000 
0B30A8 000000 000000 
0B30AE 000000 000000 
                           A   177    			
                           A   178    			END


Errors: 0
Warnings: 0
Lines Assembled: 179
