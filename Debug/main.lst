Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED08-Oct-23     18:35:10     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optspeed -noreduceopt -nopadbranc
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    .BEGREC "NONAME3",8
                           A   144    .DEFINE "baudRate"
                           A   145    .VALUE 0
                           A   146    .CLASS 8
                           A   147    .TYPE 4
                           A   148    .ENDEF
                           A   149    .DEFINE "dataBits"
                           A   150    .VALUE 3
                           A   151    .CLASS 8
                           A   152    .TYPE 12
                           A   153    .ENDEF
                           A   154    .DEFINE "stopBits"
                           A   155    .VALUE 4
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "parity"
                           A   160    .VALUE 5
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "flowcontrol"
                           A   165    .VALUE 6
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "eir"
                           A   170    .VALUE 7
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .ENDREC "NONAME3"
                           A   175    .BEGREC "NONAME4",15
                           A   176    .DEFINE "fs"
                           A   177    .VALUE 0
                           A   178    .CLASS 8
                           A   179    .TYPE 46
                           A   180    .ENDEF
                           A   181    .DEFINE "id"
                           A   182    .VALUE 3
                           A   183    .CLASS 8
                           A   184    .TYPE 13
                           A   185    .ENDEF
                           A   186    .DEFINE "attr"
                           A   187    .VALUE 5
                           A   188    .CLASS 8
                           A   189    .TYPE 12
                           A   190    .ENDEF
                           A   191    .DEFINE "stat"
                           A   192    .VALUE 6
                           A   193    .CLASS 8
                           A   194    .TYPE 12
                           A   195    .ENDEF
                           A   196    .DEFINE "sclust"
                           A   197    .VALUE 7
                           A   198    .CLASS 8
                           A   199    .TYPE 15
                           A   200    .ENDEF
                           A   201    .DEFINE "objsize"
                           A   202    .VALUE 11
                           A   203    .CLASS 8
                           A   204    .TYPE 15
                           A   205    .ENDEF
                           A   206    .ENDREC "NONAME4"
                           A   207    .BEGREC "NONAME5",36
                           A   208    .DEFINE "obj"
                           A   209    .VALUE 0
                           A   210    .CLASS 8
                           A   211    .TAG "NONAME4"
                           A   212    .TYPE 8
                           A   213    .ENDEF
                           A   214    .DEFINE "flag"
                           A   215    .VALUE 15
                           A   216    .CLASS 8
                           A   217    .TYPE 12
                           A   218    .ENDEF
                           A   219    .DEFINE "err"
                           A   220    .VALUE 16
                           A   221    .CLASS 8
                           A   222    .TYPE 12
                           A   223    .ENDEF
                           A   224    .DEFINE "fptr"
                           A   225    .VALUE 17
                           A   226    .CLASS 8
                           A   227    .TYPE 15
                           A   228    .ENDEF
                           A   229    .DEFINE "clust"
                           A   230    .VALUE 21
                           A   231    .CLASS 8
                           A   232    .TYPE 15
                           A   233    .ENDEF
                           A   234    .DEFINE "sect"
                           A   235    .VALUE 25
                           A   236    .CLASS 8
                           A   237    .TYPE 15
                           A   238    .ENDEF
                           A   239    .DEFINE "dir_sect"
                           A   240    .VALUE 29
                           A   241    .CLASS 8
                           A   242    .TYPE 15
                           A   243    .ENDEF
                           A   244    .DEFINE "dir_ptr"
                           A   245    .VALUE 33
                           A   246    .CLASS 8
                           A   247    .TYPE 46
                           A   248    .ENDEF
                           A   249    .ENDREC "NONAME5"
                           A   250    ;    1	//Copyright HeathenUK 2023, others' cop
                           A   251    ;    2	
                           A   252    ;    3	#include <stdio.h>
                           A   253    ;    4	#include <stdlib.h>
                           A   254    ;    5	#include <ctype.h>
                           A   255    ;    6	#include <stdint.h>
                           A   256    ;    7	#include <string.h>
                           A   257    ;    8	#include <eZ80.h>
                           A   258    ;    9	#include <defines.h>
                           A   259    ;   10	#include "mos-interface.h"
                           A   260    ;   11	#include "vdp.h"
                           A   261    ;   12	
                           A   262    ;   13	typedef struct {
                           A   263    ;   14		
                           A   264    ;   15		uint16_t bmp_width;
                           A   265    ;   16		uint16_t bmp_height;
                           A   266    ;   17		uint8_t  bmp_bitdepth;
                           A   267    ;   18		
                           A   268    ;   19	} bmp_info;
                           A   269    .BEGREC "NONAME6",5
                           A   270    .DEFINE "bmp_width"
                           A   271    .VALUE 0
                           A   272    .CLASS 8
                           A   273    .TYPE 13
                           A   274    .ENDEF
                           A   275    .DEFINE "bmp_height"
                           A   276    .VALUE 2
                           A   277    .CLASS 8
                           A   278    .TYPE 13
                           A   279    .ENDEF
                           A   280    .DEFINE "bmp_bitdepth"
                           A   281    .VALUE 4
                           A   282    .CLASS 8
                           A   283    .TYPE 12
                           A   284    .ENDEF
                           A   285    .ENDREC "NONAME6"
                           A   286    ;   20	
                           A   287    ;   21	extern void write16bit(uint16_t w);
                           A   288    ;   22	extern void write24bit(uint24_t w);
                           A   289    ;   23	extern void write32bit(uint32_t w);
                           A   290    ;   24	
                           A   291    ;   25	void delay_secs(UINT16 ticks_end) { //1
0B00E5                     A   292    _delay_secs:
                           A   293    .DEFINE "_delay_secs"
                           A   294    
                           A   295    .VALUE _delay_secs
                           A   296    
                           A   297    .CLASS 2
                           A   298    
                           A   299    .TYPE 65
                           A   300    
                           A   301    .ENDEF
                           A   302    
                           A   303    .BEGFUNC "delay_secs",25,"_delay_secs"
                           A   304    
                           A   305    .LINE 25
                           A   306    
                           A   307    .DEFINE "ticks_end"
                           A   308    
                           A   309    .CLASS 65
                           A   310    
                           A   311    .VALUE 6
                           A   312    
                           A   313    .TYPE 13
                           A   314    
                           A   315    .ENDEF
                           A   316    
                           A   317    .DEFINE "ticks"
                           A   318    
                           A   319    .CLASS 65
                           A   320    
                           A   321    .VALUE -4
                           A   322    
                           A   323    .TYPE 15
                           A   324    
                           A   325    .ENDEF
                           A   326    
0B00E5 DDE5                A   327    	PUSH	IX
0B00E7 DD210000 00         A   328    	LD	IX,0
0B00EC DD39                A   329    	ADD	IX,SP
0B00EE C5                  A   330    	PUSH	BC
0B00EF 3B                  A   331    	DEC	SP
                           A   332    ;   26		
                           A   333    ;   27		UINT32 ticks = 0;
                           A   334    .LINE 27
                           A   335    
0B00F0 01000000            A   336    	LD	BC,0
0B00F4 AF                  A   337    	XOR	A,A
0B00F5 DD0FFC              A   338    	LD	(IX+%FFFFFFFC),BC
0B00F8 DD77FF              A   339    	LD	(IX+%FFFFFFFF),A
                           A   340    ;   28		ticks_end *= 60;
                           A   341    .LINE 28
                           A   342    
0B00FB 49213C00            A   343    	LD.LIS	HL,60
0B00FF DD0706              A   344    	LD	BC,(IX+%6)
0B0102 CD 63 30 0B         A   345    	CALL	__smulu
0B0106 DD7506              A   346    	LD	(IX+%6),L
0B0109 DD7407              A   347    	LD	(IX+%7),H
                           A   348    ;   29		while(true) {
0B010C                     A   349    L_3:
                           A   350    .LINE 29
                           A   351    
                           A   352    ;   30			
                           A   353    ;   31			waitvblank();
                           A   354    .LINE 31
                           A   355    
0B010C CD BD 25 0B         A   356    	CALL	_waitvblank
                           A   357    ;   32			ticks++;
                           A   358    .LINE 32
                           A   359    
0B0110 DD27FC              A   360    	LD	HL,(IX+%FFFFFFFC)
0B0113 DD5EFF              A   361    	LD	E,(IX+%FFFFFFFF)
0B0116 3E01                A   362    	LD	A,%1
0B0118 CD 77 29 0B         A   363    	CALL	__ladd_b
0B011C DD2FFC              A   364    	LD	(IX+%FFFFFFFC),HL
0B011F DD73FF              A   365    	LD	(IX+%FFFFFFFF),E
                           A   366    ;   33			if(ticks >= ticks_end) break;
                           A   367    .LINE 33
                           A   368    
0B0122 DD0706              A   369    	LD	BC,(IX+%6)
0B0125 CD 4B 2D 0B         A   370    	CALL	__stoiu
0B0129 E5C1                A   371    	LD	BC,HL
0B012B AF                  A   372    	XOR	A,A
0B012C DD27FC              A   373    	LD	HL,(IX+%FFFFFFFC)
0B012F DD5EFF              A   374    	LD	E,(IX+%FFFFFFFF)
0B0132 CD 70 2F 0B         A   375    	CALL	__lcmpu
0B0136 38 D4               A   376    	JR	C,L_3
                           A   377    ;   34			
                           A   378    ;   35		}
                           A   379    ;   36		
                           A   380    ;   37	}
                           A   381    .LINE 37
                           A   382    
0B0138 DDF9                A   383    	LD	SP,IX
0B013A DDE1                A   384    	POP	IX
0B013C C9                  A   385    	RET	
                           A   386    
                           A   387    
                           A   388    ;**************************** _delay_secs *****
                           A   389    ;Name                         Addr/Register   S
                           A   390    ;_waitvblank                         IMPORT  --
                           A   391    ;ticks                                 IX-4    
                           A   392    ;ticks_end                             IX+6    
                           A   393    
                           A   394    
                           A   395    ; Stack Frame Size: 13 (bytes)
                           A   396    ;       Spill Code: 0 (instruction)
                           A   397    
                           A   398    
                           A   399    .ENDFUNC "delay_secs",37,"_delay_secs"
                           A   400    ;   38	
                           A   401    ;   39	int min(int a, int b) {
0B013D                     A   402    _min:
                           A   403    .DEFINE "_min"
                           A   404    
                           A   405    .VALUE _min
                           A   406    
                           A   407    .CLASS 2
                           A   408    
                           A   409    .TYPE 68
                           A   410    
                           A   411    .ENDEF
                           A   412    
                           A   413    .BEGFUNC "min",39,"_min"
                           A   414    
                           A   415    .LINE 39
                           A   416    
                           A   417    .DEFINE "a"
                           A   418    
                           A   419    .CLASS 65
                           A   420    
                           A   421    .VALUE 6
                           A   422    
                           A   423    .TYPE 4
                           A   424    
                           A   425    .ENDEF
                           A   426    
                           A   427    .DEFINE "b"
                           A   428    
                           A   429    .CLASS 65
                           A   430    
                           A   431    .VALUE 9
                           A   432    
                           A   433    .TYPE 4
                           A   434    
                           A   435    .ENDEF
                           A   436    
0B013D DDE5                A   437    	PUSH	IX
0B013F DD210000 00         A   438    	LD	IX,0
0B0144 DD39                A   439    	ADD	IX,SP
                           A   440    ;   40	    if (a > b)
                           A   441    .LINE 40
                           A   442    
0B0146 DD0706              A   443    	LD	BC,(IX+%6)
0B0149 DD2709              A   444    	LD	HL,(IX+%9)
0B014C B7                  A   445    	OR	A,A
0B014D ED42                A   446    	SBC	HL,BC
0B014F F2 59 01 0B         A   447    	JP	P,L__3
0B0153 EA 62 01 0B         A   448    	JP	PE,L_6
0B0157 18 04               A   449    	JR	L__4
0B0159                     A   450    L__3:
0B0159 E2 62 01 0B         A   451    	JP	PO,L_6
0B015D                     A   452    L__4:
                           A   453    ;   41	        return b;
                           A   454    .LINE 41
                           A   455    
0B015D DD2709              A   456    	LD	HL,(IX+%9)
0B0160 18 03               A   457    	JR	L_7
0B0162                     A   458    L_6:
                           A   459    ;   42	    return a;
                           A   460    .LINE 42
                           A   461    
0B0162 DD2706              A   462    	LD	HL,(IX+%6)
                           A   463    ;   43	}
0B0165                     A   464    L_7:
                           A   465    .LINE 43
                           A   466    
0B0165 DDF9                A   467    	LD	SP,IX
0B0167 DDE1                A   468    	POP	IX
0B0169 C9                  A   469    	RET	
                           A   470    
                           A   471    
                           A   472    ;**************************** _min ************
                           A   473    ;Name                         Addr/Register   S
                           A   474    ;b                                     IX+9    
                           A   475    ;a                                     IX+6    
                           A   476    
                           A   477    
                           A   478    ; Stack Frame Size: 12 (bytes)
                           A   479    ;       Spill Code: 0 (instruction)
                           A   480    
                           A   481    
                           A   482    .ENDFUNC "min",43,"_min"
                           A   483    ;   44	
                           A   484    ;   45	int max(int a, int b) {
0B016A                     A   485    _max:
                           A   486    .DEFINE "_max"
                           A   487    
                           A   488    .VALUE _max
                           A   489    
                           A   490    .CLASS 2
                           A   491    
                           A   492    .TYPE 68
                           A   493    
                           A   494    .ENDEF
                           A   495    
                           A   496    .BEGFUNC "max",45,"_max"
                           A   497    
                           A   498    .LINE 45
                           A   499    
                           A   500    .DEFINE "a"
                           A   501    
                           A   502    .CLASS 65
                           A   503    
                           A   504    .VALUE 6
                           A   505    
                           A   506    .TYPE 4
                           A   507    
                           A   508    .ENDEF
                           A   509    
                           A   510    .DEFINE "b"
                           A   511    
                           A   512    .CLASS 65
                           A   513    
                           A   514    .VALUE 9
                           A   515    
                           A   516    .TYPE 4
                           A   517    
                           A   518    .ENDEF
                           A   519    
0B016A DDE5                A   520    	PUSH	IX
0B016C DD210000 00         A   521    	LD	IX,0
0B0171 DD39                A   522    	ADD	IX,SP
                           A   523    ;   46	    if (a > b)
                           A   524    .LINE 46
                           A   525    
0B0173 DD0706              A   526    	LD	BC,(IX+%6)
0B0176 DD2709              A   527    	LD	HL,(IX+%9)
0B0179 B7                  A   528    	OR	A,A
0B017A ED42                A   529    	SBC	HL,BC
0B017C F2 86 01 0B         A   530    	JP	P,L__7
0B0180 EA 8F 01 0B         A   531    	JP	PE,L_9
0B0184 18 04               A   532    	JR	L__8
0B0186                     A   533    L__7:
0B0186 E2 8F 01 0B         A   534    	JP	PO,L_9
0B018A                     A   535    L__8:
                           A   536    ;   47	        return a;
                           A   537    .LINE 47
                           A   538    
0B018A DD2706              A   539    	LD	HL,(IX+%6)
0B018D 18 03               A   540    	JR	L_10
0B018F                     A   541    L_9:
                           A   542    ;   48	    return b;
                           A   543    .LINE 48
                           A   544    
0B018F DD2709              A   545    	LD	HL,(IX+%9)
                           A   546    ;   49	}
0B0192                     A   547    L_10:
                           A   548    .LINE 49
                           A   549    
0B0192 DDF9                A   550    	LD	SP,IX
0B0194 DDE1                A   551    	POP	IX
0B0196 C9                  A   552    	RET	
                           A   553    
                           A   554    
                           A   555    ;**************************** _max ************
                           A   556    ;Name                         Addr/Register   S
                           A   557    ;b                                     IX+9    
                           A   558    ;a                                     IX+6    
                           A   559    
                           A   560    
                           A   561    ; Stack Frame Size: 12 (bytes)
                           A   562    ;       Spill Code: 0 (instruction)
                           A   563    
                           A   564    
                           A   565    .ENDFUNC "max",49,"_max"
                           A   566    ;   50	
                           A   567    ;   51	void flip(uint32_t * framebuffer, int w
0B0197                     A   568    _flip:
                           A   569    .DEFINE "_flip"
                           A   570    
                           A   571    .VALUE _flip
                           A   572    
                           A   573    .CLASS 2
                           A   574    
                           A   575    .TYPE 65
                           A   576    
                           A   577    .ENDEF
                           A   578    
                           A   579    .BEGFUNC "flip",51,"_flip"
                           A   580    
                           A   581    .LINE 51
                           A   582    
                           A   583    .DEFINE "framebuffer"
                           A   584    
                           A   585    .CLASS 65
                           A   586    
                           A   587    .VALUE 6
                           A   588    
                           A   589    .TYPE 47
                           A   590    
                           A   591    .ENDEF
                           A   592    
                           A   593    .DEFINE "width"
                           A   594    
                           A   595    .CLASS 65
                           A   596    
                           A   597    .VALUE 9
                           A   598    
                           A   599    .TYPE 4
                           A   600    
                           A   601    .ENDEF
                           A   602    
                           A   603    .DEFINE "height"
                           A   604    
                           A   605    .CLASS 65
                           A   606    
                           A   607    .VALUE 12
                           A   608    
                           A   609    .TYPE 4
                           A   610    
                           A   611    .ENDEF
                           A   612    
                           A   613    .DEFINE "y"
                           A   614    
                           A   615    .CLASS 65
                           A   616    
                           A   617    .VALUE -2
                           A   618    
                           A   619    .TYPE 13
                           A   620    
                           A   621    .ENDEF
                           A   622    
                           A   623    .DEFINE "row_buffer"
                           A   624    
                           A   625    .CLASS 65
                           A   626    
                           A   627    .VALUE -5
                           A   628    
                           A   629    .TYPE 47
                           A   630    
                           A   631    .ENDEF
                           A   632    
                           A   633    .DEFINE "row_size"
                           A   634    
                           A   635    .CLASS 65
                           A   636    
                           A   637    .VALUE -8
                           A   638    
                           A   639    .TYPE 4
                           A   640    
                           A   641    .ENDEF
                           A   642    
                           A   643    .DEFINE "top_row"
                           A   644    
                           A   645    .CLASS 65
                           A   646    
                           A   647    .VALUE -11
                           A   648    
                           A   649    .TYPE 47
                           A   650    
                           A   651    .ENDEF
                           A   652    
                           A   653    .DEFINE "bottom_row"
                           A   654    
                           A   655    .CLASS 65
                           A   656    
                           A   657    .VALUE -14
                           A   658    
                           A   659    .TYPE 47
                           A   660    
                           A   661    .ENDEF
                           A   662    
0B0197 DDE5                A   663    	PUSH	IX
0B0199 DD210000 00         A   664    	LD	IX,0
0B019E DD39                A   665    	ADD	IX,SP
0B01A0 ED22F1              A   666    	LEA	HL,IX+%FFFFFFF1
0B01A3 F9                  A   667    	LD	SP,HL
                           A   668    ;   52	    uint16_t y;
                           A   669    ;   53	    uint32_t * row_buffer = (uint32_t *
                           A   670    .LINE 53
                           A   671    
0B01A4 DD2709              A   672    	LD	HL,(IX+%9)
0B01A7 29                  A   673    	ADD	HL,HL
0B01A8 29                  A   674    	ADD	HL,HL
0B01A9 E5                  A   675    	PUSH	HL
0B01AA DD77F1              A   676    	LD	(IX+%FFFFFFF1),A
0B01AD CD 91 2A 0B         A   677    	CALL	_malloc
0B01B1 DD7EF1              A   678    	LD	A,(IX+%FFFFFFF1)
0B01B4 C1                  A   679    	POP	BC
0B01B5 DD2FFB              A   680    	LD	(IX+%FFFFFFFB),HL
                           A   681    ;   54	    int row_size = width * sizeof(uint3
                           A   682    .LINE 54
                           A   683    
0B01B8 DD2709              A   684    	LD	HL,(IX+%9)
0B01BB 29                  A   685    	ADD	HL,HL
0B01BC 29                  A   686    	ADD	HL,HL
0B01BD DD2FF8              A   687    	LD	(IX+%FFFFFFF8),HL
                           A   688    ;   55	
                           A   689    ;   56	    for (y = 0; y < height / 2; y++) {
                           A   690    .LINE 56
                           A   691    
0B01C0 DD36FE00            A   692    	LD	(IX+%FFFFFFFE),%0
0B01C4 DD36FF00            A   693    	LD	(IX+%FFFFFFFF),%0
0B01C8 C3 58 02 0B         A   694    	JR	L_14
0B01CC                     A   695    L_12:
                           A   696    ;   57	        uint32_t * top_row = framebuffe
                           A   697    .LINE 57
                           A   698    
0B01CC DD07FE              A   699    	LD	BC,(IX+%FFFFFFFE)
0B01CF CD 4B 2D 0B         A   700    	CALL	__stoiu
0B01D3 DD0709              A   701    	LD	BC,(IX+%9)
0B01D6 CD F4 2E 0B         A   702    	CALL	__imuls
0B01DA 29                  A   703    	ADD	HL,HL
0B01DB 29                  A   704    	ADD	HL,HL
0B01DC DD0706              A   705    	LD	BC,(IX+%6)
0B01DF 09                  A   706    	ADD	HL,BC
0B01E0 DD2FF5              A   707    	LD	(IX+%FFFFFFF5),HL
                           A   708    ;   58	        uint32_t * bottom_row = framebu
                           A   709    .LINE 58
                           A   710    
0B01E3 DD07FE              A   711    	LD	BC,(IX+%FFFFFFFE)
0B01E6 CD 4B 2D 0B         A   712    	CALL	__stoiu
0B01EA E5C1                A   713    	LD	BC,HL
0B01EC DD270C              A   714    	LD	HL,(IX+%C)
0B01EF B7                  A   715    	OR	A,A
0B01F0 ED42                A   716    	SBC	HL,BC
0B01F2 2B                  A   717    	DEC	HL
0B01F3 DD0709              A   718    	LD	BC,(IX+%9)
0B01F6 CD F4 2E 0B         A   719    	CALL	__imuls
0B01FA 29                  A   720    	ADD	HL,HL
0B01FB 29                  A   721    	ADD	HL,HL
0B01FC DD0706              A   722    	LD	BC,(IX+%6)
0B01FF 09                  A   723    	ADD	HL,BC
0B0200 DD2FF2              A   724    	LD	(IX+%FFFFFFF2),HL
                           A   725    ;   59	
                           A   726    ;   60	        memcpy(row_buffer, top_row, row
                           A   727    .LINE 60
                           A   728    
0B0203 DD07F8              A   729    	LD	BC,(IX+%FFFFFFF8)
0B0206 C5                  A   730    	PUSH	BC
0B0207 DD07F5              A   731    	LD	BC,(IX+%FFFFFFF5)
0B020A C5                  A   732    	PUSH	BC
0B020B DD07FB              A   733    	LD	BC,(IX+%FFFFFFFB)
0B020E C5                  A   734    	PUSH	BC
0B020F DD77F1              A   735    	LD	(IX+%FFFFFFF1),A
0B0212 CD 6A 2E 0B         A   736    	CALL	_memcpy
0B0216 DD7EF1              A   737    	LD	A,(IX+%FFFFFFF1)
0B0219 C1                  A   738    	POP	BC
0B021A C1                  A   739    	POP	BC
0B021B C1                  A   740    	POP	BC
                           A   741    ;   61	        memcpy(top_row, bottom_row, row
                           A   742    .LINE 61
                           A   743    
0B021C DD07F8              A   744    	LD	BC,(IX+%FFFFFFF8)
0B021F C5                  A   745    	PUSH	BC
0B0220 DD07F2              A   746    	LD	BC,(IX+%FFFFFFF2)
0B0223 C5                  A   747    	PUSH	BC
0B0224 DD07F5              A   748    	LD	BC,(IX+%FFFFFFF5)
0B0227 C5                  A   749    	PUSH	BC
0B0228 DD77F1              A   750    	LD	(IX+%FFFFFFF1),A
0B022B CD 6A 2E 0B         A   751    	CALL	_memcpy
0B022F DD7EF1              A   752    	LD	A,(IX+%FFFFFFF1)
0B0232 C1                  A   753    	POP	BC
0B0233 C1                  A   754    	POP	BC
0B0234 C1                  A   755    	POP	BC
                           A   756    ;   62	        memcpy(bottom_row, row_buffer, 
                           A   757    .LINE 62
                           A   758    
0B0235 DD07F8              A   759    	LD	BC,(IX+%FFFFFFF8)
0B0238 C5                  A   760    	PUSH	BC
0B0239 DD07FB              A   761    	LD	BC,(IX+%FFFFFFFB)
0B023C C5                  A   762    	PUSH	BC
0B023D DD07F2              A   763    	LD	BC,(IX+%FFFFFFF2)
0B0240 C5                  A   764    	PUSH	BC
0B0241 DD77F1              A   765    	LD	(IX+%FFFFFFF1),A
0B0244 CD 6A 2E 0B         A   766    	CALL	_memcpy
0B0248 DD7EF1              A   767    	LD	A,(IX+%FFFFFFF1)
0B024B C1                  A   768    	POP	BC
0B024C C1                  A   769    	POP	BC
0B024D C1                  A   770    	POP	BC
0B024E DD27FE              A   771    	LD	HL,(IX+%FFFFFFFE)
0B0251 23                  A   772    	INC	HL
0B0252 DD75FE              A   773    	LD	(IX+%FFFFFFFE),L
0B0255 DD74FF              A   774    	LD	(IX+%FFFFFFFF),H
                           A   775    ;   63	    }
0B0258                     A   776    L_14:
                           A   777    .LINE 63
                           A   778    
0B0258 01020000            A   779    	LD	BC,2
0B025C DD270C              A   780    	LD	HL,(IX+%C)
0B025F CD 30 2F 0B         A   781    	CALL	__idivs
0B0263 E5D1                A   782    	LD	DE,HL
0B0265 DD07FE              A   783    	LD	BC,(IX+%FFFFFFFE)
0B0268 CD 4B 2D 0B         A   784    	CALL	__stoiu
0B026C B7                  A   785    	OR	A,A
0B026D ED52                A   786    	SBC	HL,DE
0B026F FA 79 02 0B         A   787    	JP	M,L__11
0B0273 EA CC 01 0B         A   788    	JP	PE,L_12
0B0277 18 04               A   789    	JR	L__12
0B0279                     A   790    L__11:
0B0279 E2 CC 01 0B         A   791    	JP	PO,L_12
0B027D                     A   792    L__12:
                           A   793    ;   64	
                           A   794    ;   65	    free(row_buffer);
                           A   795    .LINE 65
                           A   796    
0B027D DD07FB              A   797    	LD	BC,(IX+%FFFFFFFB)
0B0280 C5                  A   798    	PUSH	BC
0B0281 CD 8C 29 0B         A   799    	CALL	_free
0B0285 C1                  A   800    	POP	BC
                           A   801    ;   66	}
                           A   802    .LINE 66
                           A   803    
0B0286 DDF9                A   804    	LD	SP,IX
0B0288 DDE1                A   805    	POP	IX
0B028A C9                  A   806    	RET	
                           A   807    
                           A   808    
                           A   809    ;**************************** _flip ***********
                           A   810    ;Name                         Addr/Register   S
                           A   811    ;_free                               IMPORT  --
                           A   812    ;_memcpy                             IMPORT  --
                           A   813    ;_malloc                             IMPORT  --
                           A   814    ;bottom_row                           IX-14    
                           A   815    ;top_row                              IX-11    
                           A   816    ;row_size                              IX-8    
                           A   817    ;row_buffer                            IX-5    
                           A   818    ;y                                     IX-2    
                           A   819    ;height                               IX+12    
                           A   820    ;width                                 IX+9    
                           A   821    ;framebuffer                           IX+6    
                           A   822    
                           A   823    
                           A   824    ; Stack Frame Size: 30 (bytes)
                           A   825    ;       Spill Code: 0 (instruction)
                           A   826    
                           A   827    
                           A   828    .ENDFUNC "flip",66,"_flip"
                           A   829    ;   67	
                           A   830    ;   68	void twiddle_buffer(char* buffer, int w
0B028B                     A   831    _twiddle_buffer:
                           A   832    .DEFINE "_twiddle_buffer"
                           A   833    
                           A   834    .VALUE _twiddle_buffer
                           A   835    
                           A   836    .CLASS 2
                           A   837    
                           A   838    .TYPE 65
                           A   839    
                           A   840    .ENDEF
                           A   841    
                           A   842    .BEGFUNC "twiddle_buffer",68,"_twiddle_buffer"
                           A   843    
                           A   844    .LINE 68
                           A   845    
                           A   846    .DEFINE "buffer"
                           A   847    
                           A   848    .CLASS 65
                           A   849    
                           A   850    .VALUE 6
                           A   851    
                           A   852    .TYPE 34
                           A   853    
                           A   854    .ENDEF
                           A   855    
                           A   856    .DEFINE "width"
                           A   857    
                           A   858    .CLASS 65
                           A   859    
                           A   860    .VALUE 9
                           A   861    
                           A   862    .TYPE 4
                           A   863    
                           A   864    .ENDEF
                           A   865    
                           A   866    .DEFINE "height"
                           A   867    
                           A   868    .CLASS 65
                           A   869    
                           A   870    .VALUE 12
                           A   871    
                           A   872    .TYPE 4
                           A   873    
                           A   874    .ENDEF
                           A   875    
                           A   876    .DEFINE "col"
                           A   877    
                           A   878    .CLASS 65
                           A   879    
                           A   880    .VALUE -3
                           A   881    
                           A   882    .TYPE 4
                           A   883    
                           A   884    .ENDEF
                           A   885    
                           A   886    .DEFINE "tempRow"
                           A   887    
                           A   888    .CLASS 65
                           A   889    
                           A   890    .VALUE -6
                           A   891    
                           A   892    .TYPE 34
                           A   893    
                           A   894    .ENDEF
                           A   895    
                           A   896    .DEFINE "oppositeRowPtr"
                           A   897    
                           A   898    .CLASS 65
                           A   899    
                           A   900    .VALUE -9
                           A   901    
                           A   902    .TYPE 34
                           A   903    
                           A   904    .ENDEF
                           A   905    
                           A   906    .DEFINE "rowPtr"
                           A   907    
                           A   908    .CLASS 65
                           A   909    
                           A   910    .VALUE -12
                           A   911    
                           A   912    .TYPE 34
                           A   913    
                           A   914    .ENDEF
                           A   915    
                           A   916    .DEFINE "row"
                           A   917    
                           A   918    .CLASS 65
                           A   919    
                           A   920    .VALUE -15
                           A   921    
                           A   922    .TYPE 4
                           A   923    
                           A   924    .ENDEF
                           A   925    
0B028B DDE5                A   926    	PUSH	IX
0B028D DD210000 00         A   927    	LD	IX,0
0B0292 DD39                A   928    	ADD	IX,SP
0B0294 ED22E4              A   929    	LEA	HL,IX+%FFFFFFE4
0B0297 F9                  A   930    	LD	SP,HL
                           A   931    ;   69	    int row, col;
                           A   932    ;   70	    char* rowPtr;
                           A   933    ;   71		char* oppositeRowPtr;
                           A   934    ;   72		char* tempRow = (char*)malloc(width
                           A   935    .LINE 72
                           A   936    
0B0298 DD2709              A   937    	LD	HL,(IX+%9)
0B029B 29                  A   938    	ADD	HL,HL
0B029C 29                  A   939    	ADD	HL,HL
0B029D E5                  A   940    	PUSH	HL
0B029E DD77E4              A   941    	LD	(IX+%FFFFFFE4),A
0B02A1 CD 91 2A 0B         A   942    	CALL	_malloc
0B02A5 DD7EE4              A   943    	LD	A,(IX+%FFFFFFE4)
0B02A8 C1                  A   944    	POP	BC
0B02A9 DD2FFA              A   945    	LD	(IX+%FFFFFFFA),HL
                           A   946    ;   73	
                           A   947    ;   74	    //Iterate over each row
                           A   948    ;   75	    for (row = 0; row < height / 2; row
                           A   949    .LINE 75
                           A   950    
0B02AC 01000000            A   951    	LD	BC,0
0B02B0 DD0FF1              A   952    	LD	(IX+%FFFFFFF1),BC
0B02B3 C3 6B 04 0B         A   953    	JR	L_24
0B02B7                     A   954    L_22:
                           A   955    ;   76	        rowPtr = buffer + row * width *
                           A   956    .LINE 76
                           A   957    
0B02B7 DD27F1              A   958    	LD	HL,(IX+%FFFFFFF1)
0B02BA DD0709              A   959    	LD	BC,(IX+%9)
0B02BD CD F4 2E 0B         A   960    	CALL	__imuls
0B02C1 29                  A   961    	ADD	HL,HL
0B02C2 29                  A   962    	ADD	HL,HL
0B02C3 DD0706              A   963    	LD	BC,(IX+%6)
0B02C6 09                  A   964    	ADD	HL,BC
0B02C7 DD2FF4              A   965    	LD	(IX+%FFFFFFF4),HL
                           A   966    ;   77	        oppositeRowPtr = buffer + (heig
                           A   967    .LINE 77
                           A   968    
0B02CA DD07F1              A   969    	LD	BC,(IX+%FFFFFFF1)
0B02CD DD270C              A   970    	LD	HL,(IX+%C)
0B02D0 B7                  A   971    	OR	A,A
0B02D1 ED42                A   972    	SBC	HL,BC
0B02D3 2B                  A   973    	DEC	HL
0B02D4 DD0709              A   974    	LD	BC,(IX+%9)
0B02D7 CD F4 2E 0B         A   975    	CALL	__imuls
0B02DB 29                  A   976    	ADD	HL,HL
0B02DC 29                  A   977    	ADD	HL,HL
0B02DD DD0706              A   978    	LD	BC,(IX+%6)
0B02E0 09                  A   979    	ADD	HL,BC
0B02E1 DD2FF7              A   980    	LD	(IX+%FFFFFFF7),HL
                           A   981    ;   78	
                           A   982    ;   79	        //Swap bytes within each row (B
                           A   983    ;   80	        for (col = 0; col < width; col+
                           A   984    .LINE 80
                           A   985    
0B02E4 01000000            A   986    	LD	BC,0
0B02E8 DD0FFD              A   987    	LD	(IX+%FFFFFFFD),BC
0B02EB C3 4D 04 0B         A   988    	JR	L_21
0B02EF                     A   989    L_19:
                           A   990    ;   81	            tempRow[col * 4] = opposite
                           A   991    .LINE 81
                           A   992    
0B02EF DD27FD              A   993    	LD	HL,(IX+%FFFFFFFD)
0B02F2 29                  A   994    	ADD	HL,HL
0B02F3 29                  A   995    	ADD	HL,HL
0B02F4 E5C1                A   996    	LD	BC,HL
0B02F6 DD27FD              A   997    	LD	HL,(IX+%FFFFFFFD)
0B02F9 29                  A   998    	ADD	HL,HL
0B02FA 29                  A   999    	ADD	HL,HL
0B02FB DD17F7              A  1000    	LD	DE,(IX+%FFFFFFF7)
0B02FE 19                  A  1001    	ADD	HL,DE
0B02FF E5FDE1              A  1002    	LD	IY,HL
0B0302 C5D1                A  1003    	LD	DE,BC
0B0304 DD27FA              A  1004    	LD	HL,(IX+%FFFFFFFA)
0B0307 19                  A  1005    	ADD	HL,DE
0B0308 FD7E02              A  1006    	LD	A,(IY+%2)
0B030B 77                  A  1007    	LD	(HL),A
                           A  1008    ;   82	            tempRow[col * 4 + 1] = oppo
                           A  1009    .LINE 82
                           A  1010    
0B030C DD27FD              A  1011    	LD	HL,(IX+%FFFFFFFD)
0B030F 29                  A  1012    	ADD	HL,HL
0B0310 29                  A  1013    	ADD	HL,HL
0B0311 E5D1                A  1014    	LD	DE,HL
0B0313 DD27F7              A  1015    	LD	HL,(IX+%FFFFFFF7)
0B0316 09                  A  1016    	ADD	HL,BC
0B0317 E5FDE1              A  1017    	LD	IY,HL
0B031A D5C1                A  1018    	LD	BC,DE
0B031C DD27FA              A  1019    	LD	HL,(IX+%FFFFFFFA)
0B031F 09                  A  1020    	ADD	HL,BC
0B0320 23                  A  1021    	INC	HL
0B0321 FD7E01              A  1022    	LD	A,(IY+%1)
0B0324 77                  A  1023    	LD	(HL),A
                           A  1024    ;   83	            tempRow[col * 4 + 2] = oppo
                           A  1025    .LINE 83
                           A  1026    
0B0325 DD27FD              A  1027    	LD	HL,(IX+%FFFFFFFD)
0B0328 29                  A  1028    	ADD	HL,HL
0B0329 29                  A  1029    	ADD	HL,HL
0B032A E5C1                A  1030    	LD	BC,HL
0B032C DD27F7              A  1031    	LD	HL,(IX+%FFFFFFF7)
0B032F 19                  A  1032    	ADD	HL,DE
0B0330 E5FDE1              A  1033    	LD	IY,HL
0B0333 C5D1                A  1034    	LD	DE,BC
0B0335 DD27FA              A  1035    	LD	HL,(IX+%FFFFFFFA)
0B0338 19                  A  1036    	ADD	HL,DE
0B0339 23                  A  1037    	INC	HL
0B033A 23                  A  1038    	INC	HL
0B033B FD7E00              A  1039    	LD	A,(IY)
0B033E 77                  A  1040    	LD	(HL),A
                           A  1041    ;   84	            tempRow[col * 4 + 3] = oppo
                           A  1042    .LINE 84
                           A  1043    
0B033F DD27FD              A  1044    	LD	HL,(IX+%FFFFFFFD)
0B0342 29                  A  1045    	ADD	HL,HL
0B0343 29                  A  1046    	ADD	HL,HL
0B0344 E5D1                A  1047    	LD	DE,HL
0B0346 DD27F7              A  1048    	LD	HL,(IX+%FFFFFFF7)
0B0349 09                  A  1049    	ADD	HL,BC
0B034A E5FDE1              A  1050    	LD	IY,HL
0B034D DD2FEE              A  1051    	LD	(IX+%FFFFFFEE),HL	; spill
0B0350 ED2303              A  1052    	LEA	HL,IY+%3
0B0353 DD2FEB              A  1053    	LD	(IX+%FFFFFFEB),HL	; spill
0B0356 D5C1                A  1054    	LD	BC,DE
0B0358 DD27FA              A  1055    	LD	HL,(IX+%FFFFFFFA)
0B035B 09                  A  1056    	ADD	HL,BC
0B035C E5FDE1              A  1057    	LD	IY,HL
0B035F DD27EB              A  1058    	LD	HL,(IX+%FFFFFFEB)	; unspill
0B0362 7E                  A  1059    	LD	A,(HL)
0B0363 FD7703              A  1060    	LD	(IY+%3),A
                           A  1061    ;   85	
                           A  1062    ;   86	            oppositeRowPtr[col * 4] = r
                           A  1063    .LINE 86
                           A  1064    
0B0366 DD27FD              A  1065    	LD	HL,(IX+%FFFFFFFD)
0B0369 29                  A  1066    	ADD	HL,HL
0B036A 29                  A  1067    	ADD	HL,HL
0B036B E5C1                A  1068    	LD	BC,HL
0B036D DD27F4              A  1069    	LD	HL,(IX+%FFFFFFF4)
0B0370 19                  A  1070    	ADD	HL,DE
0B0371 E5FDE1              A  1071    	LD	IY,HL
0B0374 C5D1                A  1072    	LD	DE,BC
0B0376 DD27F7              A  1073    	LD	HL,(IX+%FFFFFFF7)
0B0379 19                  A  1074    	ADD	HL,DE
0B037A FD7E02              A  1075    	LD	A,(IY+%2)
0B037D 77                  A  1076    	LD	(HL),A
                           A  1077    ;   87	            oppositeRowPtr[col * 4 + 1]
                           A  1078    .LINE 87
                           A  1079    
0B037E DD27FD              A  1080    	LD	HL,(IX+%FFFFFFFD)
0B0381 29                  A  1081    	ADD	HL,HL
0B0382 29                  A  1082    	ADD	HL,HL
0B0383 E5D1                A  1083    	LD	DE,HL
0B0385 DD27F4              A  1084    	LD	HL,(IX+%FFFFFFF4)
0B0388 09                  A  1085    	ADD	HL,BC
0B0389 E5FDE1              A  1086    	LD	IY,HL
0B038C D5C1                A  1087    	LD	BC,DE
0B038E DD27F7              A  1088    	LD	HL,(IX+%FFFFFFF7)
0B0391 09                  A  1089    	ADD	HL,BC
0B0392 23                  A  1090    	INC	HL
0B0393 FD7E01              A  1091    	LD	A,(IY+%1)
0B0396 77                  A  1092    	LD	(HL),A
                           A  1093    ;   88	            oppositeRowPtr[col * 4 + 2]
                           A  1094    .LINE 88
                           A  1095    
0B0397 DD27FD              A  1096    	LD	HL,(IX+%FFFFFFFD)
0B039A 29                  A  1097    	ADD	HL,HL
0B039B 29                  A  1098    	ADD	HL,HL
0B039C E5C1                A  1099    	LD	BC,HL
0B039E DD27F4              A  1100    	LD	HL,(IX+%FFFFFFF4)
0B03A1 19                  A  1101    	ADD	HL,DE
0B03A2 E5FDE1              A  1102    	LD	IY,HL
0B03A5 C5D1                A  1103    	LD	DE,BC
0B03A7 DD27F7              A  1104    	LD	HL,(IX+%FFFFFFF7)
0B03AA 19                  A  1105    	ADD	HL,DE
0B03AB 23                  A  1106    	INC	HL
0B03AC 23                  A  1107    	INC	HL
0B03AD FD7E00              A  1108    	LD	A,(IY)
0B03B0 77                  A  1109    	LD	(HL),A
                           A  1110    ;   89	            oppositeRowPtr[col * 4 + 3]
                           A  1111    .LINE 89
                           A  1112    
0B03B1 DD27FD              A  1113    	LD	HL,(IX+%FFFFFFFD)
0B03B4 29                  A  1114    	ADD	HL,HL
0B03B5 29                  A  1115    	ADD	HL,HL
0B03B6 E5D1                A  1116    	LD	DE,HL
0B03B8 DD27F4              A  1117    	LD	HL,(IX+%FFFFFFF4)
0B03BB 09                  A  1118    	ADD	HL,BC
0B03BC E5FDE1              A  1119    	LD	IY,HL
0B03BF DD2FEE              A  1120    	LD	(IX+%FFFFFFEE),HL	; spill
0B03C2 ED2303              A  1121    	LEA	HL,IY+%3
0B03C5 DD2FE8              A  1122    	LD	(IX+%FFFFFFE8),HL	; spill
0B03C8 D5C1                A  1123    	LD	BC,DE
0B03CA DD27F7              A  1124    	LD	HL,(IX+%FFFFFFF7)
0B03CD 09                  A  1125    	ADD	HL,BC
0B03CE E5FDE1              A  1126    	LD	IY,HL
0B03D1 DD27E8              A  1127    	LD	HL,(IX+%FFFFFFE8)	; unspill
0B03D4 7E                  A  1128    	LD	A,(HL)
0B03D5 FD7703              A  1129    	LD	(IY+%3),A
                           A  1130    ;   90	
                           A  1131    ;   91	            rowPtr[col * 4] = tempRow[c
                           A  1132    .LINE 91
                           A  1133    
0B03D8 DD27FD              A  1134    	LD	HL,(IX+%FFFFFFFD)
0B03DB 29                  A  1135    	ADD	HL,HL
0B03DC 29                  A  1136    	ADD	HL,HL
0B03DD E5C1                A  1137    	LD	BC,HL
0B03DF DD27FA              A  1138    	LD	HL,(IX+%FFFFFFFA)
0B03E2 19                  A  1139    	ADD	HL,DE
0B03E3 E5FDE1              A  1140    	LD	IY,HL
0B03E6 C5D1                A  1141    	LD	DE,BC
0B03E8 DD27F4              A  1142    	LD	HL,(IX+%FFFFFFF4)
0B03EB 19                  A  1143    	ADD	HL,DE
0B03EC FD7E00              A  1144    	LD	A,(IY)
0B03EF 77                  A  1145    	LD	(HL),A
                           A  1146    ;   92	            rowPtr[col * 4 + 1] = tempR
                           A  1147    .LINE 92
                           A  1148    
0B03F0 DD27FD              A  1149    	LD	HL,(IX+%FFFFFFFD)
0B03F3 29                  A  1150    	ADD	HL,HL
0B03F4 29                  A  1151    	ADD	HL,HL
0B03F5 E5D1                A  1152    	LD	DE,HL
0B03F7 DD27FA              A  1153    	LD	HL,(IX+%FFFFFFFA)
0B03FA 09                  A  1154    	ADD	HL,BC
0B03FB E5FDE1              A  1155    	LD	IY,HL
0B03FE D5C1                A  1156    	LD	BC,DE
0B0400 DD27F4              A  1157    	LD	HL,(IX+%FFFFFFF4)
0B0403 09                  A  1158    	ADD	HL,BC
0B0404 23                  A  1159    	INC	HL
0B0405 FD7E01              A  1160    	LD	A,(IY+%1)
0B0408 77                  A  1161    	LD	(HL),A
                           A  1162    ;   93	            rowPtr[col * 4 + 2] = tempR
                           A  1163    .LINE 93
                           A  1164    
0B0409 DD27FD              A  1165    	LD	HL,(IX+%FFFFFFFD)
0B040C 29                  A  1166    	ADD	HL,HL
0B040D 29                  A  1167    	ADD	HL,HL
0B040E E5C1                A  1168    	LD	BC,HL
0B0410 DD27FA              A  1169    	LD	HL,(IX+%FFFFFFFA)
0B0413 19                  A  1170    	ADD	HL,DE
0B0414 E5FDE1              A  1171    	LD	IY,HL
0B0417 C5D1                A  1172    	LD	DE,BC
0B0419 DD27F4              A  1173    	LD	HL,(IX+%FFFFFFF4)
0B041C 19                  A  1174    	ADD	HL,DE
0B041D 23                  A  1175    	INC	HL
0B041E 23                  A  1176    	INC	HL
0B041F FD7E02              A  1177    	LD	A,(IY+%2)
0B0422 77                  A  1178    	LD	(HL),A
                           A  1179    ;   94	            rowPtr[col * 4 + 3] = tempR
                           A  1180    .LINE 94
                           A  1181    
0B0423 DD27FA              A  1182    	LD	HL,(IX+%FFFFFFFA)
0B0426 09                  A  1183    	ADD	HL,BC
0B0427 E5FDE1              A  1184    	LD	IY,HL
0B042A DD2FEE              A  1185    	LD	(IX+%FFFFFFEE),HL	; spill
0B042D ED2303              A  1186    	LEA	HL,IY+%3
0B0430 DD2FE5              A  1187    	LD	(IX+%FFFFFFE5),HL	; spill
0B0433 DD27FD              A  1188    	LD	HL,(IX+%FFFFFFFD)
0B0436 29                  A  1189    	ADD	HL,HL
0B0437 29                  A  1190    	ADD	HL,HL
0B0438 DD07F4              A  1191    	LD	BC,(IX+%FFFFFFF4)
0B043B 09                  A  1192    	ADD	HL,BC
0B043C E5FDE1              A  1193    	LD	IY,HL
0B043F DD27E5              A  1194    	LD	HL,(IX+%FFFFFFE5)	; unspill
0B0442 7E                  A  1195    	LD	A,(HL)
0B0443 FD7703              A  1196    	LD	(IY+%3),A
0B0446 DD07FD              A  1197    	LD	BC,(IX+%FFFFFFFD)
0B0449 03                  A  1198    	INC	BC
0B044A DD0FFD              A  1199    	LD	(IX+%FFFFFFFD),BC
                           A  1200    ;   95	        }
0B044D                     A  1201    L_21:
                           A  1202    .LINE 95
                           A  1203    
0B044D DD0709              A  1204    	LD	BC,(IX+%9)
0B0450 DD27FD              A  1205    	LD	HL,(IX+%FFFFFFFD)
0B0453 B7                  A  1206    	OR	A,A
0B0454 ED42                A  1207    	SBC	HL,BC
0B0456 FA 60 04 0B         A  1208    	JP	M,L__16
0B045A EA EF 02 0B         A  1209    	JP	PE,L_19
0B045E 18 04               A  1210    	JR	L__17
0B0460                     A  1211    L__16:
0B0460 E2 EF 02 0B         A  1212    	JP	PO,L_19
0B0464                     A  1213    L__17:
0B0464 DD07F1              A  1214    	LD	BC,(IX+%FFFFFFF1)
0B0467 03                  A  1215    	INC	BC
0B0468 DD0FF1              A  1216    	LD	(IX+%FFFFFFF1),BC
                           A  1217    ;   96	    }
0B046B                     A  1218    L_24:
                           A  1219    .LINE 96
                           A  1220    
0B046B 01020000            A  1221    	LD	BC,2
0B046F DD270C              A  1222    	LD	HL,(IX+%C)
0B0472 CD 30 2F 0B         A  1223    	CALL	__idivs
0B0476 E5C1                A  1224    	LD	BC,HL
0B0478 DD27F1              A  1225    	LD	HL,(IX+%FFFFFFF1)
0B047B B7                  A  1226    	OR	A,A
0B047C ED42                A  1227    	SBC	HL,BC
0B047E FA 88 04 0B         A  1228    	JP	M,L__18
0B0482 EA B7 02 0B         A  1229    	JP	PE,L_22
0B0486 18 04               A  1230    	JR	L__19
0B0488                     A  1231    L__18:
0B0488 E2 B7 02 0B         A  1232    	JP	PO,L_22
0B048C                     A  1233    L__19:
                           A  1234    ;   97		free(tempRow);
                           A  1235    .LINE 97
                           A  1236    
0B048C DD07FA              A  1237    	LD	BC,(IX+%FFFFFFFA)
0B048F C5                  A  1238    	PUSH	BC
0B0490 CD 8C 29 0B         A  1239    	CALL	_free
0B0494 C1                  A  1240    	POP	BC
                           A  1241    ;   98	}
                           A  1242    .LINE 98
                           A  1243    
0B0495 DDF9                A  1244    	LD	SP,IX
0B0497 DDE1                A  1245    	POP	IX
0B0499 C9                  A  1246    	RET	
                           A  1247    
                           A  1248    
                           A  1249    ;**************************** _twiddle_buffer *
                           A  1250    ;Name                         Addr/Register   S
                           A  1251    ;_free                               IMPORT  --
                           A  1252    ;_malloc                             IMPORT  --
                           A  1253    ;row                                  IX-15    
                           A  1254    ;rowPtr                               IX-12    
                           A  1255    ;oppositeRowPtr                        IX-9    
                           A  1256    ;tempRow                               IX-6    
                           A  1257    ;col                                   IX-3    
                           A  1258    ;height                               IX+12    
                           A  1259    ;width                                 IX+9    
                           A  1260    ;buffer                                IX+6    
                           A  1261    
                           A  1262    
                           A  1263    ; Stack Frame Size: 43 (bytes)
                           A  1264    ;       Spill Code: -3 (instruction)
                           A  1265    
                           A  1266    
                           A  1267    .ENDFUNC "twiddle_buffer",98,"_twiddle_buffer"
                           A  1268    ;   99	
                           A  1269    ;  100	// void bgra8888_to_rgba2222(char *inpu
                           A  1270    ;  101	    // 
                           A  1271    ;  102		// char *input_ptr = input;
                           A  1272    ;  103	    // char *output_ptr = output;
                           A  1273    ;  104	
                           A  1274    ;  105	    // while (num_pixels--) {
                           A  1275    ;  106	
                           A  1276    ;  107	        // *output_ptr = CONVR64[input[
                           A  1277    ;  108	
                           A  1278    ;  109	        // input_ptr += 4;
                           A  1279    ;  110	        // output_ptr++;
                           A  1280    ;  111			// 
                           A  1281    ;  112	    // }
                           A  1282    ;  113	// }
                           A  1283    ;  114	
                           A  1284    ;  115	void rgba8888_to_rgba2222(char *input, 
0B049A                     A  1285    _rgba8888_to_rgba2222:
                           A  1286    .DEFINE "_rgba8888_to_rgba2222"
                           A  1287    
                           A  1288    .VALUE _rgba8888_to_rgba2222
                           A  1289    
                           A  1290    .CLASS 2
                           A  1291    
                           A  1292    .TYPE 65
                           A  1293    
                           A  1294    .ENDEF
                           A  1295    
                           A  1296    .BEGFUNC "rgba8888_to_rgba2222",115,"_rgba8888_
                           A  1297    
                           A  1298    .LINE 115
                           A  1299    
                           A  1300    .DEFINE "input"
                           A  1301    
                           A  1302    .CLASS 65
                           A  1303    
                           A  1304    .VALUE 6
                           A  1305    
                           A  1306    .TYPE 34
                           A  1307    
                           A  1308    .ENDEF
                           A  1309    
                           A  1310    .DEFINE "output"
                           A  1311    
                           A  1312    .CLASS 65
                           A  1313    
                           A  1314    .VALUE 9
                           A  1315    
                           A  1316    .TYPE 34
                           A  1317    
                           A  1318    .ENDEF
                           A  1319    
                           A  1320    .DEFINE "num_pixels"
                           A  1321    
                           A  1322    .CLASS 65
                           A  1323    
                           A  1324    .VALUE 12
                           A  1325    
                           A  1326    .TYPE 14
                           A  1327    
                           A  1328    .ENDEF
                           A  1329    
                           A  1330    .DEFINE "input_ptr"
                           A  1331    
                           A  1332    .CLASS 65
                           A  1333    
                           A  1334    .VALUE -3
                           A  1335    
                           A  1336    .TYPE 34
                           A  1337    
                           A  1338    .ENDEF
                           A  1339    
                           A  1340    .DEFINE "output_ptr"
                           A  1341    
                           A  1342    .CLASS 65
                           A  1343    
                           A  1344    .VALUE -6
                           A  1345    
                           A  1346    .TYPE 34
                           A  1347    
                           A  1348    .ENDEF
                           A  1349    
                           A  1350    .DEFINE "r"
                           A  1351    
                           A  1352    .CLASS 65
                           A  1353    
                           A  1354    .VALUE -7
                           A  1355    
                           A  1356    .TYPE 12
                           A  1357    
                           A  1358    .ENDEF
                           A  1359    
                           A  1360    .DEFINE "g"
                           A  1361    
                           A  1362    .CLASS 65
                           A  1363    
                           A  1364    .VALUE -8
                           A  1365    
                           A  1366    .TYPE 12
                           A  1367    
                           A  1368    .ENDEF
                           A  1369    
                           A  1370    .DEFINE "b"
                           A  1371    
                           A  1372    .CLASS 65
                           A  1373    
                           A  1374    .VALUE -9
                           A  1375    
                           A  1376    .TYPE 12
                           A  1377    
                           A  1378    .ENDEF
                           A  1379    
                           A  1380    .DEFINE "a"
                           A  1381    
                           A  1382    .CLASS 65
                           A  1383    
                           A  1384    .VALUE -10
                           A  1385    
                           A  1386    .TYPE 12
                           A  1387    
                           A  1388    .ENDEF
                           A  1389    
0B049A DDE5                A  1390    	PUSH	IX
0B049C DD210000 00         A  1391    	LD	IX,0
0B04A1 DD39                A  1392    	ADD	IX,SP
0B04A3 ED22E7              A  1393    	LEA	HL,IX+%FFFFFFE7
0B04A6 F9                  A  1394    	LD	SP,HL
                           A  1395    ;  116	    char *input_ptr = input;
                           A  1396    .LINE 116
                           A  1397    
0B04A7 DD0706              A  1398    	LD	BC,(IX+%6)
0B04AA DD0FFD              A  1399    	LD	(IX+%FFFFFFFD),BC
                           A  1400    ;  117	    char *output_ptr = output;
                           A  1401    .LINE 117
                           A  1402    
0B04AD DD0709              A  1403    	LD	BC,(IX+%9)
0B04B0 DD0FFA              A  1404    	LD	(IX+%FFFFFFFA),BC
                           A  1405    ;  118	
                           A  1406    ;  119	    while (num_pixels--) {
                           A  1407    .LINE 119
                           A  1408    
0B04B3 C3 4B 05 0B         A  1409    	JR	L_33
0B04B7                     A  1410    L_34:
                           A  1411    ;  120	        uint8_t r = *input_ptr++;
                           A  1412    .LINE 120
                           A  1413    
0B04B7 DD07FD              A  1414    	LD	BC,(IX+%FFFFFFFD)
0B04BA DD0FF3              A  1415    	LD	(IX+%FFFFFFF3),BC
0B04BD DD07FD              A  1416    	LD	BC,(IX+%FFFFFFFD)
0B04C0 03                  A  1417    	INC	BC
0B04C1 DD0FFD              A  1418    	LD	(IX+%FFFFFFFD),BC
0B04C4 DD27F3              A  1419    	LD	HL,(IX+%FFFFFFF3)
0B04C7 7E                  A  1420    	LD	A,(HL)
0B04C8 DD77F9              A  1421    	LD	(IX+%FFFFFFF9),A
                           A  1422    ;  121			uint8_t g = *input_ptr++;
                           A  1423    .LINE 121
                           A  1424    
0B04CB DD07FD              A  1425    	LD	BC,(IX+%FFFFFFFD)
0B04CE DD0FF0              A  1426    	LD	(IX+%FFFFFFF0),BC
0B04D1 DD07FD              A  1427    	LD	BC,(IX+%FFFFFFFD)
0B04D4 03                  A  1428    	INC	BC
0B04D5 DD0FFD              A  1429    	LD	(IX+%FFFFFFFD),BC
0B04D8 DD27F0              A  1430    	LD	HL,(IX+%FFFFFFF0)
0B04DB 7E                  A  1431    	LD	A,(HL)
0B04DC DD77F8              A  1432    	LD	(IX+%FFFFFFF8),A
                           A  1433    ;  122			uint8_t b = *input_ptr++;
                           A  1434    .LINE 122
                           A  1435    
0B04DF DD07FD              A  1436    	LD	BC,(IX+%FFFFFFFD)
0B04E2 DD0FED              A  1437    	LD	(IX+%FFFFFFED),BC
0B04E5 DD07FD              A  1438    	LD	BC,(IX+%FFFFFFFD)
0B04E8 03                  A  1439    	INC	BC
0B04E9 DD0FFD              A  1440    	LD	(IX+%FFFFFFFD),BC
0B04EC DD27ED              A  1441    	LD	HL,(IX+%FFFFFFED)
0B04EF 7E                  A  1442    	LD	A,(HL)
0B04F0 DD77F7              A  1443    	LD	(IX+%FFFFFFF7),A
                           A  1444    ;  123	        uint8_t a = *input_ptr++;
                           A  1445    .LINE 123
                           A  1446    
0B04F3 DD07FD              A  1447    	LD	BC,(IX+%FFFFFFFD)
0B04F6 DD0FEA              A  1448    	LD	(IX+%FFFFFFEA),BC
0B04F9 DD07FD              A  1449    	LD	BC,(IX+%FFFFFFFD)
0B04FC 03                  A  1450    	INC	BC
0B04FD DD0FFD              A  1451    	LD	(IX+%FFFFFFFD),BC
0B0500 DD27EA              A  1452    	LD	HL,(IX+%FFFFFFEA)
0B0503 7E                  A  1453    	LD	A,(HL)
0B0504 DD77F6              A  1454    	LD	(IX+%FFFFFFF6),A
                           A  1455    ;  124	
                           A  1456    ;  125	        *output_ptr++ = (r & 0xC0) | ((
                           A  1457    .LINE 125
                           A  1458    
0B0507 DD07FA              A  1459    	LD	BC,(IX+%FFFFFFFA)
0B050A DD0FE7              A  1460    	LD	(IX+%FFFFFFE7),BC
0B050D DD7EF8              A  1461    	LD	A,(IX+%FFFFFFF8)
0B0510 CB3F                A  1462    	SRL	A
0B0512 CB3F                A  1463    	SRL	A
0B0514 E630                A  1464    	AND	A,%30
0B0516 6F                  A  1465    	LD	L,A
0B0517 DD7EF9              A  1466    	LD	A,(IX+%FFFFFFF9)
0B051A E6C0                A  1467    	AND	A,%C0
0B051C 47                  A  1468    	LD	B,A
0B051D 7D                  A  1469    	LD	A,L
0B051E B0                  A  1470    	OR	A,B
0B051F 47                  A  1471    	LD	B,A
0B0520 DD7EF7              A  1472    	LD	A,(IX+%FFFFFFF7)
0B0523 CB3F                A  1473    	SRL	A
0B0525 CB3F                A  1474    	SRL	A
0B0527 CB3F                A  1475    	SRL	A
0B0529 CB3F                A  1476    	SRL	A
0B052B E60C                A  1477    	AND	A,%C
0B052D 6F                  A  1478    	LD	L,A
0B052E 78                  A  1479    	LD	A,B
0B052F B5                  A  1480    	OR	A,L
0B0530 47                  A  1481    	LD	B,A
0B0531 DD7EF6              A  1482    	LD	A,(IX+%FFFFFFF6)
0B0534 B7ED62              A  1483    	UEXT	HL
0B0537 6F                  A  1484    	LD	L,A
0B0538 3E06                A  1485    	LD	A,%6
0B053A CD 7C 2B 0B         A  1486    	CALL	__ishrs_b
0B053E 78                  A  1487    	LD	A,B
0B053F B5                  A  1488    	OR	A,L
0B0540 DD27E7              A  1489    	LD	HL,(IX+%FFFFFFE7)
0B0543 77                  A  1490    	LD	(HL),A
0B0544 DD07FA              A  1491    	LD	BC,(IX+%FFFFFFFA)
0B0547 03                  A  1492    	INC	BC
0B0548 DD0FFA              A  1493    	LD	(IX+%FFFFFFFA),BC
                           A  1494    ;  126	    }
0B054B                     A  1495    L_33:
                           A  1496    .LINE 126
                           A  1497    
0B054B DD270C              A  1498    	LD	HL,(IX+%C)
0B054E DD310C              A  1499    	LD	IY,(IX+%C)
0B0551 ED33FF              A  1500    	LEA	IY,IY+%FFFFFFFF
0B0554 DD3E0C              A  1501    	LD	(IX+%C),IY
0B0557 01000000            A  1502    	LD	BC,0
0B055B B7                  A  1503    	OR	A,A
0B055C ED42                A  1504    	SBC	HL,BC
0B055E C2 B7 04 0B         A  1505    	JR	NZ,L_34
                           A  1506    ;  127	}
                           A  1507    .LINE 127
                           A  1508    
0B0562 DDF9                A  1509    	LD	SP,IX
0B0564 DDE1                A  1510    	POP	IX
0B0566 C9                  A  1511    	RET	
                           A  1512    
                           A  1513    
                           A  1514    ;**************************** _rgba8888_to_rgba
                           A  1515    ;Name                         Addr/Register   S
                           A  1516    ;a                                    IX-10    
                           A  1517    ;b                                     IX-9    
                           A  1518    ;g                                     IX-8    
                           A  1519    ;r                                     IX-7    
                           A  1520    ;output_ptr                            IX-6    
                           A  1521    ;input_ptr                             IX-3    
                           A  1522    ;num_pixels                           IX+12    
                           A  1523    ;output                                IX+9    
                           A  1524    ;input                                 IX+6    
                           A  1525    
                           A  1526    
                           A  1527    ; Stack Frame Size: 40 (bytes)
                           A  1528    ;       Spill Code: -3 (instruction)
                           A  1529    
                           A  1530    
                           A  1531    .ENDFUNC "rgba8888_to_rgba2222",127,"_rgba8888_
                           A  1532    ;  128	
                           A  1533    ;  129	void clear_buffer(uint16_t buffer_id) {
0B0567                     A  1534    _clear_buffer:
                           A  1535    .DEFINE "_clear_buffer"
                           A  1536    
                           A  1537    .VALUE _clear_buffer
                           A  1538    
                           A  1539    .CLASS 2
                           A  1540    
                           A  1541    .TYPE 65
                           A  1542    
                           A  1543    .ENDEF
                           A  1544    
                           A  1545    .BEGFUNC "clear_buffer",129,"_clear_buffer"
                           A  1546    
                           A  1547    .LINE 129
                           A  1548    
                           A  1549    .DEFINE "buffer_id"
                           A  1550    
                           A  1551    .CLASS 65
                           A  1552    
                           A  1553    .VALUE 6
                           A  1554    
                           A  1555    .TYPE 13
                           A  1556    
                           A  1557    .ENDEF
                           A  1558    
0B0567 DDE5                A  1559    	PUSH	IX
0B0569 DD210000 00         A  1560    	LD	IX,0
0B056E DD39                A  1561    	ADD	IX,SP
                           A  1562    ;  130		
                           A  1563    ;  131		putch(23);
                           A  1564    .LINE 131
                           A  1565    
0B0570 01170000            A  1566    	LD	BC,23
0B0574 C5                  A  1567    	PUSH	BC
0B0575 CD 83 25 0B         A  1568    	CALL	_putch
0B0579 C1                  A  1569    	POP	BC
                           A  1570    ;  132		putch(0);
                           A  1571    .LINE 132
                           A  1572    
0B057A 01000000            A  1573    	LD	BC,0
0B057E C5                  A  1574    	PUSH	BC
0B057F CD 83 25 0B         A  1575    	CALL	_putch
0B0583 C1                  A  1576    	POP	BC
                           A  1577    ;  133		putch(0xA0);
                           A  1578    .LINE 133
                           A  1579    
0B0584 01A00000            A  1580    	LD	BC,160
0B0588 C5                  A  1581    	PUSH	BC
0B0589 CD 83 25 0B         A  1582    	CALL	_putch
0B058D C1                  A  1583    	POP	BC
                           A  1584    ;  134		write16bit(buffer_id);
                           A  1585    .LINE 134
                           A  1586    
0B058E DD0706              A  1587    	LD	BC,(IX+%6)
0B0591 C5                  A  1588    	PUSH	BC
0B0592 CD C1 19 0B         A  1589    	CALL	_write16bit
0B0596 C1                  A  1590    	POP	BC
                           A  1591    ;  135		putch(2);	
                           A  1592    .LINE 135
                           A  1593    
0B0597 01020000            A  1594    	LD	BC,2
0B059B C5                  A  1595    	PUSH	BC
0B059C CD 83 25 0B         A  1596    	CALL	_putch
0B05A0 C1                  A  1597    	POP	BC
                           A  1598    ;  136		
                           A  1599    ;  137	}
                           A  1600    .LINE 137
                           A  1601    
0B05A1 DDF9                A  1602    	LD	SP,IX
0B05A3 DDE1                A  1603    	POP	IX
0B05A5 C9                  A  1604    	RET	
                           A  1605    
                           A  1606    
                           A  1607    ;**************************** _clear_buffer ***
                           A  1608    ;Name                         Addr/Register   S
                           A  1609    ;_write16bit                         IMPORT  --
                           A  1610    ;_putch                              IMPORT  --
                           A  1611    ;buffer_id                             IX+6    
                           A  1612    
                           A  1613    
                           A  1614    ; Stack Frame Size: 9 (bytes)
                           A  1615    ;       Spill Code: -3 (instruction)
                           A  1616    
                           A  1617    
                           A  1618    .ENDFUNC "clear_buffer",137,"_clear_buffer"
                           A  1619    ;  138	
                           A  1620    ;  139	void add_stream_to_buffer(uint16_t buff
0B05A6                     A  1621    _add_stream_to_buffer:
                           A  1622    .DEFINE "_add_stream_to_buffer"
                           A  1623    
                           A  1624    .VALUE _add_stream_to_buffer
                           A  1625    
                           A  1626    .CLASS 2
                           A  1627    
                           A  1628    .TYPE 65
                           A  1629    
                           A  1630    .ENDEF
                           A  1631    
                           A  1632    .BEGFUNC "add_stream_to_buffer",139,"_add_strea
                           A  1633    
                           A  1634    .LINE 139
                           A  1635    
                           A  1636    .DEFINE "buffer_id"
                           A  1637    
                           A  1638    .CLASS 65
                           A  1639    
                           A  1640    .VALUE 6
                           A  1641    
                           A  1642    .TYPE 13
                           A  1643    
                           A  1644    .ENDEF
                           A  1645    
                           A  1646    .DEFINE "buffer_content"
                           A  1647    
                           A  1648    .CLASS 65
                           A  1649    
                           A  1650    .VALUE 9
                           A  1651    
                           A  1652    .TYPE 34
                           A  1653    
                           A  1654    .ENDEF
                           A  1655    
                           A  1656    .DEFINE "buffer_size"
                           A  1657    
                           A  1658    .CLASS 65
                           A  1659    
                           A  1660    .VALUE 12
                           A  1661    
                           A  1662    .TYPE 13
                           A  1663    
                           A  1664    .ENDEF
                           A  1665    
0B05A6 DDE5                A  1666    	PUSH	IX
0B05A8 DD210000 00         A  1667    	LD	IX,0
0B05AD DD39                A  1668    	ADD	IX,SP
                           A  1669    ;  140	
                           A  1670    ;  141		putch(23);
                           A  1671    .LINE 141
                           A  1672    
0B05AF 01170000            A  1673    	LD	BC,23
0B05B3 C5                  A  1674    	PUSH	BC
0B05B4 CD 83 25 0B         A  1675    	CALL	_putch
0B05B8 C1                  A  1676    	POP	BC
                           A  1677    ;  142		putch(0);
                           A  1678    .LINE 142
                           A  1679    
0B05B9 01000000            A  1680    	LD	BC,0
0B05BD C5                  A  1681    	PUSH	BC
0B05BE CD 83 25 0B         A  1682    	CALL	_putch
0B05C2 C1                  A  1683    	POP	BC
                           A  1684    ;  143		putch(0xA0);
                           A  1685    .LINE 143
                           A  1686    
0B05C3 01A00000            A  1687    	LD	BC,160
0B05C7 C5                  A  1688    	PUSH	BC
0B05C8 CD 83 25 0B         A  1689    	CALL	_putch
0B05CC C1                  A  1690    	POP	BC
                           A  1691    ;  144		write16bit(buffer_id);
                           A  1692    .LINE 144
                           A  1693    
0B05CD DD0706              A  1694    	LD	BC,(IX+%6)
0B05D0 C5                  A  1695    	PUSH	BC
0B05D1 CD C1 19 0B         A  1696    	CALL	_write16bit
0B05D5 C1                  A  1697    	POP	BC
                           A  1698    ;  145		putch(0);
                           A  1699    .LINE 145
                           A  1700    
0B05D6 01000000            A  1701    	LD	BC,0
0B05DA C5                  A  1702    	PUSH	BC
0B05DB CD 83 25 0B         A  1703    	CALL	_putch
0B05DF C1                  A  1704    	POP	BC
                           A  1705    ;  146		write16bit(buffer_size);
                           A  1706    .LINE 146
                           A  1707    
0B05E0 DD070C              A  1708    	LD	BC,(IX+%C)
0B05E3 C5                  A  1709    	PUSH	BC
0B05E4 CD C1 19 0B         A  1710    	CALL	_write16bit
0B05E8 C1                  A  1711    	POP	BC
                           A  1712    ;  147		
                           A  1713    ;  148		mos_puts(buffer_content, buffer_siz
                           A  1714    .LINE 148
                           A  1715    
0B05E9 01000000            A  1716    	LD	BC,0
0B05ED C5                  A  1717    	PUSH	BC
0B05EE DD070C              A  1718    	LD	BC,(IX+%C)
0B05F1 CD 4B 2D 0B         A  1719    	CALL	__stoiu
0B05F5 E5                  A  1720    	PUSH	HL
0B05F6 DD0709              A  1721    	LD	BC,(IX+%9)
0B05F9 C5                  A  1722    	PUSH	BC
0B05FA CD 9B 25 0B         A  1723    	CALL	_mos_puts
0B05FE C1                  A  1724    	POP	BC
0B05FF C1                  A  1725    	POP	BC
0B0600 C1                  A  1726    	POP	BC
                           A  1727    ;  149	
                           A  1728    ;  150	}
                           A  1729    .LINE 150
                           A  1730    
0B0601 DDF9                A  1731    	LD	SP,IX
0B0603 DDE1                A  1732    	POP	IX
0B0605 C9                  A  1733    	RET	
                           A  1734    
                           A  1735    
                           A  1736    ;**************************** _add_stream_to_bu
                           A  1737    ;Name                         Addr/Register   S
                           A  1738    ;_mos_puts                           IMPORT  --
                           A  1739    ;_write16bit                         IMPORT  --
                           A  1740    ;_putch                              IMPORT  --
                           A  1741    ;buffer_size                          IX+12    
                           A  1742    ;buffer_content                        IX+9    
                           A  1743    ;buffer_id                             IX+6    
                           A  1744    
                           A  1745    
                           A  1746    ; Stack Frame Size: 15 (bytes)
                           A  1747    ;       Spill Code: -3 (instruction)
                           A  1748    
                           A  1749    
                           A  1750    .ENDFUNC "add_stream_to_buffer",150,"_add_strea
                           A  1751    ;  151	
                           A  1752    ;  152	void vdp_extended_select(uint16_t buffe
0B0606                     A  1753    _vdp_extended_select:
                           A  1754    .DEFINE "_vdp_extended_select"
                           A  1755    
                           A  1756    .VALUE _vdp_extended_select
                           A  1757    
                           A  1758    .CLASS 2
                           A  1759    
                           A  1760    .TYPE 65
                           A  1761    
                           A  1762    .ENDEF
                           A  1763    
                           A  1764    .BEGFUNC "vdp_extended_select",152,"_vdp_extend
                           A  1765    
                           A  1766    .LINE 152
                           A  1767    
                           A  1768    .DEFINE "buffer_id"
                           A  1769    
                           A  1770    .CLASS 65
                           A  1771    
                           A  1772    .VALUE 6
                           A  1773    
                           A  1774    .TYPE 13
                           A  1775    
                           A  1776    .ENDEF
                           A  1777    
0B0606 DDE5                A  1778    	PUSH	IX
0B0608 DD210000 00         A  1779    	LD	IX,0
0B060D DD39                A  1780    	ADD	IX,SP
                           A  1781    ;  153	
                           A  1782    ;  154		putch(23);
                           A  1783    .LINE 154
                           A  1784    
0B060F 01170000            A  1785    	LD	BC,23
0B0613 C5                  A  1786    	PUSH	BC
0B0614 CD 83 25 0B         A  1787    	CALL	_putch
0B0618 C1                  A  1788    	POP	BC
                           A  1789    ;  155		putch(27);
                           A  1790    .LINE 155
                           A  1791    
0B0619 011B0000            A  1792    	LD	BC,27
0B061D C5                  A  1793    	PUSH	BC
0B061E CD 83 25 0B         A  1794    	CALL	_putch
0B0622 C1                  A  1795    	POP	BC
                           A  1796    ;  156		putch(0x20);
                           A  1797    .LINE 156
                           A  1798    
0B0623 01200000            A  1799    	LD	BC,32
0B0627 C5                  A  1800    	PUSH	BC
0B0628 CD 83 25 0B         A  1801    	CALL	_putch
0B062C C1                  A  1802    	POP	BC
                           A  1803    ;  157		write16bit(buffer_id);
                           A  1804    .LINE 157
                           A  1805    
0B062D DD0706              A  1806    	LD	BC,(IX+%6)
0B0630 C5                  A  1807    	PUSH	BC
0B0631 CD C1 19 0B         A  1808    	CALL	_write16bit
0B0635 C1                  A  1809    	POP	BC
                           A  1810    ;  158	
                           A  1811    ;  159	}
                           A  1812    .LINE 159
                           A  1813    
0B0636 DDF9                A  1814    	LD	SP,IX
0B0638 DDE1                A  1815    	POP	IX
0B063A C9                  A  1816    	RET	
                           A  1817    
                           A  1818    
                           A  1819    ;**************************** _vdp_extended_sel
                           A  1820    ;Name                         Addr/Register   S
                           A  1821    ;_write16bit                         IMPORT  --
                           A  1822    ;_putch                              IMPORT  --
                           A  1823    ;buffer_id                             IX+6    
                           A  1824    
                           A  1825    
                           A  1826    ; Stack Frame Size: 9 (bytes)
                           A  1827    ;       Spill Code: -3 (instruction)
                           A  1828    
                           A  1829    
                           A  1830    .ENDFUNC "vdp_extended_select",159,"_vdp_extend
                           A  1831    ;  160	
                           A  1832    ;  161	void assign_buffer_to_bitmap(uint16_t b
0B063B                     A  1833    _assign_buffer_to_bitmap:
                           A  1834    .DEFINE "_assign_buffer_to_bitmap"
                           A  1835    
                           A  1836    .VALUE _assign_buffer_to_bitmap
                           A  1837    
                           A  1838    .CLASS 2
                           A  1839    
                           A  1840    .TYPE 65
                           A  1841    
                           A  1842    .ENDEF
                           A  1843    
                           A  1844    .BEGFUNC "assign_buffer_to_bitmap",161,"_assign
                           A  1845    
                           A  1846    .LINE 161
                           A  1847    
                           A  1848    .DEFINE "buffer_id"
                           A  1849    
                           A  1850    .CLASS 65
                           A  1851    
                           A  1852    .VALUE 6
                           A  1853    
                           A  1854    .TYPE 13
                           A  1855    
                           A  1856    .ENDEF
                           A  1857    
                           A  1858    .DEFINE "bitmap_format"
                           A  1859    
                           A  1860    .CLASS 65
                           A  1861    
                           A  1862    .VALUE 9
                           A  1863    
                           A  1864    .TYPE 12
                           A  1865    
                           A  1866    .ENDEF
                           A  1867    
                           A  1868    .DEFINE "width"
                           A  1869    
                           A  1870    .CLASS 65
                           A  1871    
                           A  1872    .VALUE 12
                           A  1873    
                           A  1874    .TYPE 13
                           A  1875    
                           A  1876    .ENDEF
                           A  1877    
                           A  1878    .DEFINE "height"
                           A  1879    
                           A  1880    .CLASS 65
                           A  1881    
                           A  1882    .VALUE 15
                           A  1883    
                           A  1884    .TYPE 13
                           A  1885    
                           A  1886    .ENDEF
                           A  1887    
0B063B DDE5                A  1888    	PUSH	IX
0B063D DD210000 00         A  1889    	LD	IX,0
0B0642 DD39                A  1890    	ADD	IX,SP
                           A  1891    ;  162	
                           A  1892    ;  163		//Consolidate buffer: (if needed) V
                           A  1893    ;  164		
                           A  1894    ;  165		putch(23);
                           A  1895    .LINE 165
                           A  1896    
0B0644 01170000            A  1897    	LD	BC,23
0B0648 C5                  A  1898    	PUSH	BC
0B0649 CD 83 25 0B         A  1899    	CALL	_putch
0B064D C1                  A  1900    	POP	BC
                           A  1901    ;  166		putch(0);
                           A  1902    .LINE 166
                           A  1903    
0B064E 01000000            A  1904    	LD	BC,0
0B0652 C5                  A  1905    	PUSH	BC
0B0653 CD 83 25 0B         A  1906    	CALL	_putch
0B0657 C1                  A  1907    	POP	BC
                           A  1908    ;  167		putch(0xA0);
                           A  1909    .LINE 167
                           A  1910    
0B0658 01A00000            A  1911    	LD	BC,160
0B065C C5                  A  1912    	PUSH	BC
0B065D CD 83 25 0B         A  1913    	CALL	_putch
0B0661 C1                  A  1914    	POP	BC
                           A  1915    ;  168		write16bit(buffer_id);
                           A  1916    .LINE 168
                           A  1917    
0B0662 DD0706              A  1918    	LD	BC,(IX+%6)
0B0665 C5                  A  1919    	PUSH	BC
0B0666 CD C1 19 0B         A  1920    	CALL	_write16bit
0B066A C1                  A  1921    	POP	BC
                           A  1922    ;  169		putch(0x0E);
                           A  1923    .LINE 169
                           A  1924    
0B066B 010E0000            A  1925    	LD	BC,14
0B066F C5                  A  1926    	PUSH	BC
0B0670 CD 83 25 0B         A  1927    	CALL	_putch
0B0674 C1                  A  1928    	POP	BC
                           A  1929    ;  170		
                           A  1930    ;  171		//Create bitmap from buffer: VDU 23
                           A  1931    ;  172		
                           A  1932    ;  173		putch(23);
                           A  1933    .LINE 173
                           A  1934    
0B0675 01170000            A  1935    	LD	BC,23
0B0679 C5                  A  1936    	PUSH	BC
0B067A CD 83 25 0B         A  1937    	CALL	_putch
0B067E C1                  A  1938    	POP	BC
                           A  1939    ;  174		putch(27);
                           A  1940    .LINE 174
                           A  1941    
0B067F 011B0000            A  1942    	LD	BC,27
0B0683 C5                  A  1943    	PUSH	BC
0B0684 CD 83 25 0B         A  1944    	CALL	_putch
0B0688 C1                  A  1945    	POP	BC
                           A  1946    ;  175		putch(0x21);
                           A  1947    .LINE 175
                           A  1948    
0B0689 01210000            A  1949    	LD	BC,33
0B068D C5                  A  1950    	PUSH	BC
0B068E CD 83 25 0B         A  1951    	CALL	_putch
0B0692 C1                  A  1952    	POP	BC
                           A  1953    ;  176		write16bit(buffer_id);
                           A  1954    .LINE 176
                           A  1955    
0B0693 DD0706              A  1956    	LD	BC,(IX+%6)
0B0696 C5                  A  1957    	PUSH	BC
0B0697 CD C1 19 0B         A  1958    	CALL	_write16bit
0B069B C1                  A  1959    	POP	BC
                           A  1960    ;  177		putch(bitmap_format);
                           A  1961    .LINE 177
                           A  1962    
0B069C DD7E09              A  1963    	LD	A,(IX+%9)
0B069F B7ED62              A  1964    	UEXT	HL
0B06A2 6F                  A  1965    	LD	L,A
0B06A3 E5                  A  1966    	PUSH	HL
0B06A4 CD 83 25 0B         A  1967    	CALL	_putch
0B06A8 C1                  A  1968    	POP	BC
                           A  1969    ;  178		write16bit(width);
                           A  1970    .LINE 178
                           A  1971    
0B06A9 DD070C              A  1972    	LD	BC,(IX+%C)
0B06AC C5                  A  1973    	PUSH	BC
0B06AD CD C1 19 0B         A  1974    	CALL	_write16bit
0B06B1 C1                  A  1975    	POP	BC
                           A  1976    ;  179		write16bit(height);
                           A  1977    .LINE 179
                           A  1978    
0B06B2 DD070F              A  1979    	LD	BC,(IX+%F)
0B06B5 C5                  A  1980    	PUSH	BC
0B06B6 CD C1 19 0B         A  1981    	CALL	_write16bit
0B06BA C1                  A  1982    	POP	BC
                           A  1983    ;  180		
                           A  1984    ;  181	}
                           A  1985    .LINE 181
                           A  1986    
0B06BB DDF9                A  1987    	LD	SP,IX
0B06BD DDE1                A  1988    	POP	IX
0B06BF C9                  A  1989    	RET	
                           A  1990    
                           A  1991    
                           A  1992    ;**************************** _assign_buffer_to
                           A  1993    ;Name                         Addr/Register   S
                           A  1994    ;_write16bit                         IMPORT  --
                           A  1995    ;_putch                              IMPORT  --
                           A  1996    ;height                               IX+15    
                           A  1997    ;width                                IX+12    
                           A  1998    ;bitmap_format                         IX+9    
                           A  1999    ;buffer_id                             IX+6    
                           A  2000    
                           A  2001    
                           A  2002    ; Stack Frame Size: 18 (bytes)
                           A  2003    ;       Spill Code: -3 (instruction)
                           A  2004    
                           A  2005    
                           A  2006    .ENDFUNC "assign_buffer_to_bitmap",181,"_assign
                           A  2007    ;  182	
                           A  2008    ;  183	void reorder(char *arr, uint16_t length
0B06C0                     A  2009    _reorder:
                           A  2010    .DEFINE "_reorder"
                           A  2011    
                           A  2012    .VALUE _reorder
                           A  2013    
                           A  2014    .CLASS 2
                           A  2015    
                           A  2016    .TYPE 65
                           A  2017    
                           A  2018    .ENDEF
                           A  2019    
                           A  2020    .BEGFUNC "reorder",183,"_reorder"
                           A  2021    
                           A  2022    .LINE 183
                           A  2023    
                           A  2024    .DEFINE "arr"
                           A  2025    
                           A  2026    .CLASS 65
                           A  2027    
                           A  2028    .VALUE 6
                           A  2029    
                           A  2030    .TYPE 34
                           A  2031    
                           A  2032    .ENDEF
                           A  2033    
                           A  2034    .DEFINE "length"
                           A  2035    
                           A  2036    .CLASS 65
                           A  2037    
                           A  2038    .VALUE 9
                           A  2039    
                           A  2040    .TYPE 13
                           A  2041    
                           A  2042    .ENDEF
                           A  2043    
                           A  2044    .DEFINE "i"
                           A  2045    
                           A  2046    .CLASS 65
                           A  2047    
                           A  2048    .VALUE -2
                           A  2049    
                           A  2050    .TYPE 13
                           A  2051    
                           A  2052    .ENDEF
                           A  2053    
                           A  2054    .DEFINE "temp"
                           A  2055    
                           A  2056    .CLASS 65
                           A  2057    
                           A  2058    .VALUE -3
                           A  2059    
                           A  2060    .TYPE 12
                           A  2061    
                           A  2062    .ENDEF
                           A  2063    
0B06C0 DDE5                A  2064    	PUSH	IX
0B06C2 DD210000 00         A  2065    	LD	IX,0
0B06C7 DD39                A  2066    	ADD	IX,SP
0B06C9 C5                  A  2067    	PUSH	BC
0B06CA C5                  A  2068    	PUSH	BC
                           A  2069    ;  184	    uint16_t i;
                           A  2070    ;  185		for (i = 0; i < length; i += 4) {
                           A  2071    .LINE 185
                           A  2072    
0B06CB DD36FE00            A  2073    	LD	(IX+%FFFFFFFE),%0
0B06CF DD36FF00            A  2074    	LD	(IX+%FFFFFFFF),%0
0B06D3 18 68               A  2075    	JR	L_43
0B06D5                     A  2076    L_41:
                           A  2077    ;  186	        if (i + 2 < length) {
                           A  2078    .LINE 186
                           A  2079    
0B06D5 DD07FE              A  2080    	LD	BC,(IX+%FFFFFFFE)
0B06D8 CD 4B 2D 0B         A  2081    	CALL	__stoiu
0B06DC E5D1                A  2082    	LD	DE,HL
0B06DE 13                  A  2083    	INC	DE
0B06DF 13                  A  2084    	INC	DE
0B06E0 DD0709              A  2085    	LD	BC,(IX+%9)
0B06E3 CD 4B 2D 0B         A  2086    	CALL	__stoiu
0B06E7 E5C1                A  2087    	LD	BC,HL
0B06E9 D5E1                A  2088    	LD	HL,DE
0B06EB B7                  A  2089    	OR	A,A
0B06EC ED42                A  2090    	SBC	HL,BC
0B06EE F2 F8 06 0B         A  2091    	JP	P,L__29
0B06F2 EA 31 07 0B         A  2092    	JP	PE,L_42
0B06F6 18 04               A  2093    	JR	L__30
0B06F8                     A  2094    L__29:
0B06F8 E2 31 07 0B         A  2095    	JP	PO,L_42
0B06FC                     A  2096    L__30:
                           A  2097    ;  187	            uint8_t temp = arr[i];
                           A  2098    .LINE 187
                           A  2099    
0B06FC DD07FE              A  2100    	LD	BC,(IX+%FFFFFFFE)
0B06FF CD 4B 2D 0B         A  2101    	CALL	__stoiu
0B0703 DD0706              A  2102    	LD	BC,(IX+%6)
0B0706 09                  A  2103    	ADD	HL,BC
0B0707 DD2FFA              A  2104    	LD	(IX+%FFFFFFFA),HL
0B070A 7E                  A  2105    	LD	A,(HL)
0B070B DD77FD              A  2106    	LD	(IX+%FFFFFFFD),A
                           A  2107    ;  188	            arr[i] = arr[i + 2];
                           A  2108    .LINE 188
                           A  2109    
0B070E DD31FA              A  2110    	LD	IY,(IX+%FFFFFFFA)
0B0711 DD07FE              A  2111    	LD	BC,(IX+%FFFFFFFE)
0B0714 CD 4B 2D 0B         A  2112    	CALL	__stoiu
0B0718 DD0706              A  2113    	LD	BC,(IX+%6)
0B071B 09                  A  2114    	ADD	HL,BC
0B071C FD7E02              A  2115    	LD	A,(IY+%2)
0B071F 77                  A  2116    	LD	(HL),A
                           A  2117    ;  189	            arr[i + 2] = temp;
                           A  2118    .LINE 189
                           A  2119    
0B0720 DD07FE              A  2120    	LD	BC,(IX+%FFFFFFFE)
0B0723 CD 4B 2D 0B         A  2121    	CALL	__stoiu
0B0727 DD0706              A  2122    	LD	BC,(IX+%6)
0B072A 09                  A  2123    	ADD	HL,BC
0B072B 23                  A  2124    	INC	HL
0B072C 23                  A  2125    	INC	HL
0B072D DD7EFD              A  2126    	LD	A,(IX+%FFFFFFFD)
0B0730 77                  A  2127    	LD	(HL),A
                           A  2128    ;  190	        }
                           A  2129    ;  191	    }
0B0731                     A  2130    L_42:
                           A  2131    .LINE 191
                           A  2132    
0B0731 DD31FE              A  2133    	LD	IY,(IX+%FFFFFFFE)
0B0734 ED2304              A  2134    	LEA	HL,IY+%4
0B0737 DD75FE              A  2135    	LD	(IX+%FFFFFFFE),L
0B073A DD74FF              A  2136    	LD	(IX+%FFFFFFFF),H
0B073D                     A  2137    L_43:
0B073D DD0709              A  2138    	LD	BC,(IX+%9)
0B0740 DD27FE              A  2139    	LD	HL,(IX+%FFFFFFFE)
0B0743 B7                  A  2140    	OR	A,A
0B0744 40ED42              A  2141    	SBC.SIS	HL,BC
0B0747 38 8C               A  2142    	JR	C,L_41
                           A  2143    ;  192	}
                           A  2144    .LINE 192
                           A  2145    
0B0749 DDF9                A  2146    	LD	SP,IX
0B074B DDE1                A  2147    	POP	IX
0B074D C9                  A  2148    	RET	
                           A  2149    
                           A  2150    
                           A  2151    ;**************************** _reorder ********
                           A  2152    ;Name                         Addr/Register   S
                           A  2153    ;temp                                  IX-3    
                           A  2154    ;i                                     IX-2    
                           A  2155    ;length                                IX+9    
                           A  2156    ;arr                                   IX+6    
                           A  2157    
                           A  2158    
                           A  2159    ; Stack Frame Size: 18 (bytes)
                           A  2160    ;       Spill Code: -3 (instruction)
                           A  2161    
                           A  2162    
                           A  2163    .ENDFUNC "reorder",192,"_reorder"
                           A  2164    ;  193	
                           A  2165    ;  194	void reorder_and_insert(char *arr, uint
0B074E                     A  2166    _reorder_and_insert:
                           A  2167    .DEFINE "_reorder_and_insert"
                           A  2168    
                           A  2169    .VALUE _reorder_and_insert
                           A  2170    
                           A  2171    .CLASS 2
                           A  2172    
                           A  2173    .TYPE 65
                           A  2174    
                           A  2175    .ENDEF
                           A  2176    
                           A  2177    .BEGFUNC "reorder_and_insert",194,"_reorder_and
                           A  2178    
                           A  2179    .LINE 194
                           A  2180    
                           A  2181    .DEFINE "arr"
                           A  2182    
                           A  2183    .CLASS 65
                           A  2184    
                           A  2185    .VALUE 6
                           A  2186    
                           A  2187    .TYPE 34
                           A  2188    
                           A  2189    .ENDEF
                           A  2190    
                           A  2191    .DEFINE "length"
                           A  2192    
                           A  2193    .CLASS 65
                           A  2194    
                           A  2195    .VALUE 9
                           A  2196    
                           A  2197    .TYPE 13
                           A  2198    
                           A  2199    .ENDEF
                           A  2200    
                           A  2201    .DEFINE "new_arr"
                           A  2202    
                           A  2203    .CLASS 65
                           A  2204    
                           A  2205    .VALUE 12
                           A  2206    
                           A  2207    .TYPE 290
                           A  2208    
                           A  2209    .ENDEF
                           A  2210    
                           A  2211    .DEFINE "new_length"
                           A  2212    
                           A  2213    .CLASS 65
                           A  2214    
                           A  2215    .VALUE 15
                           A  2216    
                           A  2217    .TYPE 45
                           A  2218    
                           A  2219    .ENDEF
                           A  2220    
                           A  2221    .DEFINE "insert_value"
                           A  2222    
                           A  2223    .CLASS 65
                           A  2224    
                           A  2225    .VALUE 18
                           A  2226    
                           A  2227    .TYPE 2
                           A  2228    
                           A  2229    .ENDEF
                           A  2230    
                           A  2231    .DEFINE "i"
                           A  2232    
                           A  2233    .CLASS 65
                           A  2234    
                           A  2235    .VALUE -2
                           A  2236    
                           A  2237    .TYPE 13
                           A  2238    
                           A  2239    .ENDEF
                           A  2240    
                           A  2241    .DEFINE "j"
                           A  2242    
                           A  2243    .CLASS 65
                           A  2244    
                           A  2245    .VALUE -4
                           A  2246    
                           A  2247    .TYPE 13
                           A  2248    
                           A  2249    .ENDEF
                           A  2250    
0B074E DDE5                A  2251    	PUSH	IX
0B0750 DD210000 00         A  2252    	LD	IX,0
0B0755 DD39                A  2253    	ADD	IX,SP
0B0757 ED22ED              A  2254    	LEA	HL,IX+%FFFFFFED
0B075A F9                  A  2255    	LD	SP,HL
                           A  2256    ;  195	
                           A  2257    ;  196		uint16_t i, j = 0;
                           A  2258    .LINE 196
                           A  2259    
0B075B DD36FC00            A  2260    	LD	(IX+%FFFFFFFC),%0
0B075F DD36FD00            A  2261    	LD	(IX+%FFFFFFFD),%0
                           A  2262    ;  197	    *new_length = (length / 3) * 4 + (l
                           A  2263    .LINE 197
                           A  2264    
0B0763 DD0709              A  2265    	LD	BC,(IX+%9)
0B0766 CD 4B 2D 0B         A  2266    	CALL	__stoiu
0B076A 01030000            A  2267    	LD	BC,3
0B076E CD 30 2F 0B         A  2268    	CALL	__idivs
0B0772 29                  A  2269    	ADD	HL,HL
0B0773 29                  A  2270    	ADD	HL,HL
0B0774 E5D1                A  2271    	LD	DE,HL
0B0776 DD0709              A  2272    	LD	BC,(IX+%9)
0B0779 CD 4B 2D 0B         A  2273    	CALL	__stoiu
0B077D 01030000            A  2274    	LD	BC,3
0B0781 CD 44 2B 0B         A  2275    	CALL	__irems
0B0785 19                  A  2276    	ADD	HL,DE
0B0786 E5C1                A  2277    	LD	BC,HL
0B0788 DD270F              A  2278    	LD	HL,(IX+%F)
0B078B 71                  A  2279    	LD	(HL),C
0B078C 23                  A  2280    	INC	HL
0B078D 70                  A  2281    	LD	(HL),B
                           A  2282    ;  198	    *new_arr = (char *) malloc(*new_len
                           A  2283    .LINE 198
                           A  2284    
0B078E DD270F              A  2285    	LD	HL,(IX+%F)
0B0791 ED07                A  2286    	LD	BC,(HL)
0B0793 CD 4B 2D 0B         A  2287    	CALL	__stoiu
0B0797 E5                  A  2288    	PUSH	HL
0B0798 CD 91 2A 0B         A  2289    	CALL	_malloc
0B079C C1                  A  2290    	POP	BC
0B079D DD310C              A  2291    	LD	IY,(IX+%C)
0B07A0 FD2F00              A  2292    	LD	(IY),HL
                           A  2293    ;  199	
                           A  2294    ;  200	    for (i = 0; i < length; i += 3) {
                           A  2295    .LINE 200
                           A  2296    
0B07A3 DD36FE00            A  2297    	LD	(IX+%FFFFFFFE),%0
0B07A7 DD36FF00            A  2298    	LD	(IX+%FFFFFFFF),%0
0B07AB C3 B4 08 0B         A  2299    	JR	L_55
0B07AF                     A  2300    L_53:
                           A  2301    ;  201	        
                           A  2302    ;  202	        (*new_arr)[j] = (i + 2 < length
                           A  2303    .LINE 202
                           A  2304    
0B07AF DD07FE              A  2305    	LD	BC,(IX+%FFFFFFFE)
0B07B2 CD 4B 2D 0B         A  2306    	CALL	__stoiu
0B07B6 E5D1                A  2307    	LD	DE,HL
0B07B8 13                  A  2308    	INC	DE
0B07B9 13                  A  2309    	INC	DE
0B07BA DD0709              A  2310    	LD	BC,(IX+%9)
0B07BD CD 4B 2D 0B         A  2311    	CALL	__stoiu
0B07C1 E5C1                A  2312    	LD	BC,HL
0B07C3 D5E1                A  2313    	LD	HL,DE
0B07C5 B7                  A  2314    	OR	A,A
0B07C6 ED42                A  2315    	SBC	HL,BC
0B07C8 F2 D2 07 0B         A  2316    	JP	P,L__35
0B07CC EA EE 07 0B         A  2317    	JP	PE,L_47
0B07D0 18 04               A  2318    	JR	L__36
0B07D2                     A  2319    L__35:
0B07D2 E2 EE 07 0B         A  2320    	JP	PO,L_47
0B07D6                     A  2321    L__36:
0B07D6 DD07FE              A  2322    	LD	BC,(IX+%FFFFFFFE)
0B07D9 CD 4B 2D 0B         A  2323    	CALL	__stoiu
0B07DD DD0706              A  2324    	LD	BC,(IX+%6)
0B07E0 09                  A  2325    	ADD	HL,BC
0B07E1 23                  A  2326    	INC	HL
0B07E2 23                  A  2327    	INC	HL
0B07E3 7E                  A  2328    	LD	A,(HL)
0B07E4 47                  A  2329    	LD	B,A
0B07E5 17ED62              A  2330    	SEXT	HL
0B07E8 68                  A  2331    	LD	L,B
0B07E9 DD2FF9              A  2332    	LD	(IX+%FFFFFFF9),HL
0B07EC 18 07               A  2333    	JR	L_48
0B07EE                     A  2334    L_47:
0B07EE 01000000            A  2335    	LD	BC,0
0B07F2 DD0FF9              A  2336    	LD	(IX+%FFFFFFF9),BC
0B07F5                     A  2337    L_48:
0B07F5 DD310C              A  2338    	LD	IY,(IX+%C)
0B07F8 DD07FC              A  2339    	LD	BC,(IX+%FFFFFFFC)
0B07FB CD 4B 2D 0B         A  2340    	CALL	__stoiu
0B07FF FD0700              A  2341    	LD	BC,(IY)
0B0802 09                  A  2342    	ADD	HL,BC
0B0803 DD2FF3              A  2343    	LD	(IX+%FFFFFFF3),HL
0B0806 DD7EF9              A  2344    	LD	A,(IX+%FFFFFFF9)
0B0809 DD27F3              A  2345    	LD	HL,(IX+%FFFFFFF3)
0B080C 77                  A  2346    	LD	(HL),A
                           A  2347    ;  203	        (*new_arr)[j + 1] = (i + 1 < le
                           A  2348    .LINE 203
                           A  2349    
0B080D DD07FE              A  2350    	LD	BC,(IX+%FFFFFFFE)
0B0810 CD 4B 2D 0B         A  2351    	CALL	__stoiu
0B0814 E5D1                A  2352    	LD	DE,HL
0B0816 13                  A  2353    	INC	DE
0B0817 DD0709              A  2354    	LD	BC,(IX+%9)
0B081A CD 4B 2D 0B         A  2355    	CALL	__stoiu
0B081E E5C1                A  2356    	LD	BC,HL
0B0820 D5E1                A  2357    	LD	HL,DE
0B0822 B7                  A  2358    	OR	A,A
0B0823 ED42                A  2359    	SBC	HL,BC
0B0825 F2 2F 08 0B         A  2360    	JP	P,L__37
0B0829 EA 4A 08 0B         A  2361    	JP	PE,L_51
0B082D 18 04               A  2362    	JR	L__38
0B082F                     A  2363    L__37:
0B082F E2 4A 08 0B         A  2364    	JP	PO,L_51
0B0833                     A  2365    L__38:
0B0833 DD07FE              A  2366    	LD	BC,(IX+%FFFFFFFE)
0B0836 CD 4B 2D 0B         A  2367    	CALL	__stoiu
0B083A DD0706              A  2368    	LD	BC,(IX+%6)
0B083D 09                  A  2369    	ADD	HL,BC
0B083E 23                  A  2370    	INC	HL
0B083F 7E                  A  2371    	LD	A,(HL)
0B0840 47                  A  2372    	LD	B,A
0B0841 17ED62              A  2373    	SEXT	HL
0B0844 68                  A  2374    	LD	L,B
0B0845 DD2FF6              A  2375    	LD	(IX+%FFFFFFF6),HL
0B0848 18 07               A  2376    	JR	L_52
0B084A                     A  2377    L_51:
0B084A 01000000            A  2378    	LD	BC,0
0B084E DD0FF6              A  2379    	LD	(IX+%FFFFFFF6),BC
0B0851                     A  2380    L_52:
0B0851 DD7EF6              A  2381    	LD	A,(IX+%FFFFFFF6)
0B0854 DD27F3              A  2382    	LD	HL,(IX+%FFFFFFF3)
0B0857 23                  A  2383    	INC	HL
0B0858 77                  A  2384    	LD	(HL),A
                           A  2385    ;  204	        (*new_arr)[j + 2] = arr[i];
                           A  2386    .LINE 204
                           A  2387    
0B0859 DD07FE              A  2388    	LD	BC,(IX+%FFFFFFFE)
0B085C CD 4B 2D 0B         A  2389    	CALL	__stoiu
0B0860 DD0706              A  2390    	LD	BC,(IX+%6)
0B0863 09                  A  2391    	ADD	HL,BC
0B0864 E5FDE1              A  2392    	LD	IY,HL
0B0867 DD270C              A  2393    	LD	HL,(IX+%C)
0B086A DD2FED              A  2394    	LD	(IX+%FFFFFFED),HL	; spill
0B086D DD07FC              A  2395    	LD	BC,(IX+%FFFFFFFC)
0B0870 CD 4B 2D 0B         A  2396    	CALL	__stoiu
0B0874 DD2FF0              A  2397    	LD	(IX+%FFFFFFF0),HL	; spill
0B0877 DD27ED              A  2398    	LD	HL,(IX+%FFFFFFED)	; unspill
0B087A ED07                A  2399    	LD	BC,(HL)
0B087C DD27F0              A  2400    	LD	HL,(IX+%FFFFFFF0)	; unspill
0B087F 09                  A  2401    	ADD	HL,BC
0B0880 23                  A  2402    	INC	HL
0B0881 23                  A  2403    	INC	HL
0B0882 FD7E00              A  2404    	LD	A,(IY)
0B0885 77                  A  2405    	LD	(HL),A
                           A  2406    ;  205	        
                           A  2407    ;  206	        (*new_arr)[j + 3] = 0xFF;
                           A  2408    .LINE 206
                           A  2409    
0B0886 DD310C              A  2410    	LD	IY,(IX+%C)
0B0889 DD07FC              A  2411    	LD	BC,(IX+%FFFFFFFC)
0B088C CD 4B 2D 0B         A  2412    	CALL	__stoiu
0B0890 FD0700              A  2413    	LD	BC,(IY)
0B0893 09                  A  2414    	ADD	HL,BC
0B0894 E5FDE1              A  2415    	LD	IY,HL
0B0897 ED2303              A  2416    	LEA	HL,IY+%3
0B089A 36FF                A  2417    	LD	(HL),%FF
                           A  2418    ;  207	
                           A  2419    ;  208	        j += 4;
                           A  2420    .LINE 208
                           A  2421    
0B089C DD31FC              A  2422    	LD	IY,(IX+%FFFFFFFC)
0B089F ED2304              A  2423    	LEA	HL,IY+%4
0B08A2 DD75FC              A  2424    	LD	(IX+%FFFFFFFC),L
0B08A5 DD74FD              A  2425    	LD	(IX+%FFFFFFFD),H
0B08A8 DD31FE              A  2426    	LD	IY,(IX+%FFFFFFFE)
0B08AB ED2303              A  2427    	LEA	HL,IY+%3
0B08AE DD75FE              A  2428    	LD	(IX+%FFFFFFFE),L
0B08B1 DD74FF              A  2429    	LD	(IX+%FFFFFFFF),H
                           A  2430    ;  209	    }
0B08B4                     A  2431    L_55:
                           A  2432    .LINE 209
                           A  2433    
0B08B4 DD0709              A  2434    	LD	BC,(IX+%9)
0B08B7 DD27FE              A  2435    	LD	HL,(IX+%FFFFFFFE)
0B08BA B7                  A  2436    	OR	A,A
0B08BB 40ED42              A  2437    	SBC.SIS	HL,BC
0B08BE DA AF 07 0B         A  2438    	JR	C,L_53
                           A  2439    ;  210		
                           A  2440    ;  211	}
                           A  2441    .LINE 211
                           A  2442    
0B08C2 DDF9                A  2443    	LD	SP,IX
0B08C4 DDE1                A  2444    	POP	IX
0B08C6 C9                  A  2445    	RET	
                           A  2446    
                           A  2447    
                           A  2448    ;**************************** _reorder_and_inse
                           A  2449    ;Name                         Addr/Register   S
                           A  2450    ;_malloc                             IMPORT  --
                           A  2451    ;G_0                                  IX-13    
                           A  2452    ;temp49                               IX-10    
                           A  2453    ;temp45                                IX-7    
                           A  2454    ;j                                     IX-4    
                           A  2455    ;i                                     IX-2    
                           A  2456    ;insert_value                         IX+18    
                           A  2457    ;new_length                           IX+15    
                           A  2458    ;new_arr                              IX+12    
                           A  2459    ;length                                IX+9    
                           A  2460    ;arr                                   IX+6    
                           A  2461    
                           A  2462    
                           A  2463    ; Stack Frame Size: 40 (bytes)
                           A  2464    ;       Spill Code: -3 (instruction)
                           A  2465    
                           A  2466    
                           A  2467    .ENDFUNC "reorder_and_insert",211,"_reorder_and
                           A  2468    ;  212	
                           A  2469    ;  213	//LUT borrowed/adapted from FabGL: http
                           A  2470    ;  214	// uint8_t CONVR64[4] = {0, 1, 2, 3};
                           A  2471    ;  215	// uint8_t CONVG64[4] = {0 << 2, 1 << 2
                           A  2472    ;  216	// uint8_t CONVB64[4] = {0 << 4, 1 << 4
                           A  2473    ;  217	// uint8_t CONVA64[4] = {0 << 6, 1 << 6
                           A  2474    ;  218	
                           A  2475    ;  219	void bgr888_to_rgba2222(char *input, ch
0B08C7                     A  2476    _bgr888_to_rgba2222:
                           A  2477    .DEFINE "_bgr888_to_rgba2222"
                           A  2478    
                           A  2479    .VALUE _bgr888_to_rgba2222
                           A  2480    
                           A  2481    .CLASS 2
                           A  2482    
                           A  2483    .TYPE 65
                           A  2484    
                           A  2485    .ENDEF
                           A  2486    
                           A  2487    .BEGFUNC "bgr888_to_rgba2222",219,"_bgr888_to_r
                           A  2488    
                           A  2489    .LINE 219
                           A  2490    
                           A  2491    .DEFINE "input"
                           A  2492    
                           A  2493    .CLASS 65
                           A  2494    
                           A  2495    .VALUE 6
                           A  2496    
                           A  2497    .TYPE 34
                           A  2498    
                           A  2499    .ENDEF
                           A  2500    
                           A  2501    .DEFINE "output"
                           A  2502    
                           A  2503    .CLASS 65
                           A  2504    
                           A  2505    .VALUE 9
                           A  2506    
                           A  2507    .TYPE 34
                           A  2508    
                           A  2509    .ENDEF
                           A  2510    
                           A  2511    .DEFINE "num_pixels"
                           A  2512    
                           A  2513    .CLASS 65
                           A  2514    
                           A  2515    .VALUE 12
                           A  2516    
                           A  2517    .TYPE 14
                           A  2518    
                           A  2519    .ENDEF
                           A  2520    
                           A  2521    .DEFINE "input_ptr"
                           A  2522    
                           A  2523    .CLASS 65
                           A  2524    
                           A  2525    .VALUE -3
                           A  2526    
                           A  2527    .TYPE 34
                           A  2528    
                           A  2529    .ENDEF
                           A  2530    
                           A  2531    .DEFINE "output_ptr"
                           A  2532    
                           A  2533    .CLASS 65
                           A  2534    
                           A  2535    .VALUE -6
                           A  2536    
                           A  2537    .TYPE 34
                           A  2538    
                           A  2539    .ENDEF
                           A  2540    
                           A  2541    .DEFINE "b"
                           A  2542    
                           A  2543    .CLASS 65
                           A  2544    
                           A  2545    .VALUE -7
                           A  2546    
                           A  2547    .TYPE 12
                           A  2548    
                           A  2549    .ENDEF
                           A  2550    
                           A  2551    .DEFINE "g"
                           A  2552    
                           A  2553    .CLASS 65
                           A  2554    
                           A  2555    .VALUE -8
                           A  2556    
                           A  2557    .TYPE 12
                           A  2558    
                           A  2559    .ENDEF
                           A  2560    
                           A  2561    .DEFINE "r"
                           A  2562    
                           A  2563    .CLASS 65
                           A  2564    
                           A  2565    .VALUE -9
                           A  2566    
                           A  2567    .TYPE 12
                           A  2568    
                           A  2569    .ENDEF
                           A  2570    
0B08C7 DDE5                A  2571    	PUSH	IX
0B08C9 DD210000 00         A  2572    	LD	IX,0
0B08CE DD39                A  2573    	ADD	IX,SP
0B08D0 ED22EE              A  2574    	LEA	HL,IX+%FFFFFFEE
0B08D3 F9                  A  2575    	LD	SP,HL
                           A  2576    ;  220	    char *input_ptr = input;
                           A  2577    .LINE 220
                           A  2578    
0B08D4 DD0706              A  2579    	LD	BC,(IX+%6)
0B08D7 DD0FFD              A  2580    	LD	(IX+%FFFFFFFD),BC
                           A  2581    ;  221	    char *output_ptr = output;
                           A  2582    .LINE 221
                           A  2583    
0B08DA DD0709              A  2584    	LD	BC,(IX+%9)
0B08DD DD0FFA              A  2585    	LD	(IX+%FFFFFFFA),BC
                           A  2586    ;  222	
                           A  2587    ;  223	    while (num_pixels--) {
                           A  2588    .LINE 223
                           A  2589    
0B08E0 C3 6B 09 0B         A  2590    	JR	L_62
0B08E4                     A  2591    L_63:
                           A  2592    ;  224	        uint8_t b = *input_ptr++;
                           A  2593    .LINE 224
                           A  2594    
0B08E4 DD07FD              A  2595    	LD	BC,(IX+%FFFFFFFD)
0B08E7 DD0FF4              A  2596    	LD	(IX+%FFFFFFF4),BC
0B08EA DD07FD              A  2597    	LD	BC,(IX+%FFFFFFFD)
0B08ED 03                  A  2598    	INC	BC
0B08EE DD0FFD              A  2599    	LD	(IX+%FFFFFFFD),BC
0B08F1 DD27F4              A  2600    	LD	HL,(IX+%FFFFFFF4)
0B08F4 7E                  A  2601    	LD	A,(HL)
0B08F5 DD77F9              A  2602    	LD	(IX+%FFFFFFF9),A
                           A  2603    ;  225	        uint8_t g = *input_ptr++;
                           A  2604    .LINE 225
                           A  2605    
0B08F8 DD07FD              A  2606    	LD	BC,(IX+%FFFFFFFD)
0B08FB DD0FF1              A  2607    	LD	(IX+%FFFFFFF1),BC
0B08FE DD07FD              A  2608    	LD	BC,(IX+%FFFFFFFD)
0B0901 03                  A  2609    	INC	BC
0B0902 DD0FFD              A  2610    	LD	(IX+%FFFFFFFD),BC
0B0905 DD27F1              A  2611    	LD	HL,(IX+%FFFFFFF1)
0B0908 7E                  A  2612    	LD	A,(HL)
0B0909 DD77F8              A  2613    	LD	(IX+%FFFFFFF8),A
                           A  2614    ;  226	        uint8_t r = *input_ptr++;
                           A  2615    .LINE 226
                           A  2616    
0B090C DD07FD              A  2617    	LD	BC,(IX+%FFFFFFFD)
0B090F DD0FEE              A  2618    	LD	(IX+%FFFFFFEE),BC
0B0912 DD07FD              A  2619    	LD	BC,(IX+%FFFFFFFD)
0B0915 03                  A  2620    	INC	BC
0B0916 DD0FFD              A  2621    	LD	(IX+%FFFFFFFD),BC
0B0919 DD27EE              A  2622    	LD	HL,(IX+%FFFFFFEE)
0B091C 7E                  A  2623    	LD	A,(HL)
0B091D DD77F7              A  2624    	LD	(IX+%FFFFFFF7),A
                           A  2625    ;  227	        uint8_t a = 0xFF; // Alpha chan
                           A  2626    ;  228	
                           A  2627    ;  229			// *output_ptr = 0;
                           A  2628    ;  230			// *output_ptr |= CONVR64[r >> 
                           A  2629    ;  231			// *output_ptr |= CONVG64[g >> 
                           A  2630    ;  232			// *output_ptr |= CONVB64[b >> 
                           A  2631    ;  233			// *output_ptr |= CONVA64[a >> 
                           A  2632    ;  234			// output_ptr++;
                           A  2633    ;  235			
                           A  2634    ;  236			*output_ptr = ((r >> 6) & 0x03)
                           A  2635    ;  237	              (((g >> 6) & 0x03) << 2) 
                           A  2636    ;  238	              (((b >> 6) & 0x03) << 4) 
                           A  2637    ;  239	              (((a >> 6) & 0x03) << 6);
                           A  2638    .LINE 239
                           A  2639    
0B0920 DD7EF8              A  2640    	LD	A,(IX+%FFFFFFF8)
0B0923 B7ED62              A  2641    	UEXT	HL
0B0926 6F                  A  2642    	LD	L,A
0B0927 3E06                A  2643    	LD	A,%6
0B0929 CD 7C 2B 0B         A  2644    	CALL	__ishrs_b
0B092D 7D                  A  2645    	LD	A,L
0B092E E603                A  2646    	AND	A,%3
0B0930 87                  A  2647    	ADD	A,A
0B0931 87                  A  2648    	ADD	A,A
0B0932 47                  A  2649    	LD	B,A
0B0933 DD7EF7              A  2650    	LD	A,(IX+%FFFFFFF7)
0B0936 B7ED62              A  2651    	UEXT	HL
0B0939 6F                  A  2652    	LD	L,A
0B093A 3E06                A  2653    	LD	A,%6
0B093C CD 7C 2B 0B         A  2654    	CALL	__ishrs_b
0B0940 7D                  A  2655    	LD	A,L
0B0941 E603                A  2656    	AND	A,%3
0B0943 4F                  A  2657    	LD	C,A
0B0944 78                  A  2658    	LD	A,B
0B0945 B1                  A  2659    	OR	A,C
0B0946 47                  A  2660    	LD	B,A
0B0947 DD7EF9              A  2661    	LD	A,(IX+%FFFFFFF9)
0B094A B7ED62              A  2662    	UEXT	HL
0B094D 6F                  A  2663    	LD	L,A
0B094E 3E06                A  2664    	LD	A,%6
0B0950 CD 7C 2B 0B         A  2665    	CALL	__ishrs_b
0B0954 7D                  A  2666    	LD	A,L
0B0955 E603                A  2667    	AND	A,%3
0B0957 87                  A  2668    	ADD	A,A
0B0958 87                  A  2669    	ADD	A,A
0B0959 87                  A  2670    	ADD	A,A
0B095A 87                  A  2671    	ADD	A,A
0B095B 4F                  A  2672    	LD	C,A
0B095C 78                  A  2673    	LD	A,B
0B095D B1                  A  2674    	OR	A,C
0B095E F6C0                A  2675    	OR	A,%C0
0B0960 DD27FA              A  2676    	LD	HL,(IX+%FFFFFFFA)
0B0963 77                  A  2677    	LD	(HL),A
                           A  2678    ;  240			output_ptr++;
                           A  2679    .LINE 240
                           A  2680    
0B0964 DD07FA              A  2681    	LD	BC,(IX+%FFFFFFFA)
0B0967 03                  A  2682    	INC	BC
0B0968 DD0FFA              A  2683    	LD	(IX+%FFFFFFFA),BC
                           A  2684    ;  241			
                           A  2685    ;  242	    }
0B096B                     A  2686    L_62:
                           A  2687    .LINE 242
                           A  2688    
0B096B DD270C              A  2689    	LD	HL,(IX+%C)
0B096E DD310C              A  2690    	LD	IY,(IX+%C)
0B0971 ED33FF              A  2691    	LEA	IY,IY+%FFFFFFFF
0B0974 DD3E0C              A  2692    	LD	(IX+%C),IY
0B0977 01000000            A  2693    	LD	BC,0
0B097B B7                  A  2694    	OR	A,A
0B097C ED42                A  2695    	SBC	HL,BC
0B097E C2 E4 08 0B         A  2696    	JR	NZ,L_63
                           A  2697    ;  243	}
                           A  2698    .LINE 243
                           A  2699    
0B0982 DDF9                A  2700    	LD	SP,IX
0B0984 DDE1                A  2701    	POP	IX
0B0986 C9                  A  2702    	RET	
                           A  2703    
                           A  2704    
                           A  2705    ;**************************** _bgr888_to_rgba22
                           A  2706    ;Name                         Addr/Register   S
                           A  2707    ;r                                     IX-9    
                           A  2708    ;g                                     IX-8    
                           A  2709    ;b                                     IX-7    
                           A  2710    ;output_ptr                            IX-6    
                           A  2711    ;input_ptr                             IX-3    
                           A  2712    ;num_pixels                           IX+12    
                           A  2713    ;output                                IX+9    
                           A  2714    ;input                                 IX+6    
                           A  2715    
                           A  2716    
                           A  2717    ; Stack Frame Size: 33 (bytes)
                           A  2718    ;       Spill Code: -3 (instruction)
                           A  2719    
                           A  2720    
                           A  2721    .ENDFUNC "bgr888_to_rgba2222",243,"_bgr888_to_r
                           A  2722    ;  244	
                           A  2723    ;  245	void bgra8888_to_rgba2222(char *input, 
0B0987                     A  2724    _bgra8888_to_rgba2222:
                           A  2725    .DEFINE "_bgra8888_to_rgba2222"
                           A  2726    
                           A  2727    .VALUE _bgra8888_to_rgba2222
                           A  2728    
                           A  2729    .CLASS 2
                           A  2730    
                           A  2731    .TYPE 65
                           A  2732    
                           A  2733    .ENDEF
                           A  2734    
                           A  2735    .BEGFUNC "bgra8888_to_rgba2222",245,"_bgra8888_
                           A  2736    
                           A  2737    .LINE 245
                           A  2738    
                           A  2739    .DEFINE "input"
                           A  2740    
                           A  2741    .CLASS 65
                           A  2742    
                           A  2743    .VALUE 6
                           A  2744    
                           A  2745    .TYPE 34
                           A  2746    
                           A  2747    .ENDEF
                           A  2748    
                           A  2749    .DEFINE "output"
                           A  2750    
                           A  2751    .CLASS 65
                           A  2752    
                           A  2753    .VALUE 9
                           A  2754    
                           A  2755    .TYPE 34
                           A  2756    
                           A  2757    .ENDEF
                           A  2758    
                           A  2759    .DEFINE "num_pixels"
                           A  2760    
                           A  2761    .CLASS 65
                           A  2762    
                           A  2763    .VALUE 12
                           A  2764    
                           A  2765    .TYPE 14
                           A  2766    
                           A  2767    .ENDEF
                           A  2768    
                           A  2769    .DEFINE "input_ptr"
                           A  2770    
                           A  2771    .CLASS 65
                           A  2772    
                           A  2773    .VALUE -3
                           A  2774    
                           A  2775    .TYPE 34
                           A  2776    
                           A  2777    .ENDEF
                           A  2778    
                           A  2779    .DEFINE "output_ptr"
                           A  2780    
                           A  2781    .CLASS 65
                           A  2782    
                           A  2783    .VALUE -6
                           A  2784    
                           A  2785    .TYPE 34
                           A  2786    
                           A  2787    .ENDEF
                           A  2788    
                           A  2789    .DEFINE "b"
                           A  2790    
                           A  2791    .CLASS 65
                           A  2792    
                           A  2793    .VALUE -7
                           A  2794    
                           A  2795    .TYPE 12
                           A  2796    
                           A  2797    .ENDEF
                           A  2798    
                           A  2799    .DEFINE "g"
                           A  2800    
                           A  2801    .CLASS 65
                           A  2802    
                           A  2803    .VALUE -8
                           A  2804    
                           A  2805    .TYPE 12
                           A  2806    
                           A  2807    .ENDEF
                           A  2808    
                           A  2809    .DEFINE "r"
                           A  2810    
                           A  2811    .CLASS 65
                           A  2812    
                           A  2813    .VALUE -9
                           A  2814    
                           A  2815    .TYPE 12
                           A  2816    
                           A  2817    .ENDEF
                           A  2818    
                           A  2819    .DEFINE "a"
                           A  2820    
                           A  2821    .CLASS 65
                           A  2822    
                           A  2823    .VALUE -10
                           A  2824    
                           A  2825    .TYPE 12
                           A  2826    
                           A  2827    .ENDEF
                           A  2828    
0B0987 DDE5                A  2829    	PUSH	IX
0B0989 DD210000 00         A  2830    	LD	IX,0
0B098E DD39                A  2831    	ADD	IX,SP
0B0990 ED22EA              A  2832    	LEA	HL,IX+%FFFFFFEA
0B0993 F9                  A  2833    	LD	SP,HL
                           A  2834    ;  246	    char *input_ptr = input;
                           A  2835    .LINE 246
                           A  2836    
0B0994 DD0706              A  2837    	LD	BC,(IX+%6)
0B0997 DD0FFD              A  2838    	LD	(IX+%FFFFFFFD),BC
                           A  2839    ;  247	    char *output_ptr = output;
                           A  2840    .LINE 247
                           A  2841    
0B099A DD0709              A  2842    	LD	BC,(IX+%9)
0B099D DD0FFA              A  2843    	LD	(IX+%FFFFFFFA),BC
                           A  2844    ;  248	
                           A  2845    ;  249	    while (num_pixels--) {
                           A  2846    .LINE 249
                           A  2847    
0B09A0 C3 57 0A 0B         A  2848    	JR	L_71
0B09A4                     A  2849    L_72:
                           A  2850    ;  250	        uint8_t b = *input_ptr++;
                           A  2851    .LINE 250
                           A  2852    
0B09A4 DD07FD              A  2853    	LD	BC,(IX+%FFFFFFFD)
0B09A7 DD0FF3              A  2854    	LD	(IX+%FFFFFFF3),BC
0B09AA DD07FD              A  2855    	LD	BC,(IX+%FFFFFFFD)
0B09AD 03                  A  2856    	INC	BC
0B09AE DD0FFD              A  2857    	LD	(IX+%FFFFFFFD),BC
0B09B1 DD27F3              A  2858    	LD	HL,(IX+%FFFFFFF3)
0B09B4 7E                  A  2859    	LD	A,(HL)
0B09B5 DD77F9              A  2860    	LD	(IX+%FFFFFFF9),A
                           A  2861    ;  251	        uint8_t g = *input_ptr++;
                           A  2862    .LINE 251
                           A  2863    
0B09B8 DD07FD              A  2864    	LD	BC,(IX+%FFFFFFFD)
0B09BB DD0FF0              A  2865    	LD	(IX+%FFFFFFF0),BC
0B09BE DD07FD              A  2866    	LD	BC,(IX+%FFFFFFFD)
0B09C1 03                  A  2867    	INC	BC
0B09C2 DD0FFD              A  2868    	LD	(IX+%FFFFFFFD),BC
0B09C5 DD27F0              A  2869    	LD	HL,(IX+%FFFFFFF0)
0B09C8 7E                  A  2870    	LD	A,(HL)
0B09C9 DD77F8              A  2871    	LD	(IX+%FFFFFFF8),A
                           A  2872    ;  252	        uint8_t r = *input_ptr++;
                           A  2873    .LINE 252
                           A  2874    
0B09CC DD07FD              A  2875    	LD	BC,(IX+%FFFFFFFD)
0B09CF DD0FED              A  2876    	LD	(IX+%FFFFFFED),BC
0B09D2 DD07FD              A  2877    	LD	BC,(IX+%FFFFFFFD)
0B09D5 03                  A  2878    	INC	BC
0B09D6 DD0FFD              A  2879    	LD	(IX+%FFFFFFFD),BC
0B09D9 DD27ED              A  2880    	LD	HL,(IX+%FFFFFFED)
0B09DC 7E                  A  2881    	LD	A,(HL)
0B09DD DD77F7              A  2882    	LD	(IX+%FFFFFFF7),A
                           A  2883    ;  253	        uint8_t a = *input_ptr++;;
                           A  2884    .LINE 253
                           A  2885    
0B09E0 DD07FD              A  2886    	LD	BC,(IX+%FFFFFFFD)
0B09E3 DD0FEA              A  2887    	LD	(IX+%FFFFFFEA),BC
0B09E6 DD07FD              A  2888    	LD	BC,(IX+%FFFFFFFD)
0B09E9 03                  A  2889    	INC	BC
0B09EA DD0FFD              A  2890    	LD	(IX+%FFFFFFFD),BC
0B09ED DD27EA              A  2891    	LD	HL,(IX+%FFFFFFEA)
0B09F0 7E                  A  2892    	LD	A,(HL)
0B09F1 DD77F6              A  2893    	LD	(IX+%FFFFFFF6),A
                           A  2894    ;  254	
                           A  2895    ;  255			*output_ptr = ((r >> 6) & 0x03)
                           A  2896    ;  256	              (((g >> 6) & 0x03) << 2) 
                           A  2897    ;  257	              (((b >> 6) & 0x03) << 4) 
                           A  2898    ;  258	              (((a >> 6) & 0x03) << 6);
                           A  2899    .LINE 258
                           A  2900    
0B09F4 DD7EF8              A  2901    	LD	A,(IX+%FFFFFFF8)
0B09F7 B7ED62              A  2902    	UEXT	HL
0B09FA 6F                  A  2903    	LD	L,A
0B09FB 3E06                A  2904    	LD	A,%6
0B09FD CD 7C 2B 0B         A  2905    	CALL	__ishrs_b
0B0A01 7D                  A  2906    	LD	A,L
0B0A02 E603                A  2907    	AND	A,%3
0B0A04 87                  A  2908    	ADD	A,A
0B0A05 87                  A  2909    	ADD	A,A
0B0A06 47                  A  2910    	LD	B,A
0B0A07 DD7EF7              A  2911    	LD	A,(IX+%FFFFFFF7)
0B0A0A B7ED62              A  2912    	UEXT	HL
0B0A0D 6F                  A  2913    	LD	L,A
0B0A0E 3E06                A  2914    	LD	A,%6
0B0A10 CD 7C 2B 0B         A  2915    	CALL	__ishrs_b
0B0A14 7D                  A  2916    	LD	A,L
0B0A15 E603                A  2917    	AND	A,%3
0B0A17 4F                  A  2918    	LD	C,A
0B0A18 78                  A  2919    	LD	A,B
0B0A19 B1                  A  2920    	OR	A,C
0B0A1A 47                  A  2921    	LD	B,A
0B0A1B DD7EF9              A  2922    	LD	A,(IX+%FFFFFFF9)
0B0A1E B7ED62              A  2923    	UEXT	HL
0B0A21 6F                  A  2924    	LD	L,A
0B0A22 3E06                A  2925    	LD	A,%6
0B0A24 CD 7C 2B 0B         A  2926    	CALL	__ishrs_b
0B0A28 7D                  A  2927    	LD	A,L
0B0A29 E603                A  2928    	AND	A,%3
0B0A2B 87                  A  2929    	ADD	A,A
0B0A2C 87                  A  2930    	ADD	A,A
0B0A2D 87                  A  2931    	ADD	A,A
0B0A2E 87                  A  2932    	ADD	A,A
0B0A2F 4F                  A  2933    	LD	C,A
0B0A30 78                  A  2934    	LD	A,B
0B0A31 B1                  A  2935    	OR	A,C
0B0A32 57                  A  2936    	LD	D,A
0B0A33 DD7EF6              A  2937    	LD	A,(IX+%FFFFFFF6)
0B0A36 B7ED62              A  2938    	UEXT	HL
0B0A39 6F                  A  2939    	LD	L,A
0B0A3A 3E06                A  2940    	LD	A,%6
0B0A3C CD 7C 2B 0B         A  2941    	CALL	__ishrs_b
0B0A40 7D                  A  2942    	LD	A,L
0B0A41 E603                A  2943    	AND	A,%3
0B0A43 0606                A  2944    	LD	B,%6
0B0A45 CD 78 30 0B         A  2945    	CALL	__bshl
0B0A49 47                  A  2946    	LD	B,A
0B0A4A 7A                  A  2947    	LD	A,D
0B0A4B B0                  A  2948    	OR	A,B
0B0A4C DD27FA              A  2949    	LD	HL,(IX+%FFFFFFFA)
0B0A4F 77                  A  2950    	LD	(HL),A
                           A  2951    ;  259			output_ptr++;
                           A  2952    .LINE 259
                           A  2953    
0B0A50 DD07FA              A  2954    	LD	BC,(IX+%FFFFFFFA)
0B0A53 03                  A  2955    	INC	BC
0B0A54 DD0FFA              A  2956    	LD	(IX+%FFFFFFFA),BC
                           A  2957    ;  260			
                           A  2958    ;  261	    }
0B0A57                     A  2959    L_71:
                           A  2960    .LINE 261
                           A  2961    
0B0A57 DD270C              A  2962    	LD	HL,(IX+%C)
0B0A5A DD310C              A  2963    	LD	IY,(IX+%C)
0B0A5D ED33FF              A  2964    	LEA	IY,IY+%FFFFFFFF
0B0A60 DD3E0C              A  2965    	LD	(IX+%C),IY
0B0A63 01000000            A  2966    	LD	BC,0
0B0A67 B7                  A  2967    	OR	A,A
0B0A68 ED42                A  2968    	SBC	HL,BC
0B0A6A C2 A4 09 0B         A  2969    	JR	NZ,L_72
                           A  2970    ;  262	}
                           A  2971    .LINE 262
                           A  2972    
0B0A6E DDF9                A  2973    	LD	SP,IX
0B0A70 DDE1                A  2974    	POP	IX
0B0A72 C9                  A  2975    	RET	
                           A  2976    
                           A  2977    
                           A  2978    ;**************************** _bgra8888_to_rgba
                           A  2979    ;Name                         Addr/Register   S
                           A  2980    ;a                                    IX-10    
                           A  2981    ;r                                     IX-9    
                           A  2982    ;g                                     IX-8    
                           A  2983    ;b                                     IX-7    
                           A  2984    ;output_ptr                            IX-6    
                           A  2985    ;input_ptr                             IX-3    
                           A  2986    ;num_pixels                           IX+12    
                           A  2987    ;output                                IX+9    
                           A  2988    ;input                                 IX+6    
                           A  2989    
                           A  2990    
                           A  2991    ; Stack Frame Size: 37 (bytes)
                           A  2992    ;       Spill Code: -3 (instruction)
                           A  2993    
                           A  2994    
                           A  2995    .ENDFUNC "bgra8888_to_rgba2222",262,"_bgra8888_
                           A  2996    ;  263	
                           A  2997    ;  264	bmp_info load_bmp_big(const char * file
0B0A73                     A  2998    _load_bmp_big:
                           A  2999    .DEFINE "_load_bmp_big"
                           A  3000    
                           A  3001    .VALUE _load_bmp_big
                           A  3002    
                           A  3003    .CLASS 2
                           A  3004    
                           A  3005    .TAG "NONAME6"
                           A  3006    
                           A  3007    .TYPE 72
                           A  3008    
                           A  3009    .ENDEF
                           A  3010    
                           A  3011    .BEGFUNC "load_bmp_big",264,"_load_bmp_big"
                           A  3012    
                           A  3013    .LINE 264
                           A  3014    
                           A  3015    .DEFINE "filename"
                           A  3016    
                           A  3017    .CLASS 65
                           A  3018    
                           A  3019    .VALUE 9
                           A  3020    
                           A  3021    .TYPE 194
                           A  3022    
                           A  3023    .ENDEF
                           A  3024    
                           A  3025    .DEFINE "slot"
                           A  3026    
                           A  3027    .CLASS 65
                           A  3028    
                           A  3029    .VALUE 12
                           A  3030    
                           A  3031    .TYPE 12
                           A  3032    
                           A  3033    .ENDEF
                           A  3034    
                           A  3035    .DEFINE "file"
                           A  3036    
                           A  3037    .CLASS 65
                           A  3038    
                           A  3039    .VALUE -1
                           A  3040    
                           A  3041    .TYPE 12
                           A  3042    
                           A  3043    .ENDEF
                           A  3044    
                           A  3045    .DEFINE "y"
                           A  3046    
                           A  3047    .CLASS 65
                           A  3048    
                           A  3049    .VALUE -5
                           A  3050    
                           A  3051    .TYPE 5
                           A  3052    
                           A  3053    .ENDEF
                           A  3054    
                           A  3055    .DEFINE "width"
                           A  3056    
                           A  3057    .CLASS 65
                           A  3058    
                           A  3059    .VALUE -9
                           A  3060    
                           A  3061    .TYPE 5
                           A  3062    
                           A  3063    .ENDEF
                           A  3064    
                           A  3065    .DEFINE "bit_depth"
                           A  3066    
                           A  3067    .CLASS 65
                           A  3068    
                           A  3069    .VALUE -13
                           A  3070    
                           A  3071    .TYPE 5
                           A  3072    
                           A  3073    .ENDEF
                           A  3074    
                           A  3075    .DEFINE "i"
                           A  3076    
                           A  3077    .CLASS 65
                           A  3078    
                           A  3079    .VALUE -17
                           A  3080    
                           A  3081    .TYPE 5
                           A  3082    
                           A  3083    .ENDEF
                           A  3084    
                           A  3085    .DEFINE "height"
                           A  3086    
                           A  3087    .CLASS 65
                           A  3088    
                           A  3089    .VALUE -21
                           A  3090    
                           A  3091    .TYPE 5
                           A  3092    
                           A  3093    .ENDEF
                           A  3094    
                           A  3095    .DEFINE "return_info"
                           A  3096    
                           A  3097    .CLASS 65
                           A  3098    
                           A  3099    .VALUE -26
                           A  3100    
                           A  3101    .TAG "NONAME6"
                           A  3102    
                           A  3103    .TYPE 8
                           A  3104    
                           A  3105    .ENDEF
                           A  3106    
                           A  3107    .DEFINE "row_rgba2222"
                           A  3108    
                           A  3109    .CLASS 65
                           A  3110    
                           A  3111    .VALUE -29
                           A  3112    
                           A  3113    .TYPE 34
                           A  3114    
                           A  3115    .ENDEF
                           A  3116    
                           A  3117    .DEFINE "src"
                           A  3118    
                           A  3119    .CLASS 65
                           A  3120    
                           A  3121    .VALUE -32
                           A  3122    
                           A  3123    .TYPE 34
                           A  3124    
                           A  3125    .ENDEF
                           A  3126    
                           A  3127    .DEFINE "row_padding"
                           A  3128    
                           A  3129    .CLASS 65
                           A  3130    
                           A  3131    .VALUE -36
                           A  3132    
                           A  3133    .TYPE 5
                           A  3134    
                           A  3135    .ENDEF
                           A  3136    
                           A  3137    .DEFINE "x"
                           A  3138    
                           A  3139    .CLASS 65
                           A  3140    
                           A  3141    .VALUE -40
                           A  3142    
                           A  3143    .TYPE 5
                           A  3144    
                           A  3145    .ENDEF
                           A  3146    
                           A  3147    .DEFINE "biSize"
                           A  3148    
                           A  3149    .CLASS 65
                           A  3150    
                           A  3151    .VALUE -52
                           A  3152    
                           A  3153    .TYPE 15
                           A  3154    
                           A  3155    .ENDEF
                           A  3156    
                           A  3157    .DEFINE "fo"
                           A  3158    
                           A  3159    .CLASS 65
                           A  3160    
                           A  3161    .VALUE -55
                           A  3162    
                           A  3163    .TAG "NONAME5"
                           A  3164    
                           A  3165    .TYPE 40
                           A  3166    
                           A  3167    .ENDEF
                           A  3168    
                           A  3169    .DEFINE "r"
                           A  3170    
                           A  3171    .CLASS 65
                           A  3172    
                           A  3173    .VALUE -56
                           A  3174    
                           A  3175    .TYPE 12
                           A  3176    
                           A  3177    .ENDEF
                           A  3178    
                           A  3179    .DEFINE "g"
                           A  3180    
                           A  3181    .CLASS 65
                           A  3182    
                           A  3183    .VALUE -57
                           A  3184    
                           A  3185    .TYPE 12
                           A  3186    
                           A  3187    .ENDEF
                           A  3188    
                           A  3189    .DEFINE "b"
                           A  3190    
                           A  3191    .CLASS 65
                           A  3192    
                           A  3193    .VALUE -58
                           A  3194    
                           A  3195    .TYPE 12
                           A  3196    
                           A  3197    .ENDEF
                           A  3198    
                           A  3199    .DEFINE "index"
                           A  3200    
                           A  3201    .CLASS 65
                           A  3202    
                           A  3203    .VALUE -59
                           A  3204    
                           A  3205    .TYPE 12
                           A  3206    
                           A  3207    .ENDEF
                           A  3208    
                           A  3209    .DEFINE "color_table_size"
                           A  3210    
                           A  3211    .CLASS 65
                           A  3212    
                           A  3213    .VALUE -63
                           A  3214    
                           A  3215    .TYPE 15
                           A  3216    
                           A  3217    .ENDEF
                           A  3218    
                           A  3219    .DEFINE "non_pad_row"
                           A  3220    
                           A  3221    .CLASS 65
                           A  3222    
                           A  3223    .VALUE -66
                           A  3224    
                           A  3225    .TYPE 4
                           A  3226    
                           A  3227    .ENDEF
                           A  3228    
                           A  3229    .DEFINE "image_start"
                           A  3230    
                           A  3231    .CLASS 65
                           A  3232    
                           A  3233    .VALUE -70
                           A  3234    
                           A  3235    .TYPE 5
                           A  3236    
                           A  3237    .ENDEF
                           A  3238    
                           A  3239    .DEFINE "image_buffer"
                           A  3240    
                           A  3241    .CLASS 65
                           A  3242    
                           A  3243    .VALUE -73
                           A  3244    
                           A  3245    .TYPE 34
                           A  3246    
                           A  3247    .ENDEF
                           A  3248    
                           A  3249    .DEFINE "non_pad_row"
                           A  3250    
                           A  3251    .CLASS 65
                           A  3252    
                           A  3253    .VALUE -76
                           A  3254    
                           A  3255    .TYPE 4
                           A  3256    
                           A  3257    .ENDEF
                           A  3258    
                           A  3259    .DEFINE "non_pad_row"
                           A  3260    
                           A  3261    .CLASS 65
                           A  3262    
                           A  3263    .VALUE -79
                           A  3264    
                           A  3265    .TYPE 4
                           A  3266    
                           A  3267    .ENDEF
                           A  3268    
                           A  3269    .DEFINE "greenMask"
                           A  3270    
                           A  3271    .CLASS 65
                           A  3272    
                           A  3273    .VALUE -83
                           A  3274    
                           A  3275    .DIM 4
                           A  3276    
                           A  3277    .TYPE 98
                           A  3278    
                           A  3279    .ENDEF
                           A  3280    
                           A  3281    .DEFINE "blueMask"
                           A  3282    
                           A  3283    .CLASS 65
                           A  3284    
                           A  3285    .VALUE -87
                           A  3286    
                           A  3287    .DIM 4
                           A  3288    
                           A  3289    .TYPE 98
                           A  3290    
                           A  3291    .ENDEF
                           A  3292    
                           A  3293    .DEFINE "alphaMask"
                           A  3294    
                           A  3295    .CLASS 65
                           A  3296    
                           A  3297    .VALUE -91
                           A  3298    
                           A  3299    .DIM 4
                           A  3300    
                           A  3301    .TYPE 98
                           A  3302    
                           A  3303    .ENDEF
                           A  3304    
                           A  3305    .DEFINE "redMask"
                           A  3306    
                           A  3307    .CLASS 65
                           A  3308    
                           A  3309    .VALUE -95
                           A  3310    
                           A  3311    .DIM 4
                           A  3312    
                           A  3313    .TYPE 98
                           A  3314    
                           A  3315    .ENDEF
                           A  3316    
                           A  3317    .DEFINE "header"
                           A  3318    
                           A  3319    .CLASS 65
                           A  3320    
                           A  3321    .VALUE -149
                           A  3322    
                           A  3323    .DIM 54
                           A  3324    
                           A  3325    .TYPE 98
                           A  3326    
                           A  3327    .ENDEF
                           A  3328    
                           A  3329    .DEFINE "color_table"
                           A  3330    
                           A  3331    .CLASS 65
                           A  3332    
                           A  3333    .VALUE -1173
                           A  3334    
                           A  3335    .DIM 1024
                           A  3336    
                           A  3337    .TYPE 98
                           A  3338    
                           A  3339    .ENDEF
                           A  3340    
0B0A73 DDE5                A  3341    	PUSH	IX
0B0A75 DD210000 00         A  3342    	LD	IX,0
0B0A7A DD39                A  3343    	ADD	IX,SP
0B0A7C 2158FBFF            A  3344    	LD	HL,-1192
0B0A80 39                  A  3345    	ADD	HL,SP
0B0A81 F9                  A  3346    	LD	SP,HL
                           A  3347    ;  265	
                           A  3348    ;  266	    int32_t image_start, width, height,
                           A  3349    ;  267		char *row_24bpp = NULL;
                           A  3350    ;  268	    uint8_t pixel[4], file, r, g, b, in
                           A  3351    ;  269	    char header[54], color_table[1024];
                           A  3352    ;  270	    uint32_t pixel_value, color_table_s
                           A  3353    ;  271		
                           A  3354    ;  272	    uint32_t biSize;
                           A  3355    ;  273	    FIL * fo;
                           A  3356    ;  274		bmp_info return_info;
                           A  3357    ;  275	
                           A  3358    ;  276	    char * src;
                           A  3359    ;  277	    char * image_buffer;
                           A  3360    ;  278		char * row_rgba2222;
                           A  3361    ;  279		
                           A  3362    ;  280		return_info.bmp_width = 0;
                           A  3363    .LINE 280
                           A  3364    
0B0A82 DD36E600            A  3365    	LD	(IX+%FFFFFFE6),%0
0B0A86 DD36E700            A  3366    	LD	(IX+%FFFFFFE7),%0
                           A  3367    ;  281		return_info.bmp_height = 0;
                           A  3368    .LINE 281
                           A  3369    
0B0A8A DD36E800            A  3370    	LD	(IX+%FFFFFFE8),%0
0B0A8E DD36E900            A  3371    	LD	(IX+%FFFFFFE9),%0
                           A  3372    ;  282		return_info.bmp_bitdepth = 0;	
                           A  3373    .LINE 282
                           A  3374    
0B0A92 DD36EA00            A  3375    	LD	(IX+%FFFFFFEA),%0
                           A  3376    ;  283	
                           A  3377    ;  284	    file = mos_fopen(filename, fa_read)
                           A  3378    .LINE 284
                           A  3379    
0B0A96 01010000            A  3380    	LD	BC,1
0B0A9A C5                  A  3381    	PUSH	BC
0B0A9B DD0709              A  3382    	LD	BC,(IX+%9)
0B0A9E C5                  A  3383    	PUSH	BC
0B0A9F CD DB 27 0B         A  3384    	CALL	_mos_fopen
0B0AA3 C1                  A  3385    	POP	BC
0B0AA4 C1                  A  3386    	POP	BC
0B0AA5 DD77FF              A  3387    	LD	(IX+%FFFFFFFF),A
                           A  3388    ;  285	    if (!file) {
                           A  3389    .LINE 285
                           A  3390    
0B0AA8 B7                  A  3391    	OR	A,A
0B0AA9 20 3B               A  3392    	JR	NZ,L_75
                           A  3393    ;  286	        printf("Error: could not open %
                           A  3394    .LINE 286
                           A  3395    
0B0AAB 01 51 2D 0B         A  3396    	LD	BC,___print_uputch
0B0AAF ED43 B4 30 0B       A  3397    	LD	(___print_xputch),BC
0B0AB4 01 BA 30 0B         A  3398    	LD	BC,L__45
0B0AB8 C5                  A  3399    	PUSH	BC
0B0AB9 CD B6 2B 0B         A  3400    	CALL	___print_sendstring
0B0ABD C1                  A  3401    	POP	BC
0B0ABE DD0709              A  3402    	LD	BC,(IX+%9)
0B0AC1 C5                  A  3403    	PUSH	BC
0B0AC2 CD B6 2B 0B         A  3404    	CALL	___print_sendstring
0B0AC6 C1                  A  3405    	POP	BC
0B0AC7 01 D1 30 0B         A  3406    	LD	BC,L__46
0B0ACB C5                  A  3407    	PUSH	BC
0B0ACC CD B6 2B 0B         A  3408    	CALL	___print_sendstring
0B0AD0 C1                  A  3409    	POP	BC
                           A  3410    ;  287	        return return_info;
                           A  3411    .LINE 287
                           A  3412    
0B0AD1 ED2206              A  3413    	LEA	HL,IX+%6
0B0AD4 ED17                A  3414    	LD	DE,(HL)
0B0AD6 ED22E6              A  3415    	LEA	HL,IX+%FFFFFFE6
0B0AD9 01050000            A  3416    	LD	BC,5
0B0ADD EDB0                A  3417    	LDIR	
0B0ADF DD2706              A  3418    	LD	HL,(IX+%6)
0B0AE2 C3 9D 14 0B         A  3419    	JR	L_126
                           A  3420    ;  288	    }
0B0AE6                     A  3421    L_75:
                           A  3422    .LINE 288
                           A  3423    
                           A  3424    ;  289	    fo = (FIL * ) mos_getfil(file);
                           A  3425    .LINE 289
                           A  3426    
0B0AE6 DD4EFF              A  3427    	LD	C,(IX+%FFFFFFFF)
0B0AE9 0600                A  3428    	LD	B,%0
0B0AEB C5                  A  3429    	PUSH	BC
0B0AEC CD 61 29 0B         A  3430    	CALL	_mos_getfil
0B0AF0 C1                  A  3431    	POP	BC
0B0AF1 DD2FC9              A  3432    	LD	(IX+%FFFFFFC9),HL
                           A  3433    ;  290	
                           A  3434    ;  291	    mos_fread(file, header, 54);
                           A  3435    .LINE 291
                           A  3436    
0B0AF4 01360000            A  3437    	LD	BC,54
0B0AF8 C5                  A  3438    	PUSH	BC
0B0AF9 DDE5E1              A  3439    	LD	HL,IX
0B0AFC 016BFFFF            A  3440    	LD	BC,-149
0B0B00 09                  A  3441    	ADD	HL,BC
0B0B01 E5C1                A  3442    	LD	BC,HL
0B0B03 C5                  A  3443    	PUSH	BC
0B0B04 DD4EFF              A  3444    	LD	C,(IX+%FFFFFFFF)
0B0B07 0600                A  3445    	LD	B,%0
0B0B09 C5                  A  3446    	PUSH	BC
0B0B0A CD 08 29 0B         A  3447    	CALL	_mos_fread
0B0B0E C1                  A  3448    	POP	BC
0B0B0F C1                  A  3449    	POP	BC
0B0B10 C1                  A  3450    	POP	BC
                           A  3451    ;  292	
                           A  3452    ;  293		image_start = * (uint32_t * ) & hea
                           A  3453    .LINE 293
                           A  3454    
0B0B11 DDE5FDE1            A  3455    	LD	IY,IX
0B0B15 016BFFFF            A  3456    	LD	BC,-149
0B0B19 FD09                A  3457    	ADD	IY,BC
0B0B1B ED230A              A  3458    	LEA	HL,IY+%A
0B0B1E ED07                A  3459    	LD	BC,(HL)
0B0B20 23                  A  3460    	INC	HL
0B0B21 23                  A  3461    	INC	HL
0B0B22 23                  A  3462    	INC	HL
0B0B23 7E                  A  3463    	LD	A,(HL)
0B0B24 DD0FBA              A  3464    	LD	(IX+%FFFFFFBA),BC
0B0B27 DD77BD              A  3465    	LD	(IX+%FFFFFFBD),A
                           A  3466    ;  294	    biSize = * (uint32_t * ) & header[1
                           A  3467    .LINE 294
                           A  3468    
0B0B2A DDE5FDE1            A  3469    	LD	IY,IX
0B0B2E 016BFFFF            A  3470    	LD	BC,-149
0B0B32 FD09                A  3471    	ADD	IY,BC
0B0B34 ED230E              A  3472    	LEA	HL,IY+%E
0B0B37 ED07                A  3473    	LD	BC,(HL)
0B0B39 23                  A  3474    	INC	HL
0B0B3A 23                  A  3475    	INC	HL
0B0B3B 23                  A  3476    	INC	HL
0B0B3C 7E                  A  3477    	LD	A,(HL)
0B0B3D DD0FCC              A  3478    	LD	(IX+%FFFFFFCC),BC
0B0B40 DD77CF              A  3479    	LD	(IX+%FFFFFFCF),A
                           A  3480    ;  295	    width = * (INT32 * ) & header[18];
                           A  3481    .LINE 295
                           A  3482    
0B0B43 DDE5FDE1            A  3483    	LD	IY,IX
0B0B47 016BFFFF            A  3484    	LD	BC,-149
0B0B4B FD09                A  3485    	ADD	IY,BC
0B0B4D ED2312              A  3486    	LEA	HL,IY+%12
0B0B50 ED07                A  3487    	LD	BC,(HL)
0B0B52 23                  A  3488    	INC	HL
0B0B53 23                  A  3489    	INC	HL
0B0B54 23                  A  3490    	INC	HL
0B0B55 7E                  A  3491    	LD	A,(HL)
0B0B56 DD0FF7              A  3492    	LD	(IX+%FFFFFFF7),BC
0B0B59 DD77FA              A  3493    	LD	(IX+%FFFFFFFA),A
                           A  3494    ;  296	    height = * (INT32 * ) & header[22];
                           A  3495    .LINE 296
                           A  3496    
0B0B5C ED2281              A  3497    	LEA	HL,IX+%FFFFFF81
0B0B5F ED07                A  3498    	LD	BC,(HL)
0B0B61 23                  A  3499    	INC	HL
0B0B62 23                  A  3500    	INC	HL
0B0B63 23                  A  3501    	INC	HL
0B0B64 7E                  A  3502    	LD	A,(HL)
0B0B65 DD0FEB              A  3503    	LD	(IX+%FFFFFFEB),BC
0B0B68 DD77EE              A  3504    	LD	(IX+%FFFFFFEE),A
                           A  3505    ;  297	    bit_depth = * (uint16_t * ) & heade
                           A  3506    .LINE 297
                           A  3507    
0B0B6B ED2287              A  3508    	LEA	HL,IX+%FFFFFF87
0B0B6E ED07                A  3509    	LD	BC,(HL)
0B0B70 CD 4B 2D 0B         A  3510    	CALL	__stoiu
0B0B74 E5C1                A  3511    	LD	BC,HL
0B0B76 AF                  A  3512    	XOR	A,A
0B0B77 DD0FF3              A  3513    	LD	(IX+%FFFFFFF3),BC
0B0B7A DD77F6              A  3514    	LD	(IX+%FFFFFFF6),A
                           A  3515    ;  298	    color_table_size = * (uint32_t * ) 
                           A  3516    .LINE 298
                           A  3517    
0B0B7D ED2299              A  3518    	LEA	HL,IX+%FFFFFF99
0B0B80 ED17                A  3519    	LD	DE,(HL)
0B0B82 23                  A  3520    	INC	HL
0B0B83 23                  A  3521    	INC	HL
0B0B84 23                  A  3522    	INC	HL
0B0B85 7E                  A  3523    	LD	A,(HL)
0B0B86 DD1FC1              A  3524    	LD	(IX+%FFFFFFC1),DE
0B0B89 DD77C4              A  3525    	LD	(IX+%FFFFFFC4),A
                           A  3526    ;  299		
                           A  3527    ;  300	    image_buffer = (char * ) malloc(wid
                           A  3528    .LINE 300
                           A  3529    
0B0B8C DD27F7              A  3530    	LD	HL,(IX+%FFFFFFF7)
0B0B8F DD5EFA              A  3531    	LD	E,(IX+%FFFFFFFA)
0B0B92 DD7EF6              A  3532    	LD	A,(IX+%FFFFFFF6)
0B0B95 CD EA 2F 0B         A  3533    	CALL	__lmuls
0B0B99 01080000            A  3534    	LD	BC,8
0B0B9D AF                  A  3535    	XOR	A,A
0B0B9E CD D7 2D 0B         A  3536    	CALL	__ldivs
0B0BA2 E5                  A  3537    	PUSH	HL
0B0BA3 CD 91 2A 0B         A  3538    	CALL	_malloc
0B0BA7 C1                  A  3539    	POP	BC
0B0BA8 DD2FB7              A  3540    	LD	(IX+%FFFFFFB7),HL
                           A  3541    ;  301		row_rgba2222 = (char * ) malloc(wid
                           A  3542    .LINE 301
                           A  3543    
0B0BAB DD07F7              A  3544    	LD	BC,(IX+%FFFFFFF7)
0B0BAE C5                  A  3545    	PUSH	BC
0B0BAF CD 91 2A 0B         A  3546    	CALL	_malloc
0B0BB3 C1                  A  3547    	POP	BC
0B0BB4 DD2FE3              A  3548    	LD	(IX+%FFFFFFE3),HL
                           A  3549    ;  302	
                           A  3550    ;  303	    if (color_table_size == 0 && bit_de
                           A  3551    .LINE 303
                           A  3552    
0B0BB7 DD27C1              A  3553    	LD	HL,(IX+%FFFFFFC1)
0B0BBA DD5EC4              A  3554    	LD	E,(IX+%FFFFFFC4)
0B0BBD 01000000            A  3555    	LD	BC,0
0B0BC1 AF                  A  3556    	XOR	A,A
0B0BC2 CD 70 2F 0B         A  3557    	CALL	__lcmpu
0B0BC6 20 1C               A  3558    	JR	NZ,L_79
0B0BC8 DD27F3              A  3559    	LD	HL,(IX+%FFFFFFF3)
0B0BCB DD5EF6              A  3560    	LD	E,(IX+%FFFFFFF6)
0B0BCE 01080000            A  3561    	LD	BC,8
0B0BD2 AF                  A  3562    	XOR	A,A
0B0BD3 CD 70 2F 0B         A  3563    	CALL	__lcmps
0B0BD7 20 0B               A  3564    	JR	NZ,L_79
                           A  3565    ;  304	        color_table_size = 256;
                           A  3566    .LINE 304
                           A  3567    
0B0BD9 01000100            A  3568    	LD	BC,256
0B0BDD AF                  A  3569    	XOR	A,A
0B0BDE DD0FC1              A  3570    	LD	(IX+%FFFFFFC1),BC
0B0BE1 DD77C4              A  3571    	LD	(IX+%FFFFFFC4),A
                           A  3572    ;  305	    }
0B0BE4                     A  3573    L_79:
                           A  3574    .LINE 305
                           A  3575    
                           A  3576    ;  306	
                           A  3577    ;  307	    if (color_table_size > 0) mos_fread
                           A  3578    .LINE 307
                           A  3579    
0B0BE4 B7                  A  3580    	OR	A,A
0B0BE5 ED62                A  3581    	SBC	HL,HL
0B0BE7 1E00                A  3582    	LD	E,%0
0B0BE9 DD07C1              A  3583    	LD	BC,(IX+%FFFFFFC1)
0B0BEC DD7EC4              A  3584    	LD	A,(IX+%FFFFFFC4)
0B0BEF CD 70 2F 0B         A  3585    	CALL	__lcmpu
0B0BF3 30 1E               A  3586    	JR	NC,L_96
0B0BF5 DD27C1              A  3587    	LD	HL,(IX+%FFFFFFC1)
0B0BF8 29                  A  3588    	ADD	HL,HL
0B0BF9 29                  A  3589    	ADD	HL,HL
0B0BFA E5                  A  3590    	PUSH	HL
0B0BFB DDE5E1              A  3591    	LD	HL,IX
0B0BFE 016BFBFF            A  3592    	LD	BC,-1173
0B0C02 09                  A  3593    	ADD	HL,BC
0B0C03 E5C1                A  3594    	LD	BC,HL
0B0C05 C5                  A  3595    	PUSH	BC
0B0C06 DD4EFF              A  3596    	LD	C,(IX+%FFFFFFFF)
0B0C09 0600                A  3597    	LD	B,%0
0B0C0B C5                  A  3598    	PUSH	BC
0B0C0C CD 08 29 0B         A  3599    	CALL	_mos_fread
0B0C10 C1                  A  3600    	POP	BC
0B0C11 C1                  A  3601    	POP	BC
0B0C12 C1                  A  3602    	POP	BC
0B0C13                     A  3603    L_96:
                           A  3604    ;  308	
                           A  3605    ;  309	    // else if (biSize > 40) { //If for
                           A  3606    ;  310	
                           A  3607    ;  311	        // i = biSize - 40;
                           A  3608    ;  312	        // while (i--> 0) {
                           A  3609    ;  313	            // mos_fgetc(file);
                           A  3610    ;  314	        // }
                           A  3611    ;  315	
                           A  3612    ;  316	    // }
                           A  3613    ;  317		
                           A  3614    ;  318		if (biSize > 40) {
                           A  3615    .LINE 318
                           A  3616    
0B0C13 21280000            A  3617    	LD	HL,40
0B0C17 1E00                A  3618    	LD	E,%0
0B0C19 DD07CC              A  3619    	LD	BC,(IX+%FFFFFFCC)
0B0C1C DD7ECF              A  3620    	LD	A,(IX+%FFFFFFCF)
0B0C1F CD 70 2F 0B         A  3621    	CALL	__lcmpu
0B0C23 D2 D9 0D 0B         A  3622    	JR	NC,L_100
                           A  3623    ;  319			// If BITMAPV4HEADER or above, 
                           A  3624    ;  320			if (biSize >= 108) {
                           A  3625    .LINE 320
                           A  3626    
0B0C27 DD27CC              A  3627    	LD	HL,(IX+%FFFFFFCC)
0B0C2A DD5ECF              A  3628    	LD	E,(IX+%FFFFFFCF)
0B0C2D 016C0000            A  3629    	LD	BC,108
0B0C31 AF                  A  3630    	XOR	A,A
0B0C32 CD 70 2F 0B         A  3631    	CALL	__lcmpu
0B0C36 DA 83 0D 0B         A  3632    	JR	C,L_94
                           A  3633    ;  321				char redMask[4], greenMask[
                           A  3634    ;  322				mos_fread(file, redMask, 4)
                           A  3635    .LINE 322
                           A  3636    
0B0C3A 01040000            A  3637    	LD	BC,4
0B0C3E C5                  A  3638    	PUSH	BC
0B0C3F ED65A1              A  3639    	PEA	IX+%FFFFFFA1
0B0C42 DD4EFF              A  3640    	LD	C,(IX+%FFFFFFFF)
0B0C45 0600                A  3641    	LD	B,%0
0B0C47 C5                  A  3642    	PUSH	BC
0B0C48 CD 08 29 0B         A  3643    	CALL	_mos_fread
0B0C4C C1                  A  3644    	POP	BC
0B0C4D C1                  A  3645    	POP	BC
0B0C4E C1                  A  3646    	POP	BC
                           A  3647    ;  323				mos_fread(file, greenMask, 
                           A  3648    .LINE 323
                           A  3649    
0B0C4F 01040000            A  3650    	LD	BC,4
0B0C53 C5                  A  3651    	PUSH	BC
0B0C54 ED65AD              A  3652    	PEA	IX+%FFFFFFAD
0B0C57 DD4EFF              A  3653    	LD	C,(IX+%FFFFFFFF)
0B0C5A 0600                A  3654    	LD	B,%0
0B0C5C C5                  A  3655    	PUSH	BC
0B0C5D CD 08 29 0B         A  3656    	CALL	_mos_fread
0B0C61 C1                  A  3657    	POP	BC
0B0C62 C1                  A  3658    	POP	BC
0B0C63 C1                  A  3659    	POP	BC
                           A  3660    ;  324				mos_fread(file, blueMask, 4
                           A  3661    .LINE 324
                           A  3662    
0B0C64 01040000            A  3663    	LD	BC,4
0B0C68 C5                  A  3664    	PUSH	BC
0B0C69 ED65A9              A  3665    	PEA	IX+%FFFFFFA9
0B0C6C DD4EFF              A  3666    	LD	C,(IX+%FFFFFFFF)
0B0C6F 0600                A  3667    	LD	B,%0
0B0C71 C5                  A  3668    	PUSH	BC
0B0C72 CD 08 29 0B         A  3669    	CALL	_mos_fread
0B0C76 C1                  A  3670    	POP	BC
0B0C77 C1                  A  3671    	POP	BC
0B0C78 C1                  A  3672    	POP	BC
                           A  3673    ;  325				mos_fread(file, alphaMask, 
                           A  3674    .LINE 325
                           A  3675    
0B0C79 01040000            A  3676    	LD	BC,4
0B0C7D C5                  A  3677    	PUSH	BC
0B0C7E ED65A5              A  3678    	PEA	IX+%FFFFFFA5
0B0C81 DD4EFF              A  3679    	LD	C,(IX+%FFFFFFFF)
0B0C84 0600                A  3680    	LD	B,%0
0B0C86 C5                  A  3681    	PUSH	BC
0B0C87 CD 08 29 0B         A  3682    	CALL	_mos_fread
0B0C8B C1                  A  3683    	POP	BC
0B0C8C C1                  A  3684    	POP	BC
0B0C8D C1                  A  3685    	POP	BC
                           A  3686    ;  326					
                           A  3687    ;  327				if (!(memcmp(redMask, "\x00
                           A  3688    .LINE 327
                           A  3689    
0B0C8E 01040000            A  3690    	LD	BC,4
0B0C92 C5                  A  3691    	PUSH	BC
0B0C93 01 D5 30 0B         A  3692    	LD	BC,L__52
0B0C97 C5                  A  3693    	PUSH	BC
0B0C98 ED65A1              A  3694    	PEA	IX+%FFFFFFA1
0B0C9B CD 92 2E 0B         A  3695    	CALL	_memcmp
0B0C9F C1                  A  3696    	POP	BC
0B0CA0 C1                  A  3697    	POP	BC
0B0CA1 C1                  A  3698    	POP	BC
0B0CA2 01000000            A  3699    	LD	BC,0
0B0CA6 B7                  A  3700    	OR	A,A
0B0CA7 ED42                A  3701    	SBC	HL,BC
0B0CA9 20 57               A  3702    	JR	NZ,L_83
                           A  3703    ;  328					  memcmp(greenMask, "\x
                           A  3704    .LINE 328
                           A  3705    
0B0CAB 01040000            A  3706    	LD	BC,4
0B0CAF C5                  A  3707    	PUSH	BC
0B0CB0 01 DA 30 0B         A  3708    	LD	BC,L__54
0B0CB4 C5                  A  3709    	PUSH	BC
0B0CB5 ED65AD              A  3710    	PEA	IX+%FFFFFFAD
0B0CB8 CD 92 2E 0B         A  3711    	CALL	_memcmp
0B0CBC C1                  A  3712    	POP	BC
0B0CBD C1                  A  3713    	POP	BC
0B0CBE C1                  A  3714    	POP	BC
0B0CBF 01000000            A  3715    	LD	BC,0
0B0CC3 B7                  A  3716    	OR	A,A
0B0CC4 ED42                A  3717    	SBC	HL,BC
0B0CC6 20 3A               A  3718    	JR	NZ,L_83
                           A  3719    ;  329					  memcmp(blueMask, "\xF
                           A  3720    .LINE 329
                           A  3721    
0B0CC8 01040000            A  3722    	LD	BC,4
0B0CCC C5                  A  3723    	PUSH	BC
0B0CCD 01 DF 30 0B         A  3724    	LD	BC,L__56
0B0CD1 C5                  A  3725    	PUSH	BC
0B0CD2 ED65A9              A  3726    	PEA	IX+%FFFFFFA9
0B0CD5 CD 92 2E 0B         A  3727    	CALL	_memcmp
0B0CD9 C1                  A  3728    	POP	BC
0B0CDA C1                  A  3729    	POP	BC
0B0CDB C1                  A  3730    	POP	BC
0B0CDC 01000000            A  3731    	LD	BC,0
0B0CE0 B7                  A  3732    	OR	A,A
0B0CE1 ED42                A  3733    	SBC	HL,BC
0B0CE3 20 1D               A  3734    	JR	NZ,L_83
                           A  3735    ;  330					  memcmp(alphaMask, "\x
                           A  3736    .LINE 330
                           A  3737    
0B0CE5 01040000            A  3738    	LD	BC,4
0B0CE9 C5                  A  3739    	PUSH	BC
0B0CEA 01 E4 30 0B         A  3740    	LD	BC,L__58
0B0CEE C5                  A  3741    	PUSH	BC
0B0CEF ED65A5              A  3742    	PEA	IX+%FFFFFFA5
0B0CF2 CD 92 2E 0B         A  3743    	CALL	_memcmp
0B0CF6 C1                  A  3744    	POP	BC
0B0CF7 C1                  A  3745    	POP	BC
0B0CF8 C1                  A  3746    	POP	BC
0B0CF9 01000000            A  3747    	LD	BC,0
0B0CFD B7                  A  3748    	OR	A,A
0B0CFE ED42                A  3749    	SBC	HL,BC
0B0D00 28 33               A  3750    	JR	Z,L_88
0B0D02                     A  3751    L_83:
                           A  3752    ;  331					printf("Error: Pixel fo
                           A  3753    .LINE 331
                           A  3754    
0B0D02 01 51 2D 0B         A  3755    	LD	BC,___print_uputch
0B0D06 ED43 B4 30 0B       A  3756    	LD	(___print_xputch),BC
0B0D0B 01 E9 30 0B         A  3757    	LD	BC,L__60
0B0D0F C5                  A  3758    	PUSH	BC
0B0D10 CD B6 2B 0B         A  3759    	CALL	___print_sendstring
0B0D14 C1                  A  3760    	POP	BC
                           A  3761    ;  332					mos_fclose(file);
                           A  3762    .LINE 332
                           A  3763    
0B0D15 DD4EFF              A  3764    	LD	C,(IX+%FFFFFFFF)
0B0D18 0600                A  3765    	LD	B,%0
0B0D1A C5                  A  3766    	PUSH	BC
0B0D1B CD F3 27 0B         A  3767    	CALL	_mos_fclose
0B0D1F C1                  A  3768    	POP	BC
                           A  3769    ;  333					return return_info;
                           A  3770    .LINE 333
                           A  3771    
0B0D20 ED2206              A  3772    	LEA	HL,IX+%6
0B0D23 ED17                A  3773    	LD	DE,(HL)
0B0D25 ED22E6              A  3774    	LEA	HL,IX+%FFFFFFE6
0B0D28 01050000            A  3775    	LD	BC,5
0B0D2C EDB0                A  3776    	LDIR	
0B0D2E DD2706              A  3777    	LD	HL,(IX+%6)
0B0D31 C3 9D 14 0B         A  3778    	JR	L_126
                           A  3779    ;  334				}
0B0D35                     A  3780    L_88:
                           A  3781    .LINE 334
                           A  3782    
                           A  3783    ;  335					
                           A  3784    ;  336					// Skip remaining extra
                           A  3785    ;  337					for (i = biSize - 108; 
                           A  3786    .LINE 337
                           A  3787    
0B0D35 DD27CC              A  3788    	LD	HL,(IX+%FFFFFFCC)
0B0D38 DD5ECF              A  3789    	LD	E,(IX+%FFFFFFCF)
0B0D3B 0194FFFF            A  3790    	LD	BC,16777108
0B0D3F 3EFF                A  3791    	LD	A,%FF
0B0D41 CD 86 29 0B         A  3792    	CALL	__ladd
0B0D45 DD2FEF              A  3793    	LD	(IX+%FFFFFFEF),HL
0B0D48 DD73F2              A  3794    	LD	(IX+%FFFFFFF2),E
0B0D4B 18 21               A  3795    	JR	L_87
0B0D4D                     A  3796    L_85:
                           A  3797    ;  338						mos_fgetc(file);
                           A  3798    .LINE 338
                           A  3799    
0B0D4D DD4EFF              A  3800    	LD	C,(IX+%FFFFFFFF)
0B0D50 0600                A  3801    	LD	B,%0
0B0D52 C5                  A  3802    	PUSH	BC
0B0D53 CD 08 28 0B         A  3803    	CALL	_mos_fgetc
0B0D57 C1                  A  3804    	POP	BC
0B0D58 DD27EF              A  3805    	LD	HL,(IX+%FFFFFFEF)
0B0D5B DD5EF2              A  3806    	LD	E,(IX+%FFFFFFF2)
0B0D5E 01FFFFFF            A  3807    	LD	BC,16777215
0B0D62 3EFF                A  3808    	LD	A,%FF
0B0D64 CD 86 29 0B         A  3809    	CALL	__ladd
0B0D68 DD2FEF              A  3810    	LD	(IX+%FFFFFFEF),HL
0B0D6B DD73F2              A  3811    	LD	(IX+%FFFFFFF2),E
                           A  3812    ;  339					}
0B0D6E                     A  3813    L_87:
                           A  3814    .LINE 339
                           A  3815    
0B0D6E B7                  A  3816    	OR	A,A
0B0D6F ED62                A  3817    	SBC	HL,HL
0B0D71 1E00                A  3818    	LD	E,%0
0B0D73 DD07EF              A  3819    	LD	BC,(IX+%FFFFFFEF)
0B0D76 DD7EF2              A  3820    	LD	A,(IX+%FFFFFFF2)
0B0D79 CD 70 2F 0B         A  3821    	CALL	__lcmps
0B0D7D FA 4D 0D 0B         A  3822    	JP	M,L_85
0B0D81 18 56               A  3823    	JR	L_100
                           A  3824    ;  340			} else {
0B0D83                     A  3825    L_94:
                           A  3826    .LINE 340
                           A  3827    
                           A  3828    ;  341				// Skip all extra header by
                           A  3829    ;  342				for (i = biSize - 40; i > 0
                           A  3830    .LINE 342
                           A  3831    
0B0D83 DD27CC              A  3832    	LD	HL,(IX+%FFFFFFCC)
0B0D86 DD5ECF              A  3833    	LD	E,(IX+%FFFFFFCF)
0B0D89 01D8FFFF            A  3834    	LD	BC,16777176
0B0D8D 3EFF                A  3835    	LD	A,%FF
0B0D8F CD 86 29 0B         A  3836    	CALL	__ladd
0B0D93 DD2FEF              A  3837    	LD	(IX+%FFFFFFEF),HL
0B0D96 DD73F2              A  3838    	LD	(IX+%FFFFFFF2),E
0B0D99 18 21               A  3839    	JR	L_92
0B0D9B                     A  3840    L_90:
                           A  3841    ;  343					mos_fgetc(file);
                           A  3842    .LINE 343
                           A  3843    
0B0D9B DD4EFF              A  3844    	LD	C,(IX+%FFFFFFFF)
0B0D9E 0600                A  3845    	LD	B,%0
0B0DA0 C5                  A  3846    	PUSH	BC
0B0DA1 CD 08 28 0B         A  3847    	CALL	_mos_fgetc
0B0DA5 C1                  A  3848    	POP	BC
0B0DA6 DD27EF              A  3849    	LD	HL,(IX+%FFFFFFEF)
0B0DA9 DD5EF2              A  3850    	LD	E,(IX+%FFFFFFF2)
0B0DAC 01FFFFFF            A  3851    	LD	BC,16777215
0B0DB0 3EFF                A  3852    	LD	A,%FF
0B0DB2 CD 86 29 0B         A  3853    	CALL	__ladd
0B0DB6 DD2FEF              A  3854    	LD	(IX+%FFFFFFEF),HL
0B0DB9 DD73F2              A  3855    	LD	(IX+%FFFFFFF2),E
                           A  3856    ;  344				}
0B0DBC                     A  3857    L_92:
                           A  3858    .LINE 344
                           A  3859    
0B0DBC B7                  A  3860    	OR	A,A
0B0DBD ED62                A  3861    	SBC	HL,HL
0B0DBF 1E00                A  3862    	LD	E,%0
0B0DC1 DD07EF              A  3863    	LD	BC,(IX+%FFFFFFEF)
0B0DC4 DD7EF2              A  3864    	LD	A,(IX+%FFFFFFF2)
0B0DC7 CD 70 2F 0B         A  3865    	CALL	__lcmps
0B0DCB FA D5 0D 0B         A  3866    	JP	M,L__74
0B0DCF EA 9B 0D 0B         A  3867    	JP	PE,L_90
0B0DD3 18 04               A  3868    	JR	L__75
0B0DD5                     A  3869    L__74:
0B0DD5 E2 9B 0D 0B         A  3870    	JP	PO,L_90
0B0DD9                     A  3871    L__75:
                           A  3872    ;  345			}
                           A  3873    ;  346		}
0B0DD9                     A  3874    L_100:
                           A  3875    .LINE 346
                           A  3876    
                           A  3877    ;  347	
                           A  3878    ;  348	    if ((bit_depth != 32) && (bit_depth
                           A  3879    .LINE 348
                           A  3880    
0B0DD9 DD27F3              A  3881    	LD	HL,(IX+%FFFFFFF3)
0B0DDC DD5EF6              A  3882    	LD	E,(IX+%FFFFFFF6)
0B0DDF 01200000            A  3883    	LD	BC,32
0B0DE3 AF                  A  3884    	XOR	A,A
0B0DE4 CD 70 2F 0B         A  3885    	CALL	__lcmps
0B0DE8 28 55               A  3886    	JR	Z,L_101
0B0DEA DD27F3              A  3887    	LD	HL,(IX+%FFFFFFF3)
0B0DED DD5EF6              A  3888    	LD	E,(IX+%FFFFFFF6)
0B0DF0 01180000            A  3889    	LD	BC,24
0B0DF4 AF                  A  3890    	XOR	A,A
0B0DF5 CD 70 2F 0B         A  3891    	CALL	__lcmps
0B0DF9 28 44               A  3892    	JR	Z,L_101
0B0DFB DD27F3              A  3893    	LD	HL,(IX+%FFFFFFF3)
0B0DFE DD5EF6              A  3894    	LD	E,(IX+%FFFFFFF6)
0B0E01 01080000            A  3895    	LD	BC,8
0B0E05 AF                  A  3896    	XOR	A,A
0B0E06 CD 70 2F 0B         A  3897    	CALL	__lcmps
0B0E0A 28 33               A  3898    	JR	Z,L_101
                           A  3899    ;  349	        printf("Error: unsupported bit 
                           A  3900    .LINE 349
                           A  3901    
0B0E0C 01 51 2D 0B         A  3902    	LD	BC,___print_uputch
0B0E10 ED43 B4 30 0B       A  3903    	LD	(___print_xputch),BC
0B0E15 01 1D 31 0B         A  3904    	LD	BC,L__66
0B0E19 C5                  A  3905    	PUSH	BC
0B0E1A CD B6 2B 0B         A  3906    	CALL	___print_sendstring
0B0E1E C1                  A  3907    	POP	BC
                           A  3908    ;  350	        mos_fclose(file);
                           A  3909    .LINE 350
                           A  3910    
0B0E1F DD4EFF              A  3911    	LD	C,(IX+%FFFFFFFF)
0B0E22 0600                A  3912    	LD	B,%0
0B0E24 C5                  A  3913    	PUSH	BC
0B0E25 CD F3 27 0B         A  3914    	CALL	_mos_fclose
0B0E29 C1                  A  3915    	POP	BC
                           A  3916    ;  351	        return return_info;
                           A  3917    .LINE 351
                           A  3918    
0B0E2A ED2206              A  3919    	LEA	HL,IX+%6
0B0E2D ED17                A  3920    	LD	DE,(HL)
0B0E2F ED22E6              A  3921    	LEA	HL,IX+%FFFFFFE6
0B0E32 01050000            A  3922    	LD	BC,5
0B0E36 EDB0                A  3923    	LDIR	
0B0E38 DD2706              A  3924    	LD	HL,(IX+%6)
0B0E3B C3 9D 14 0B         A  3925    	JR	L_126
                           A  3926    ;  352	    }
0B0E3F                     A  3927    L_101:
                           A  3928    .LINE 352
                           A  3929    
                           A  3930    ;  353	
                           A  3931    ;  354	    row_padding = (4 - (width * (bit_de
                           A  3932    .LINE 354
                           A  3933    
0B0E3F DD27F3              A  3934    	LD	HL,(IX+%FFFFFFF3)
0B0E42 DD5EF6              A  3935    	LD	E,(IX+%FFFFFFF6)
0B0E45 01080000            A  3936    	LD	BC,8
0B0E49 AF                  A  3937    	XOR	A,A
0B0E4A CD D7 2D 0B         A  3938    	CALL	__ldivs
0B0E4E DD07F7              A  3939    	LD	BC,(IX+%FFFFFFF7)
0B0E51 DD7EFA              A  3940    	LD	A,(IX+%FFFFFFFA)
0B0E54 CD EA 2F 0B         A  3941    	CALL	__lmuls
0B0E58 01040000            A  3942    	LD	BC,4
0B0E5C AF                  A  3943    	XOR	A,A
0B0E5D CD 8F 2F 0B         A  3944    	CALL	__lrems
0B0E61 7B                  A  3945    	LD	A,E
0B0E62 E5C1                A  3946    	LD	BC,HL
0B0E64 21040000            A  3947    	LD	HL,4
0B0E68 1E00                A  3948    	LD	E,%0
0B0E6A CD 86 2E 0B         A  3949    	CALL	__lsub
0B0E6E 01040000            A  3950    	LD	BC,4
0B0E72 AF                  A  3951    	XOR	A,A
0B0E73 CD 8F 2F 0B         A  3952    	CALL	__lrems
0B0E77 DD2FDC              A  3953    	LD	(IX+%FFFFFFDC),HL
0B0E7A DD73DF              A  3954    	LD	(IX+%FFFFFFDF),E
                           A  3955    ;  355		
                           A  3956    ;  356		clear_buffer(slot);
                           A  3957    .LINE 356
                           A  3958    
0B0E7D DD4E0C              A  3959    	LD	C,(IX+%C)
0B0E80 0600                A  3960    	LD	B,%0
0B0E82 C5                  A  3961    	PUSH	BC
0B0E83 CD 67 05 0B         A  3962    	CALL	_clear_buffer
0B0E87 C1                  A  3963    	POP	BC
                           A  3964    ;  357		
                           A  3965    ;  358	    if (bit_depth == 8) {
                           A  3966    .LINE 358
                           A  3967    
0B0E88 DD27F3              A  3968    	LD	HL,(IX+%FFFFFFF3)
0B0E8B DD5EF6              A  3969    	LD	E,(IX+%FFFFFFF6)
0B0E8E 01080000            A  3970    	LD	BC,8
0B0E92 AF                  A  3971    	XOR	A,A
0B0E93 CD 70 2F 0B         A  3972    	CALL	__lcmps
0B0E97 C2 D9 10 0B         A  3973    	JR	NZ,L_124
                           A  3974    ;  359			uint8_t a = 0xFF;
                           A  3975    ;  360			int non_pad_row = width * bit_d
                           A  3976    .LINE 360
                           A  3977    
0B0E9B DD27F7              A  3978    	LD	HL,(IX+%FFFFFFF7)
0B0E9E DD5EFA              A  3979    	LD	E,(IX+%FFFFFFFA)
0B0EA1 DD07F3              A  3980    	LD	BC,(IX+%FFFFFFF3)
0B0EA4 DD7EF6              A  3981    	LD	A,(IX+%FFFFFFF6)
0B0EA7 CD EA 2F 0B         A  3982    	CALL	__lmuls
0B0EAB 01080000            A  3983    	LD	BC,8
0B0EAF AF                  A  3984    	XOR	A,A
0B0EB0 CD D7 2D 0B         A  3985    	CALL	__ldivs
0B0EB4 DD2FBE              A  3986    	LD	(IX+%FFFFFFBE),HL
                           A  3987    ;  361			mos_flseek(file, image_start + 
                           A  3988    .LINE 361
                           A  3989    
0B0EB7 E5C1                A  3990    	LD	BC,HL
0B0EB9 CD 69 2F 0B         A  3991    	CALL	__itol
0B0EBD DD27DC              A  3992    	LD	HL,(IX+%FFFFFFDC)
0B0EC0 DD5EDF              A  3993    	LD	E,(IX+%FFFFFFDF)
0B0EC3 CD 86 29 0B         A  3994    	CALL	__ladd
0B0EC7 7B                  A  3995    	LD	A,E
0B0EC8 FD215BFB FF         A  3996    	LD	IY,-1189	; spill
0B0ECD DDE5C1              A  3997    	LD	BC,IX	; spill
0B0ED0 FD09                A  3998    	ADD	IY,BC
0B0ED2 FD7700              A  3999    	LD	(IY),A
0B0ED5 0158FBFF            A  4000    	LD	BC,-1192	; spill
0B0ED9 CD A1 2B 0B         A  4001    	CALL	__istix
0B0EDD DD27EB              A  4002    	LD	HL,(IX+%FFFFFFEB)
0B0EE0 DD5EEE              A  4003    	LD	E,(IX+%FFFFFFEE)
0B0EE3 01010000            A  4004    	LD	BC,1
0B0EE7 AF                  A  4005    	XOR	A,A
0B0EE8 CD 86 2E 0B         A  4006    	CALL	__lsub
0B0EEC 7B                  A  4007    	LD	A,E
0B0EED E5C1                A  4008    	LD	BC,HL
0B0EEF C5                  A  4009    	PUSH	BC
0B0EF0 FD2167FB FF         A  4010    	LD	IY,-1177	; spill
0B0EF5 DDE5C1              A  4011    	LD	BC,IX	; spill
0B0EF8 FD09                A  4012    	ADD	IY,BC
0B0EFA FD7700              A  4013    	LD	(IY),A
0B0EFD FD215BFB FF         A  4014    	LD	IY,-1189	; unspill
0B0F02 DDE5C1              A  4015    	LD	BC,IX	; unspill
0B0F05 FD09                A  4016    	ADD	IY,BC
0B0F07 FD7E00              A  4017    	LD	A,(IY)
0B0F0A C1                  A  4018    	POP	BC
0B0F0B 5F                  A  4019    	LD	E,A
0B0F0C C5                  A  4020    	PUSH	BC
0B0F0D FD2167FB FF         A  4021    	LD	IY,-1177	; unspill
0B0F12 DDE5C1              A  4022    	LD	BC,IX	; unspill
0B0F15 FD09                A  4023    	ADD	IY,BC
0B0F17 FD7E00              A  4024    	LD	A,(IY)
0B0F1A C1                  A  4025    	POP	BC
0B0F1B C5E1                A  4026    	LD	HL,BC
0B0F1D 0163FBFF            A  4027    	LD	BC,-1181	; spill
0B0F21 CD A1 2B 0B         A  4028    	CALL	__istix
0B0F25 0158FBFF            A  4029    	LD	BC,-1192	; unspill
0B0F29 CD 57 30 0B         A  4030    	CALL	__ildix
0B0F2D E5C1                A  4031    	LD	BC,HL
0B0F2F C5E1                A  4032    	LD	HL,BC
0B0F31 0163FBFF            A  4033    	LD	BC,-1181	; unspill
0B0F35 E5                  A  4034    	PUSH	HL
0B0F36 CD 57 30 0B         A  4035    	CALL	__ildix
0B0F3A E5C1                A  4036    	LD	BC,HL
0B0F3C E1                  A  4037    	POP	HL
0B0F3D CD EA 2F 0B         A  4038    	CALL	__lmulu
0B0F41 DD07BA              A  4039    	LD	BC,(IX+%FFFFFFBA)
0B0F44 DD7EBD              A  4040    	LD	A,(IX+%FFFFFFBD)
0B0F47 CD 86 29 0B         A  4041    	CALL	__ladd
0B0F4B 4B                  A  4042    	LD	C,E
0B0F4C 0600                A  4043    	LD	B,%0
0B0F4E C5                  A  4044    	PUSH	BC
0B0F4F E5                  A  4045    	PUSH	HL
0B0F50 DD4EFF              A  4046    	LD	C,(IX+%FFFFFFFF)
0B0F53 C5                  A  4047    	PUSH	BC
0B0F54 CD 42 29 0B         A  4048    	CALL	_mos_flseek
0B0F58 C1                  A  4049    	POP	BC
0B0F59 C1                  A  4050    	POP	BC
0B0F5A C1                  A  4051    	POP	BC
                           A  4052    ;  362			
                           A  4053    ;  363	        for (y = height - 1; y >= 0; y-
                           A  4054    .LINE 363
                           A  4055    
0B0F5B DD27EB              A  4056    	LD	HL,(IX+%FFFFFFEB)
0B0F5E DD5EEE              A  4057    	LD	E,(IX+%FFFFFFEE)
0B0F61 01FFFFFF            A  4058    	LD	BC,16777215
0B0F65 3EFF                A  4059    	LD	A,%FF
0B0F67 CD 86 29 0B         A  4060    	CALL	__ladd
0B0F6B DD2FFB              A  4061    	LD	(IX+%FFFFFFFB),HL
0B0F6E DD73FE              A  4062    	LD	(IX+%FFFFFFFE),E
0B0F71 C3 B8 10 0B         A  4063    	JR	L_110
0B0F75                     A  4064    L_108:
                           A  4065    ;  364	            for (x = 0; x < width; x++)
                           A  4066    .LINE 364
                           A  4067    
0B0F75 01000000            A  4068    	LD	BC,0
0B0F79 AF                  A  4069    	XOR	A,A
0B0F7A DD0FD8              A  4070    	LD	(IX+%FFFFFFD8),BC
0B0F7D DD77DB              A  4071    	LD	(IX+%FFFFFFDB),A
0B0F80 C3 38 10 0B         A  4072    	JR	L_106
0B0F84                     A  4073    L_104:
                           A  4074    ;  365	
                           A  4075    ;  366	                index = (char) mos_fget
                           A  4076    .LINE 366
                           A  4077    
0B0F84 DD4EFF              A  4078    	LD	C,(IX+%FFFFFFFF)
0B0F87 0600                A  4079    	LD	B,%0
0B0F89 C5                  A  4080    	PUSH	BC
0B0F8A CD 08 28 0B         A  4081    	CALL	_mos_fgetc
0B0F8E C1                  A  4082    	POP	BC
0B0F8F DD77C5              A  4083    	LD	(IX+%FFFFFFC5),A
                           A  4084    ;  367	                b = color_table[index *
                           A  4085    .LINE 367
                           A  4086    
0B0F92 B7ED62              A  4087    	UEXT	HL
0B0F95 6F                  A  4088    	LD	L,A
0B0F96 29                  A  4089    	ADD	HL,HL
0B0F97 29                  A  4090    	ADD	HL,HL
0B0F98 E5D1                A  4091    	LD	DE,HL
0B0F9A DDE5E1              A  4092    	LD	HL,IX
0B0F9D 016BFBFF            A  4093    	LD	BC,-1173
0B0FA1 09                  A  4094    	ADD	HL,BC
0B0FA2 19                  A  4095    	ADD	HL,DE
0B0FA3 FD2168FB FF         A  4096    	LD	IY,-1176
0B0FA8 DDE5C1              A  4097    	LD	BC,IX
0B0FAB FD09                A  4098    	ADD	IY,BC
0B0FAD FD2F00              A  4099    	LD	(IY),HL
0B0FB0 2168FBFF            A  4100    	LD	HL,-1176
0B0FB4 DDE5C1              A  4101    	LD	BC,IX
0B0FB7 09                  A  4102    	ADD	HL,BC
0B0FB8 ED27                A  4103    	LD	HL,(HL)
0B0FBA 7E                  A  4104    	LD	A,(HL)
0B0FBB DD77C6              A  4105    	LD	(IX+%FFFFFFC6),A
                           A  4106    ;  368	                g = color_table[index *
                           A  4107    .LINE 368
                           A  4108    
0B0FBE 2168FBFF            A  4109    	LD	HL,-1176
0B0FC2 DDE5C1              A  4110    	LD	BC,IX
0B0FC5 09                  A  4111    	ADD	HL,BC
0B0FC6 ED27                A  4112    	LD	HL,(HL)
0B0FC8 23                  A  4113    	INC	HL
0B0FC9 7E                  A  4114    	LD	A,(HL)
0B0FCA DD77C7              A  4115    	LD	(IX+%FFFFFFC7),A
                           A  4116    ;  369	                r = color_table[index *
                           A  4117    .LINE 369
                           A  4118    
0B0FCD 2168FBFF            A  4119    	LD	HL,-1176
0B0FD1 DDE5C1              A  4120    	LD	BC,IX
0B0FD4 09                  A  4121    	ADD	HL,BC
0B0FD5 ED31                A  4122    	LD	IY,(HL)
0B0FD7 ED2302              A  4123    	LEA	HL,IY+%2
0B0FDA 7E                  A  4124    	LD	A,(HL)
0B0FDB DD77C8              A  4125    	LD	(IX+%FFFFFFC8),A
                           A  4126    ;  370					
                           A  4127    ;  371					row_rgba2222[x] = 	(((
                           A  4128    ;  372										(((
                           A  4129    ;  373										(((
                           A  4130    ;  374										(((
                           A  4131    .LINE 374
                           A  4132    
0B0FDE DD7EC7              A  4133    	LD	A,(IX+%FFFFFFC7)
0B0FE1 B7ED62              A  4134    	UEXT	HL
0B0FE4 6F                  A  4135    	LD	L,A
0B0FE5 3E06                A  4136    	LD	A,%6
0B0FE7 CD 7C 2B 0B         A  4137    	CALL	__ishrs_b
0B0FEB 7D                  A  4138    	LD	A,L
0B0FEC E603                A  4139    	AND	A,%3
0B0FEE 87                  A  4140    	ADD	A,A
0B0FEF 87                  A  4141    	ADD	A,A
0B0FF0 47                  A  4142    	LD	B,A
0B0FF1 DD7EC8              A  4143    	LD	A,(IX+%FFFFFFC8)
0B0FF4 B7ED62              A  4144    	UEXT	HL
0B0FF7 6F                  A  4145    	LD	L,A
0B0FF8 3E06                A  4146    	LD	A,%6
0B0FFA CD 7C 2B 0B         A  4147    	CALL	__ishrs_b
0B0FFE 7D                  A  4148    	LD	A,L
0B0FFF E603                A  4149    	AND	A,%3
0B1001 4F                  A  4150    	LD	C,A
0B1002 78                  A  4151    	LD	A,B
0B1003 B1                  A  4152    	OR	A,C
0B1004 47                  A  4153    	LD	B,A
0B1005 DD7EC6              A  4154    	LD	A,(IX+%FFFFFFC6)
0B1008 B7ED62              A  4155    	UEXT	HL
0B100B 6F                  A  4156    	LD	L,A
0B100C 3E06                A  4157    	LD	A,%6
0B100E CD 7C 2B 0B         A  4158    	CALL	__ishrs_b
0B1012 7D                  A  4159    	LD	A,L
0B1013 E603                A  4160    	AND	A,%3
0B1015 87                  A  4161    	ADD	A,A
0B1016 87                  A  4162    	ADD	A,A
0B1017 87                  A  4163    	ADD	A,A
0B1018 87                  A  4164    	ADD	A,A
0B1019 4F                  A  4165    	LD	C,A
0B101A 78                  A  4166    	LD	A,B
0B101B B1                  A  4167    	OR	A,C
0B101C F6C0                A  4168    	OR	A,%C0
0B101E DD07D8              A  4169    	LD	BC,(IX+%FFFFFFD8)
0B1021 DD27E3              A  4170    	LD	HL,(IX+%FFFFFFE3)
0B1024 09                  A  4171    	ADD	HL,BC
0B1025 77                  A  4172    	LD	(HL),A
0B1026 DD27D8              A  4173    	LD	HL,(IX+%FFFFFFD8)
0B1029 DD5EDB              A  4174    	LD	E,(IX+%FFFFFFDB)
0B102C 3E01                A  4175    	LD	A,%1
0B102E CD 77 29 0B         A  4176    	CALL	__ladd_b
0B1032 DD2FD8              A  4177    	LD	(IX+%FFFFFFD8),HL
0B1035 DD73DB              A  4178    	LD	(IX+%FFFFFFDB),E
                           A  4179    ;  375					
                           A  4180    ;  376	
                           A  4181    ;  377	            }
0B1038                     A  4182    L_106:
                           A  4183    .LINE 377
                           A  4184    
0B1038 DD27D8              A  4185    	LD	HL,(IX+%FFFFFFD8)
0B103B DD5EDB              A  4186    	LD	E,(IX+%FFFFFFDB)
0B103E DD07F7              A  4187    	LD	BC,(IX+%FFFFFFF7)
0B1041 DD7EFA              A  4188    	LD	A,(IX+%FFFFFFFA)
0B1044 CD 70 2F 0B         A  4189    	CALL	__lcmps
0B1048 FA 52 10 0B         A  4190    	JP	M,L__76
0B104C EA 84 0F 0B         A  4191    	JP	PE,L_104
0B1050 18 04               A  4192    	JR	L__77
0B1052                     A  4193    L__76:
0B1052 E2 84 0F 0B         A  4194    	JP	PO,L_104
0B1056                     A  4195    L__77:
                           A  4196    ;  378				
                           A  4197    ;  379				add_stream_to_buffer(slot,r
                           A  4198    .LINE 379
                           A  4199    
0B1056 DD07F7              A  4200    	LD	BC,(IX+%FFFFFFF7)
0B1059 C5                  A  4201    	PUSH	BC
0B105A DD07E3              A  4202    	LD	BC,(IX+%FFFFFFE3)
0B105D C5                  A  4203    	PUSH	BC
0B105E DD4E0C              A  4204    	LD	C,(IX+%C)
0B1061 0600                A  4205    	LD	B,%0
0B1063 C5                  A  4206    	PUSH	BC
0B1064 CD A6 05 0B         A  4207    	CALL	_add_stream_to_buffer
0B1068 C1                  A  4208    	POP	BC
0B1069 C1                  A  4209    	POP	BC
0B106A C1                  A  4210    	POP	BC
                           A  4211    ;  380				mos_flseek(file, fo -> fptr
                           A  4212    .LINE 380
                           A  4213    
0B106B DD27BE              A  4214    	LD	HL,(IX+%FFFFFFBE)
0B106E 29                  A  4215    	ADD	HL,HL
0B106F E5C1                A  4216    	LD	BC,HL
0B1071 CD 69 2F 0B         A  4217    	CALL	__itol
0B1075 5F                  A  4218    	LD	E,A
0B1076 C5E1                A  4219    	LD	HL,BC
0B1078 DD07DC              A  4220    	LD	BC,(IX+%FFFFFFDC)
0B107B DD7EDF              A  4221    	LD	A,(IX+%FFFFFFDF)
0B107E CD 86 29 0B         A  4222    	CALL	__ladd
0B1082 7B                  A  4223    	LD	A,E
0B1083 E5C1                A  4224    	LD	BC,HL
0B1085 DD31C9              A  4225    	LD	IY,(IX+%FFFFFFC9)
0B1088 FD2711              A  4226    	LD	HL,(IY+%11)
0B108B FD5E14              A  4227    	LD	E,(IY+%14)
0B108E CD 86 2E 0B         A  4228    	CALL	__lsub
0B1092 4B                  A  4229    	LD	C,E
0B1093 0600                A  4230    	LD	B,%0
0B1095 C5                  A  4231    	PUSH	BC
0B1096 E5                  A  4232    	PUSH	HL
0B1097 DD4EFF              A  4233    	LD	C,(IX+%FFFFFFFF)
0B109A C5                  A  4234    	PUSH	BC
0B109B CD 42 29 0B         A  4235    	CALL	_mos_flseek
0B109F C1                  A  4236    	POP	BC
0B10A0 C1                  A  4237    	POP	BC
0B10A1 C1                  A  4238    	POP	BC
0B10A2 DD27FB              A  4239    	LD	HL,(IX+%FFFFFFFB)
0B10A5 DD5EFE              A  4240    	LD	E,(IX+%FFFFFFFE)
0B10A8 01FFFFFF            A  4241    	LD	BC,16777215
0B10AC 3EFF                A  4242    	LD	A,%FF
0B10AE CD 86 29 0B         A  4243    	CALL	__ladd
0B10B2 DD2FFB              A  4244    	LD	(IX+%FFFFFFFB),HL
0B10B5 DD73FE              A  4245    	LD	(IX+%FFFFFFFE),E
                           A  4246    ;  381	            // for (i = 0; i < row_padd
                           A  4247    ;  382	                // mos_fgetc(file);
                           A  4248    ;  383	            // }
                           A  4249    ;  384	
                           A  4250    ;  385	        }
0B10B8                     A  4251    L_110:
                           A  4252    .LINE 385
                           A  4253    
0B10B8 DD27FB              A  4254    	LD	HL,(IX+%FFFFFFFB)
0B10BB DD5EFE              A  4255    	LD	E,(IX+%FFFFFFFE)
0B10BE 01000000            A  4256    	LD	BC,0
0B10C2 AF                  A  4257    	XOR	A,A
0B10C3 CD 70 2F 0B         A  4258    	CALL	__lcmps
0B10C7 F2 D1 10 0B         A  4259    	JP	P,L__78
0B10CB EA 75 0F 0B         A  4260    	JP	PE,L_108
0B10CF 18 04               A  4261    	JR	L__79
0B10D1                     A  4262    L__78:
0B10D1 E2 75 0F 0B         A  4263    	JP	PO,L_108
0B10D5                     A  4264    L__79:
0B10D5 C3 3C 14 0B         A  4265    	JR	L_125
                           A  4266    ;  386	
                           A  4267    ;  387	    } else if (bit_depth == 32) {
0B10D9                     A  4268    L_124:
                           A  4269    .LINE 387
                           A  4270    
0B10D9 DD27F3              A  4271    	LD	HL,(IX+%FFFFFFF3)
0B10DC DD5EF6              A  4272    	LD	E,(IX+%FFFFFFF6)
0B10DF 01200000            A  4273    	LD	BC,32
0B10E3 AF                  A  4274    	XOR	A,A
0B10E4 CD 70 2F 0B         A  4275    	CALL	__lcmps
0B10E8 C2 83 12 0B         A  4276    	JR	NZ,L_122
                           A  4277    ;  388	        
                           A  4278    ;  389			int non_pad_row = width * bit_d
                           A  4279    .LINE 389
                           A  4280    
0B10EC DD27F7              A  4281    	LD	HL,(IX+%FFFFFFF7)
0B10EF DD5EFA              A  4282    	LD	E,(IX+%FFFFFFFA)
0B10F2 DD07F3              A  4283    	LD	BC,(IX+%FFFFFFF3)
0B10F5 DD7EF6              A  4284    	LD	A,(IX+%FFFFFFF6)
0B10F8 CD EA 2F 0B         A  4285    	CALL	__lmuls
0B10FC 01080000            A  4286    	LD	BC,8
0B1100 AF                  A  4287    	XOR	A,A
0B1101 CD D7 2D 0B         A  4288    	CALL	__ldivs
0B1105 DD2FD4              A  4289    	LD	(IX+%FFFFFFD4),HL
0B1108 DD73D7              A  4290    	LD	(IX+%FFFFFFD7),E
0B110B DD2FB4              A  4291    	LD	(IX+%FFFFFFB4),HL
                           A  4292    ;  390	        src = (char * ) malloc(width * 
                           A  4293    .LINE 390
                           A  4294    
0B110E E5C1                A  4295    	LD	BC,HL
0B1110 C5                  A  4296    	PUSH	BC
0B1111 CD 91 2A 0B         A  4297    	CALL	_malloc
0B1115 C1                  A  4298    	POP	BC
0B1116 DD2FE0              A  4299    	LD	(IX+%FFFFFFE0),HL
                           A  4300    ;  391			mos_flseek(file, image_start + 
                           A  4301    .LINE 391
                           A  4302    
0B1119 DD07D4              A  4303    	LD	BC,(IX+%FFFFFFD4)
0B111C CD 69 2F 0B         A  4304    	CALL	__itol
0B1120 DD27DC              A  4305    	LD	HL,(IX+%FFFFFFDC)
0B1123 DD5EDF              A  4306    	LD	E,(IX+%FFFFFFDF)
0B1126 CD 86 29 0B         A  4307    	CALL	__ladd
0B112A 7B                  A  4308    	LD	A,E
0B112B FD215FFB FF         A  4309    	LD	IY,-1185	; spill
0B1130 DDE5C1              A  4310    	LD	BC,IX	; spill
0B1133 FD09                A  4311    	ADD	IY,BC
0B1135 FD7700              A  4312    	LD	(IY),A
0B1138 015CFBFF            A  4313    	LD	BC,-1188	; spill
0B113C CD A1 2B 0B         A  4314    	CALL	__istix
0B1140 DD27EB              A  4315    	LD	HL,(IX+%FFFFFFEB)
0B1143 DD5EEE              A  4316    	LD	E,(IX+%FFFFFFEE)
0B1146 01010000            A  4317    	LD	BC,1
0B114A AF                  A  4318    	XOR	A,A
0B114B CD 86 2E 0B         A  4319    	CALL	__lsub
0B114F 7B                  A  4320    	LD	A,E
0B1150 E5C1                A  4321    	LD	BC,HL
0B1152 C5                  A  4322    	PUSH	BC
0B1153 FD2167FB FF         A  4323    	LD	IY,-1177	; spill
0B1158 DDE5C1              A  4324    	LD	BC,IX	; spill
0B115B FD09                A  4325    	ADD	IY,BC
0B115D FD7700              A  4326    	LD	(IY),A
0B1160 FD215FFB FF         A  4327    	LD	IY,-1185	; unspill
0B1165 DDE5C1              A  4328    	LD	BC,IX	; unspill
0B1168 FD09                A  4329    	ADD	IY,BC
0B116A FD7E00              A  4330    	LD	A,(IY)
0B116D C1                  A  4331    	POP	BC
0B116E 5F                  A  4332    	LD	E,A
0B116F C5                  A  4333    	PUSH	BC
0B1170 FD2167FB FF         A  4334    	LD	IY,-1177	; unspill
0B1175 DDE5C1              A  4335    	LD	BC,IX	; unspill
0B1178 FD09                A  4336    	ADD	IY,BC
0B117A FD7E00              A  4337    	LD	A,(IY)
0B117D C1                  A  4338    	POP	BC
0B117E C5E1                A  4339    	LD	HL,BC
0B1180 0163FBFF            A  4340    	LD	BC,-1181	; spill
0B1184 CD A1 2B 0B         A  4341    	CALL	__istix
0B1188 015CFBFF            A  4342    	LD	BC,-1188	; unspill
0B118C CD 57 30 0B         A  4343    	CALL	__ildix
0B1190 E5C1                A  4344    	LD	BC,HL
0B1192 C5E1                A  4345    	LD	HL,BC
0B1194 0163FBFF            A  4346    	LD	BC,-1181	; unspill
0B1198 E5                  A  4347    	PUSH	HL
0B1199 CD 57 30 0B         A  4348    	CALL	__ildix
0B119D E5C1                A  4349    	LD	BC,HL
0B119F E1                  A  4350    	POP	HL
0B11A0 CD EA 2F 0B         A  4351    	CALL	__lmulu
0B11A4 DD07BA              A  4352    	LD	BC,(IX+%FFFFFFBA)
0B11A7 DD7EBD              A  4353    	LD	A,(IX+%FFFFFFBD)
0B11AA CD 86 29 0B         A  4354    	CALL	__ladd
0B11AE 4B                  A  4355    	LD	C,E
0B11AF 0600                A  4356    	LD	B,%0
0B11B1 C5                  A  4357    	PUSH	BC
0B11B2 E5                  A  4358    	PUSH	HL
0B11B3 DD4EFF              A  4359    	LD	C,(IX+%FFFFFFFF)
0B11B6 C5                  A  4360    	PUSH	BC
0B11B7 CD 42 29 0B         A  4361    	CALL	_mos_flseek
0B11BB C1                  A  4362    	POP	BC
0B11BC C1                  A  4363    	POP	BC
0B11BD C1                  A  4364    	POP	BC
                           A  4365    ;  392	
                           A  4366    ;  393	        for (y = height - 1; y >= 0; y-
                           A  4367    .LINE 393
                           A  4368    
0B11BE DD27EB              A  4369    	LD	HL,(IX+%FFFFFFEB)
0B11C1 DD5EEE              A  4370    	LD	E,(IX+%FFFFFFEE)
0B11C4 01FFFFFF            A  4371    	LD	BC,16777215
0B11C8 3EFF                A  4372    	LD	A,%FF
0B11CA CD 86 29 0B         A  4373    	CALL	__ladd
0B11CE DD2FFB              A  4374    	LD	(IX+%FFFFFFFB),HL
0B11D1 DD73FE              A  4375    	LD	(IX+%FFFFFFFE),E
0B11D4 C3 62 12 0B         A  4376    	JR	L_114
0B11D8                     A  4377    L_112:
                           A  4378    ;  394	
                           A  4379    ;  395	            mos_fread(file, src, non_pa
                           A  4380    .LINE 395
                           A  4381    
0B11D8 DD07D4              A  4382    	LD	BC,(IX+%FFFFFFD4)
0B11DB C5                  A  4383    	PUSH	BC
0B11DC DD07E0              A  4384    	LD	BC,(IX+%FFFFFFE0)
0B11DF C5                  A  4385    	PUSH	BC
0B11E0 DD4EFF              A  4386    	LD	C,(IX+%FFFFFFFF)
0B11E3 0600                A  4387    	LD	B,%0
0B11E5 C5                  A  4388    	PUSH	BC
0B11E6 CD 08 29 0B         A  4389    	CALL	_mos_fread
0B11EA C1                  A  4390    	POP	BC
0B11EB C1                  A  4391    	POP	BC
0B11EC C1                  A  4392    	POP	BC
                           A  4393    ;  396				bgra8888_to_rgba2222(src, r
                           A  4394    .LINE 396
                           A  4395    
0B11ED DD07F7              A  4396    	LD	BC,(IX+%FFFFFFF7)
0B11F0 C5                  A  4397    	PUSH	BC
0B11F1 DD07E3              A  4398    	LD	BC,(IX+%FFFFFFE3)
0B11F4 C5                  A  4399    	PUSH	BC
0B11F5 DD07E0              A  4400    	LD	BC,(IX+%FFFFFFE0)
0B11F8 C5                  A  4401    	PUSH	BC
0B11F9 CD 87 09 0B         A  4402    	CALL	_bgra8888_to_rgba2222
0B11FD C1                  A  4403    	POP	BC
0B11FE C1                  A  4404    	POP	BC
0B11FF C1                  A  4405    	POP	BC
                           A  4406    ;  397				add_stream_to_buffer(slot,r
                           A  4407    .LINE 397
                           A  4408    
0B1200 DD07F7              A  4409    	LD	BC,(IX+%FFFFFFF7)
0B1203 C5                  A  4410    	PUSH	BC
0B1204 DD07E3              A  4411    	LD	BC,(IX+%FFFFFFE3)
0B1207 C5                  A  4412    	PUSH	BC
0B1208 DD4E0C              A  4413    	LD	C,(IX+%C)
0B120B 0600                A  4414    	LD	B,%0
0B120D C5                  A  4415    	PUSH	BC
0B120E CD A6 05 0B         A  4416    	CALL	_add_stream_to_buffer
0B1212 C1                  A  4417    	POP	BC
0B1213 C1                  A  4418    	POP	BC
0B1214 C1                  A  4419    	POP	BC
                           A  4420    ;  398	            mos_flseek(file, fo -> fptr
                           A  4421    .LINE 398
                           A  4422    
0B1215 DD27D4              A  4423    	LD	HL,(IX+%FFFFFFD4)
0B1218 29                  A  4424    	ADD	HL,HL
0B1219 E5C1                A  4425    	LD	BC,HL
0B121B CD 69 2F 0B         A  4426    	CALL	__itol
0B121F 5F                  A  4427    	LD	E,A
0B1220 C5E1                A  4428    	LD	HL,BC
0B1222 DD07DC              A  4429    	LD	BC,(IX+%FFFFFFDC)
0B1225 DD7EDF              A  4430    	LD	A,(IX+%FFFFFFDF)
0B1228 CD 86 29 0B         A  4431    	CALL	__ladd
0B122C 7B                  A  4432    	LD	A,E
0B122D E5C1                A  4433    	LD	BC,HL
0B122F DD31C9              A  4434    	LD	IY,(IX+%FFFFFFC9)
0B1232 FD2711              A  4435    	LD	HL,(IY+%11)
0B1235 FD5E14              A  4436    	LD	E,(IY+%14)
0B1238 CD 86 2E 0B         A  4437    	CALL	__lsub
0B123C 4B                  A  4438    	LD	C,E
0B123D 0600                A  4439    	LD	B,%0
0B123F C5                  A  4440    	PUSH	BC
0B1240 E5                  A  4441    	PUSH	HL
0B1241 DD4EFF              A  4442    	LD	C,(IX+%FFFFFFFF)
0B1244 C5                  A  4443    	PUSH	BC
0B1245 CD 42 29 0B         A  4444    	CALL	_mos_flseek
0B1249 C1                  A  4445    	POP	BC
0B124A C1                  A  4446    	POP	BC
0B124B C1                  A  4447    	POP	BC
0B124C DD27FB              A  4448    	LD	HL,(IX+%FFFFFFFB)
0B124F DD5EFE              A  4449    	LD	E,(IX+%FFFFFFFE)
0B1252 01FFFFFF            A  4450    	LD	BC,16777215
0B1256 3EFF                A  4451    	LD	A,%FF
0B1258 CD 86 29 0B         A  4452    	CALL	__ladd
0B125C DD2FFB              A  4453    	LD	(IX+%FFFFFFFB),HL
0B125F DD73FE              A  4454    	LD	(IX+%FFFFFFFE),E
                           A  4455    ;  399	
                           A  4456    ;  400	        }
0B1262                     A  4457    L_114:
                           A  4458    .LINE 400
                           A  4459    
0B1262 DD27FB              A  4460    	LD	HL,(IX+%FFFFFFFB)
0B1265 DD5EFE              A  4461    	LD	E,(IX+%FFFFFFFE)
0B1268 01000000            A  4462    	LD	BC,0
0B126C AF                  A  4463    	XOR	A,A
0B126D CD 70 2F 0B         A  4464    	CALL	__lcmps
0B1271 F2 7B 12 0B         A  4465    	JP	P,L__80
0B1275 EA D8 11 0B         A  4466    	JP	PE,L_112
0B1279 18 04               A  4467    	JR	L__81
0B127B                     A  4468    L__80:
0B127B E2 D8 11 0B         A  4469    	JP	PO,L_112
0B127F                     A  4470    L__81:
0B127F C3 3C 14 0B         A  4471    	JR	L_125
                           A  4472    ;  401	
                           A  4473    ;  402	    } else if (bit_depth == 24) {
0B1283                     A  4474    L_122:
                           A  4475    .LINE 402
                           A  4476    
0B1283 DD27F3              A  4477    	LD	HL,(IX+%FFFFFFF3)
0B1286 DD5EF6              A  4478    	LD	E,(IX+%FFFFFFF6)
0B1289 01180000            A  4479    	LD	BC,24
0B128D AF                  A  4480    	XOR	A,A
0B128E CD 70 2F 0B         A  4481    	CALL	__lcmps
0B1292 C2 3C 14 0B         A  4482    	JR	NZ,L_125
                           A  4483    ;  403			
                           A  4484    ;  404			uint16_t new_row_size;
                           A  4485    ;  405			int non_pad_row = width * bit_d
                           A  4486    .LINE 405
                           A  4487    
0B1296 DD27F7              A  4488    	LD	HL,(IX+%FFFFFFF7)
0B1299 DD5EFA              A  4489    	LD	E,(IX+%FFFFFFFA)
0B129C DD07F3              A  4490    	LD	BC,(IX+%FFFFFFF3)
0B129F DD7EF6              A  4491    	LD	A,(IX+%FFFFFFF6)
0B12A2 CD EA 2F 0B         A  4492    	CALL	__lmuls
0B12A6 01080000            A  4493    	LD	BC,8
0B12AA AF                  A  4494    	XOR	A,A
0B12AB CD D7 2D 0B         A  4495    	CALL	__ldivs
0B12AF DD2FD0              A  4496    	LD	(IX+%FFFFFFD0),HL
0B12B2 DD73D3              A  4497    	LD	(IX+%FFFFFFD3),E
0B12B5 DD2FB1              A  4498    	LD	(IX+%FFFFFFB1),HL
                           A  4499    ;  406			
                           A  4500    ;  407	        src = (char * ) malloc(width * 
                           A  4501    .LINE 407
                           A  4502    
0B12B8 E5C1                A  4503    	LD	BC,HL
0B12BA C5                  A  4504    	PUSH	BC
0B12BB CD 91 2A 0B         A  4505    	CALL	_malloc
0B12BF C1                  A  4506    	POP	BC
0B12C0 DD2FE0              A  4507    	LD	(IX+%FFFFFFE0),HL
                           A  4508    ;  408			mos_flseek(file, image_start + 
                           A  4509    .LINE 408
                           A  4510    
0B12C3 DD07D0              A  4511    	LD	BC,(IX+%FFFFFFD0)
0B12C6 CD 69 2F 0B         A  4512    	CALL	__itol
0B12CA DD27DC              A  4513    	LD	HL,(IX+%FFFFFFDC)
0B12CD DD5EDF              A  4514    	LD	E,(IX+%FFFFFFDF)
0B12D0 CD 86 29 0B         A  4515    	CALL	__ladd
0B12D4 7B                  A  4516    	LD	A,E
0B12D5 FD2166FB FF         A  4517    	LD	IY,-1178	; spill
0B12DA DDE5C1              A  4518    	LD	BC,IX	; spill
0B12DD FD09                A  4519    	ADD	IY,BC
0B12DF FD7700              A  4520    	LD	(IY),A
0B12E2 0160FBFF            A  4521    	LD	BC,-1184	; spill
0B12E6 CD A1 2B 0B         A  4522    	CALL	__istix
0B12EA DD27EB              A  4523    	LD	HL,(IX+%FFFFFFEB)
0B12ED DD5EEE              A  4524    	LD	E,(IX+%FFFFFFEE)
0B12F0 01010000            A  4525    	LD	BC,1
0B12F4 AF                  A  4526    	XOR	A,A
0B12F5 CD 86 2E 0B         A  4527    	CALL	__lsub
0B12F9 7B                  A  4528    	LD	A,E
0B12FA E5C1                A  4529    	LD	BC,HL
0B12FC C5                  A  4530    	PUSH	BC
0B12FD FD2167FB FF         A  4531    	LD	IY,-1177	; spill
0B1302 DDE5C1              A  4532    	LD	BC,IX	; spill
0B1305 FD09                A  4533    	ADD	IY,BC
0B1307 FD7700              A  4534    	LD	(IY),A
0B130A FD2166FB FF         A  4535    	LD	IY,-1178	; unspill
0B130F DDE5C1              A  4536    	LD	BC,IX	; unspill
0B1312 FD09                A  4537    	ADD	IY,BC
0B1314 FD7E00              A  4538    	LD	A,(IY)
0B1317 C1                  A  4539    	POP	BC
0B1318 5F                  A  4540    	LD	E,A
0B1319 C5                  A  4541    	PUSH	BC
0B131A FD2167FB FF         A  4542    	LD	IY,-1177	; unspill
0B131F DDE5C1              A  4543    	LD	BC,IX	; unspill
0B1322 FD09                A  4544    	ADD	IY,BC
0B1324 FD7E00              A  4545    	LD	A,(IY)
0B1327 C1                  A  4546    	POP	BC
0B1328 C5E1                A  4547    	LD	HL,BC
0B132A 0163FBFF            A  4548    	LD	BC,-1181	; spill
0B132E CD A1 2B 0B         A  4549    	CALL	__istix
0B1332 0160FBFF            A  4550    	LD	BC,-1184	; unspill
0B1336 CD 57 30 0B         A  4551    	CALL	__ildix
0B133A E5C1                A  4552    	LD	BC,HL
0B133C C5E1                A  4553    	LD	HL,BC
0B133E 0163FBFF            A  4554    	LD	BC,-1181	; unspill
0B1342 E5                  A  4555    	PUSH	HL
0B1343 CD 57 30 0B         A  4556    	CALL	__ildix
0B1347 E5C1                A  4557    	LD	BC,HL
0B1349 E1                  A  4558    	POP	HL
0B134A CD EA 2F 0B         A  4559    	CALL	__lmulu
0B134E DD07BA              A  4560    	LD	BC,(IX+%FFFFFFBA)
0B1351 DD7EBD              A  4561    	LD	A,(IX+%FFFFFFBD)
0B1354 CD 86 29 0B         A  4562    	CALL	__ladd
0B1358 4B                  A  4563    	LD	C,E
0B1359 0600                A  4564    	LD	B,%0
0B135B C5                  A  4565    	PUSH	BC
0B135C E5                  A  4566    	PUSH	HL
0B135D DD4EFF              A  4567    	LD	C,(IX+%FFFFFFFF)
0B1360 C5                  A  4568    	PUSH	BC
0B1361 CD 42 29 0B         A  4569    	CALL	_mos_flseek
0B1365 C1                  A  4570    	POP	BC
0B1366 C1                  A  4571    	POP	BC
0B1367 C1                  A  4572    	POP	BC
                           A  4573    ;  409			
                           A  4574    ;  410	        for (y = height - 1; y >= 0; y-
                           A  4575    .LINE 410
                           A  4576    
0B1368 DD27EB              A  4577    	LD	HL,(IX+%FFFFFFEB)
0B136B DD5EEE              A  4578    	LD	E,(IX+%FFFFFFEE)
0B136E 01FFFFFF            A  4579    	LD	BC,16777215
0B1372 3EFF                A  4580    	LD	A,%FF
0B1374 CD 86 29 0B         A  4581    	CALL	__ladd
0B1378 DD2FFB              A  4582    	LD	(IX+%FFFFFFFB),HL
0B137B DD73FE              A  4583    	LD	(IX+%FFFFFFFE),E
0B137E C3 0C 14 0B         A  4584    	JR	L_118
0B1382                     A  4585    L_116:
                           A  4586    ;  411	
                           A  4587    ;  412	            mos_fread(file, src, non_pa
                           A  4588    .LINE 412
                           A  4589    
0B1382 DD07D0              A  4590    	LD	BC,(IX+%FFFFFFD0)
0B1385 C5                  A  4591    	PUSH	BC
0B1386 DD07E0              A  4592    	LD	BC,(IX+%FFFFFFE0)
0B1389 C5                  A  4593    	PUSH	BC
0B138A DD4EFF              A  4594    	LD	C,(IX+%FFFFFFFF)
0B138D 0600                A  4595    	LD	B,%0
0B138F C5                  A  4596    	PUSH	BC
0B1390 CD 08 29 0B         A  4597    	CALL	_mos_fread
0B1394 C1                  A  4598    	POP	BC
0B1395 C1                  A  4599    	POP	BC
0B1396 C1                  A  4600    	POP	BC
                           A  4601    ;  413				bgr888_to_rgba2222(src, row
                           A  4602    .LINE 413
                           A  4603    
0B1397 DD07F7              A  4604    	LD	BC,(IX+%FFFFFFF7)
0B139A C5                  A  4605    	PUSH	BC
0B139B DD07E3              A  4606    	LD	BC,(IX+%FFFFFFE3)
0B139E C5                  A  4607    	PUSH	BC
0B139F DD07E0              A  4608    	LD	BC,(IX+%FFFFFFE0)
0B13A2 C5                  A  4609    	PUSH	BC
0B13A3 CD C7 08 0B         A  4610    	CALL	_bgr888_to_rgba2222
0B13A7 C1                  A  4611    	POP	BC
0B13A8 C1                  A  4612    	POP	BC
0B13A9 C1                  A  4613    	POP	BC
                           A  4614    ;  414				add_stream_to_buffer(slot,r
                           A  4615    .LINE 414
                           A  4616    
0B13AA DD07F7              A  4617    	LD	BC,(IX+%FFFFFFF7)
0B13AD C5                  A  4618    	PUSH	BC
0B13AE DD07E3              A  4619    	LD	BC,(IX+%FFFFFFE3)
0B13B1 C5                  A  4620    	PUSH	BC
0B13B2 DD4E0C              A  4621    	LD	C,(IX+%C)
0B13B5 0600                A  4622    	LD	B,%0
0B13B7 C5                  A  4623    	PUSH	BC
0B13B8 CD A6 05 0B         A  4624    	CALL	_add_stream_to_buffer
0B13BC C1                  A  4625    	POP	BC
0B13BD C1                  A  4626    	POP	BC
0B13BE C1                  A  4627    	POP	BC
                           A  4628    ;  415	            mos_flseek(file, fo -> fptr
                           A  4629    .LINE 415
                           A  4630    
0B13BF DD27D0              A  4631    	LD	HL,(IX+%FFFFFFD0)
0B13C2 29                  A  4632    	ADD	HL,HL
0B13C3 E5C1                A  4633    	LD	BC,HL
0B13C5 CD 69 2F 0B         A  4634    	CALL	__itol
0B13C9 5F                  A  4635    	LD	E,A
0B13CA C5E1                A  4636    	LD	HL,BC
0B13CC DD07DC              A  4637    	LD	BC,(IX+%FFFFFFDC)
0B13CF DD7EDF              A  4638    	LD	A,(IX+%FFFFFFDF)
0B13D2 CD 86 29 0B         A  4639    	CALL	__ladd
0B13D6 7B                  A  4640    	LD	A,E
0B13D7 E5C1                A  4641    	LD	BC,HL
0B13D9 DD31C9              A  4642    	LD	IY,(IX+%FFFFFFC9)
0B13DC FD2711              A  4643    	LD	HL,(IY+%11)
0B13DF FD5E14              A  4644    	LD	E,(IY+%14)
0B13E2 CD 86 2E 0B         A  4645    	CALL	__lsub
0B13E6 4B                  A  4646    	LD	C,E
0B13E7 0600                A  4647    	LD	B,%0
0B13E9 C5                  A  4648    	PUSH	BC
0B13EA E5                  A  4649    	PUSH	HL
0B13EB DD4EFF              A  4650    	LD	C,(IX+%FFFFFFFF)
0B13EE C5                  A  4651    	PUSH	BC
0B13EF CD 42 29 0B         A  4652    	CALL	_mos_flseek
0B13F3 C1                  A  4653    	POP	BC
0B13F4 C1                  A  4654    	POP	BC
0B13F5 C1                  A  4655    	POP	BC
0B13F6 DD27FB              A  4656    	LD	HL,(IX+%FFFFFFFB)
0B13F9 DD5EFE              A  4657    	LD	E,(IX+%FFFFFFFE)
0B13FC 01FFFFFF            A  4658    	LD	BC,16777215
0B1400 3EFF                A  4659    	LD	A,%FF
0B1402 CD 86 29 0B         A  4660    	CALL	__ladd
0B1406 DD2FFB              A  4661    	LD	(IX+%FFFFFFFB),HL
0B1409 DD73FE              A  4662    	LD	(IX+%FFFFFFFE),E
                           A  4663    ;  416	
                           A  4664    ;  417	        }		
0B140C                     A  4665    L_118:
                           A  4666    .LINE 417
                           A  4667    
0B140C DD27FB              A  4668    	LD	HL,(IX+%FFFFFFFB)
0B140F DD5EFE              A  4669    	LD	E,(IX+%FFFFFFFE)
0B1412 01000000            A  4670    	LD	BC,0
0B1416 AF                  A  4671    	XOR	A,A
0B1417 CD 70 2F 0B         A  4672    	CALL	__lcmps
0B141B F2 25 14 0B         A  4673    	JP	P,L__82
0B141F EA 82 13 0B         A  4674    	JP	PE,L_116
0B1423 18 04               A  4675    	JR	L__83
0B1425                     A  4676    L__82:
0B1425 E2 82 13 0B         A  4677    	JP	PO,L_116
0B1429                     A  4678    L__83:
                           A  4679    ;  418			free(row_24bpp);
                           A  4680    .LINE 418
                           A  4681    
0B1429 01000000            A  4682    	LD	BC,0
0B142D C5                  A  4683    	PUSH	BC
0B142E CD 8C 29 0B         A  4684    	CALL	_free
0B1432 C1                  A  4685    	POP	BC
                           A  4686    ;  419			free(src);
                           A  4687    .LINE 419
                           A  4688    
0B1433 DD07E0              A  4689    	LD	BC,(IX+%FFFFFFE0)
0B1436 C5                  A  4690    	PUSH	BC
0B1437 CD 8C 29 0B         A  4691    	CALL	_free
0B143B C1                  A  4692    	POP	BC
                           A  4693    ;  420			
                           A  4694    ;  421			
                           A  4695    ;  422		}
0B143C                     A  4696    L_125:
                           A  4697    .LINE 422
                           A  4698    
                           A  4699    ;  423	
                           A  4700    ;  424		assign_buffer_to_bitmap(slot,1,widt
                           A  4701    .LINE 424
                           A  4702    
0B143C DD07EB              A  4703    	LD	BC,(IX+%FFFFFFEB)
0B143F C5                  A  4704    	PUSH	BC
0B1440 DD07F7              A  4705    	LD	BC,(IX+%FFFFFFF7)
0B1443 C5                  A  4706    	PUSH	BC
0B1444 01010000            A  4707    	LD	BC,1
0B1448 C5                  A  4708    	PUSH	BC
0B1449 DD4E0C              A  4709    	LD	C,(IX+%C)
0B144C 0600                A  4710    	LD	B,%0
0B144E C5                  A  4711    	PUSH	BC
0B144F CD 3B 06 0B         A  4712    	CALL	_assign_buffer_to_bitmap
0B1453 C1                  A  4713    	POP	BC
0B1454 C1                  A  4714    	POP	BC
0B1455 C1                  A  4715    	POP	BC
0B1456 C1                  A  4716    	POP	BC
                           A  4717    ;  425		
                           A  4718    ;  426	    mos_fclose(file);
                           A  4719    .LINE 426
                           A  4720    
0B1457 DD4EFF              A  4721    	LD	C,(IX+%FFFFFFFF)
0B145A 0600                A  4722    	LD	B,%0
0B145C C5                  A  4723    	PUSH	BC
0B145D CD F3 27 0B         A  4724    	CALL	_mos_fclose
0B1461 C1                  A  4725    	POP	BC
                           A  4726    ;  427	    free(image_buffer);
                           A  4727    .LINE 427
                           A  4728    
0B1462 DD07B7              A  4729    	LD	BC,(IX+%FFFFFFB7)
0B1465 C5                  A  4730    	PUSH	BC
0B1466 CD 8C 29 0B         A  4731    	CALL	_free
0B146A C1                  A  4732    	POP	BC
                           A  4733    ;  428		free(row_rgba2222);
                           A  4734    .LINE 428
                           A  4735    
0B146B DD07E3              A  4736    	LD	BC,(IX+%FFFFFFE3)
0B146E C5                  A  4737    	PUSH	BC
0B146F CD 8C 29 0B         A  4738    	CALL	_free
0B1473 C1                  A  4739    	POP	BC
                           A  4740    ;  429		
                           A  4741    ;  430	    //return width * height;
                           A  4742    ;  431		return_info.bmp_width = width;
                           A  4743    .LINE 431
                           A  4744    
0B1474 DD27F7              A  4745    	LD	HL,(IX+%FFFFFFF7)
0B1477 DD75E6              A  4746    	LD	(IX+%FFFFFFE6),L
0B147A DD74E7              A  4747    	LD	(IX+%FFFFFFE7),H
                           A  4748    ;  432		return_info.bmp_height = height;
                           A  4749    .LINE 432
                           A  4750    
0B147D DD27EB              A  4751    	LD	HL,(IX+%FFFFFFEB)
0B1480 DD75E8              A  4752    	LD	(IX+%FFFFFFE8),L
0B1483 DD74E9              A  4753    	LD	(IX+%FFFFFFE9),H
                           A  4754    ;  433		return_info.bmp_bitdepth = bit_dept
                           A  4755    .LINE 433
                           A  4756    
0B1486 DD7EF3              A  4757    	LD	A,(IX+%FFFFFFF3)
0B1489 DD77EA              A  4758    	LD	(IX+%FFFFFFEA),A
                           A  4759    ;  434		return return_info;
                           A  4760    .LINE 434
                           A  4761    
0B148C ED2206              A  4762    	LEA	HL,IX+%6
0B148F ED17                A  4763    	LD	DE,(HL)
0B1491 ED22E6              A  4764    	LEA	HL,IX+%FFFFFFE6
0B1494 01050000            A  4765    	LD	BC,5
0B1498 EDB0                A  4766    	LDIR	
0B149A DD2706              A  4767    	LD	HL,(IX+%6)
                           A  4768    ;  435	
                           A  4769    ;  436	}
0B149D                     A  4770    L_126:
                           A  4771    .LINE 436
                           A  4772    
0B149D DDF9                A  4773    	LD	SP,IX
0B149F DDE1                A  4774    	POP	IX
0B14A1 C9                  A  4775    	RET	
                           A  4776    
                           A  4777    
                           A  4778    ;**************************** _load_bmp_big ***
                           A  4779    ;Name                         Addr/Register   S
                           A  4780    ;_free                               IMPORT  --
                           A  4781    ;_mos_flseek                         IMPORT  --
                           A  4782    ;_mos_fgetc                          IMPORT  --
                           A  4783    ;_mos_fclose                         IMPORT  --
                           A  4784    ;_memcmp                             IMPORT  --
                           A  4785    ;_malloc                             IMPORT  --
                           A  4786    ;_mos_fread                          IMPORT  --
                           A  4787    ;_mos_getfil                         IMPORT  --
                           A  4788    ;___print_sendstring                 IMPORT  --
                           A  4789    ;___print_xputch                     IMPORT    
                           A  4790    ;___print_uputch                     IMPORT  --
                           A  4791    ;_mos_fopen                          IMPORT  --
                           A  4792    ;color_table                        IX-1173   1
                           A  4793    ;header                              IX-149    
                           A  4794    ;redMask                              IX-95    
                           A  4795    ;alphaMask                            IX-91    
                           A  4796    ;blueMask                             IX-87    
                           A  4797    ;greenMask                            IX-83    
                           A  4798    ;non_pad_row                          IX-79    
                           A  4799    ;non_pad_row                          IX-76    
                           A  4800    ;image_buffer                         IX-73    
                           A  4801    ;image_start                          IX-70    
                           A  4802    ;non_pad_row                          IX-66    
                           A  4803    ;color_table_size                     IX-63    
                           A  4804    ;index                                IX-59    
                           A  4805    ;b                                    IX-58    
                           A  4806    ;g                                    IX-57    
                           A  4807    ;r                                    IX-56    
                           A  4808    ;fo                                   IX-55    
                           A  4809    ;biSize                               IX-52    
                           A  4810    ;O_17                                 IX-48    
                           A  4811    ;O_15                                 IX-44    
                           A  4812    ;x                                    IX-40    
                           A  4813    ;row_padding                          IX-36    
                           A  4814    ;src                                  IX-32    
                           A  4815    ;row_rgba2222                         IX-29    
                           A  4816    ;return_info                          IX-26    
                           A  4817    ;height                               IX-21    
                           A  4818    ;i                                    IX-17    
                           A  4819    ;bit_depth                            IX-13    
                           A  4820    ;width                                 IX-9    
                           A  4821    ;y                                     IX-5    
                           A  4822    ;file                                  IX-1    
                           A  4823    ;slot                                 IX+12    
                           A  4824    ;filename                              IX+9    
                           A  4825    
                           A  4826    
                           A  4827    ; Stack Frame Size: 1207 (bytes)
                           A  4828    ;       Spill Code: -3 (instruction)
                           A  4829    
                           A  4830    
                           A  4831    .ENDFUNC "load_bmp_big",436,"_load_bmp_big"
                           A  4832    	SEGMENT STRSECT
0B30BA                     A  4833    L__45:
0B30BA 4572726F 723A2063   A  4834    	DB	"Error: could not open "
0B30C2 6F756C64 206E6F74 
0B30CA 206F7065 6E20 
0B30D0 00                  A  4835    	DB	0
0B30D1                     A  4836    L__46:
0B30D1 2E                  A  4837    	DB	"."
0B30D2 0D0A00              A  4838    	DB	13,10,0
0B30D5                     A  4839    L__52:
0B30D5 0000FF00 00         A  4840    	DB	0,0,-1,0,0
0B30DA                     A  4841    L__54:
0B30DA 00FF0000 00         A  4842    	DB	0,-1,0,0,0
0B30DF                     A  4843    L__56:
0B30DF FF000000 00         A  4844    	DB	-1,0,0,0,0
0B30E4                     A  4845    L__58:
0B30E4 000000FF 00         A  4846    	DB	0,0,0,-1,0
0B30E9                     A  4847    L__60:
0B30E9 4572726F 723A2050   A  4848    	DB	"Error: Pixel format is NOT standard BG
0B30F1 6978656C 20666F72 
0B30F9 6D617420 6973204E 
0B3101 4F542073 74616E64 
0B3109 61726420 42475241 
0B3111 2E204578 6974696E 
0B3119 672E 
0B311B 0A00                A  4849    	DB	10,0
0B311D                     A  4850    L__66:
0B311D 4572726F 723A2075   A  4851    	DB	"Error: unsupported bit depth (not 8, 2
0B3125 6E737570 706F7274 
0B312D 65642062 69742064 
0B3135 65707468 20286E6F 
0B313D 7420382C 20323420 
0B3145 6F722033 322D6269 
0B314D 74292E 
0B3150 0A00                A  4852    	DB	10,0
                           A  4853    	SEGMENT CODE
                           A  4854    ;  437	
                           A  4855    ;  438	uint16_t strtou16(const char *str) {
0B14A2                     A  4856    _strtou16:
                           A  4857    .DEFINE "_strtou16"
                           A  4858    
                           A  4859    .VALUE _strtou16
                           A  4860    
                           A  4861    .CLASS 2
                           A  4862    
                           A  4863    .TYPE 77
                           A  4864    
                           A  4865    .ENDEF
                           A  4866    
                           A  4867    .BEGFUNC "strtou16",438,"_strtou16"
                           A  4868    
                           A  4869    .LINE 438
                           A  4870    
                           A  4871    .DEFINE "str"
                           A  4872    
                           A  4873    .CLASS 65
                           A  4874    
                           A  4875    .VALUE 6
                           A  4876    
                           A  4877    .TYPE 194
                           A  4878    
                           A  4879    .ENDEF
                           A  4880    
                           A  4881    .DEFINE "result"
                           A  4882    
                           A  4883    .CLASS 65
                           A  4884    
                           A  4885    .VALUE -2
                           A  4886    
                           A  4887    .TYPE 13
                           A  4888    
                           A  4889    .ENDEF
                           A  4890    
                           A  4891    .DEFINE "digit"
                           A  4892    
                           A  4893    .CLASS 65
                           A  4894    
                           A  4895    .VALUE -4
                           A  4896    
                           A  4897    .TYPE 13
                           A  4898    
                           A  4899    .ENDEF
                           A  4900    
0B14A2 DDE5                A  4901    	PUSH	IX
0B14A4 DD210000 00         A  4902    	LD	IX,0
0B14A9 DD39                A  4903    	ADD	IX,SP
0B14AB C5                  A  4904    	PUSH	BC
0B14AC 3B                  A  4905    	DEC	SP
                           A  4906    ;  439	    uint16_t result = 0;
                           A  4907    .LINE 439
                           A  4908    
0B14AD DD36FE00            A  4909    	LD	(IX+%FFFFFFFE),%0
0B14B1 DD36FF00            A  4910    	LD	(IX+%FFFFFFFF),%0
                           A  4911    ;  440	    const uint16_t maxDiv10 = 6553;  //
                           A  4912    ;  441	    const uint16_t maxMod10 = 5;     //
                           A  4913    ;  442	
                           A  4914    ;  443	    while (*str == ' ' || *str == '\t' 
                           A  4915    .LINE 443
                           A  4916    
0B14B5 18 07               A  4917    	JR	L_130
0B14B7                     A  4918    L_131:
                           A  4919    ;  444	        str++;
                           A  4920    .LINE 444
                           A  4921    
0B14B7 DD0706              A  4922    	LD	BC,(IX+%6)
0B14BA 03                  A  4923    	INC	BC
0B14BB DD0F06              A  4924    	LD	(IX+%6),BC
                           A  4925    ;  445	    }
0B14BE                     A  4926    L_130:
                           A  4927    .LINE 445
                           A  4928    
0B14BE DD2706              A  4929    	LD	HL,(IX+%6)
0B14C1 7E                  A  4930    	LD	A,(HL)
0B14C2 47                  A  4931    	LD	B,A
0B14C3 17ED62              A  4932    	SEXT	HL
0B14C6 68                  A  4933    	LD	L,B
0B14C7 01200000            A  4934    	LD	BC,32
0B14CB B7                  A  4935    	OR	A,A
0B14CC ED42                A  4936    	SBC	HL,BC
0B14CE 28 E7               A  4937    	JR	Z,L_131
0B14D0 DD2706              A  4938    	LD	HL,(IX+%6)
0B14D3 7E                  A  4939    	LD	A,(HL)
0B14D4 47                  A  4940    	LD	B,A
0B14D5 17ED62              A  4941    	SEXT	HL
0B14D8 68                  A  4942    	LD	L,B
0B14D9 01090000            A  4943    	LD	BC,9
0B14DD B7                  A  4944    	OR	A,A
0B14DE ED42                A  4945    	SBC	HL,BC
0B14E0 28 D5               A  4946    	JR	Z,L_131
0B14E2 DD2706              A  4947    	LD	HL,(IX+%6)
0B14E5 7E                  A  4948    	LD	A,(HL)
0B14E6 47                  A  4949    	LD	B,A
0B14E7 17ED62              A  4950    	SEXT	HL
0B14EA 68                  A  4951    	LD	L,B
0B14EB 010A0000            A  4952    	LD	BC,10
0B14EF B7                  A  4953    	OR	A,A
0B14F0 ED42                A  4954    	SBC	HL,BC
0B14F2 28 C3               A  4955    	JR	Z,L_131
                           A  4956    ;  446	
                           A  4957    ;  447	    while (*str >= '0' && *str <= '9') 
                           A  4958    .LINE 447
                           A  4959    
0B14F4 18 5F               A  4960    	JR	L_138
0B14F6                     A  4961    L_139:
                           A  4962    ;  448	        uint16_t digit = *str - '0';
                           A  4963    .LINE 448
                           A  4964    
0B14F6 DD2706              A  4965    	LD	HL,(IX+%6)
0B14F9 7E                  A  4966    	LD	A,(HL)
0B14FA 47                  A  4967    	LD	B,A
0B14FB 17ED62              A  4968    	SEXT	HL
0B14FE 68                  A  4969    	LD	L,B
0B14FF E5FDE1              A  4970    	LD	IY,HL
0B1502 ED23D0              A  4971    	LEA	HL,IY+%FFFFFFD0
0B1505 DD75FC              A  4972    	LD	(IX+%FFFFFFFC),L
0B1508 DD74FD              A  4973    	LD	(IX+%FFFFFFFD),H
                           A  4974    ;  449	        if (result > maxDiv10 || (resul
                           A  4975    .LINE 449
                           A  4976    
0B150B DD07FE              A  4977    	LD	BC,(IX+%FFFFFFFE)
0B150E 49219919            A  4978    	LD.LIS	HL,6553
0B1512 B7                  A  4979    	OR	A,A
0B1513 40ED42              A  4980    	SBC.SIS	HL,BC
0B1516 38 1A               A  4981    	JR	C,L_135
0B1518 49019919            A  4982    	LD.LIS	BC,6553
0B151C DD27FE              A  4983    	LD	HL,(IX+%FFFFFFFE)
0B151F B7                  A  4984    	OR	A,A
0B1520 40ED42              A  4985    	SBC.SIS	HL,BC
0B1523 20 13               A  4986    	JR	NZ,L_136
0B1525 DD07FC              A  4987    	LD	BC,(IX+%FFFFFFFC)
0B1528 49210500            A  4988    	LD.LIS	HL,5
0B152C B7                  A  4989    	OR	A,A
0B152D 40ED42              A  4990    	SBC.SIS	HL,BC
0B1530 30 06               A  4991    	JR	NC,L_136
0B1532                     A  4992    L_135:
                           A  4993    ;  450	            return 65535;
                           A  4994    .LINE 450
                           A  4995    
0B1532 4921FFFF            A  4996    	LD.LIS	HL,65535
0B1536 18 5E               A  4997    	JR	L_142
                           A  4998    ;  451	        }
0B1538                     A  4999    L_136:
                           A  5000    .LINE 451
                           A  5001    
                           A  5002    ;  452	        result = result * 10 + digit;
                           A  5003    .LINE 452
                           A  5004    
0B1538 49210A00            A  5005    	LD.LIS	HL,10
0B153C DD07FE              A  5006    	LD	BC,(IX+%FFFFFFFE)
0B153F CD 63 30 0B         A  5007    	CALL	__smulu
0B1543 DD07FC              A  5008    	LD	BC,(IX+%FFFFFFFC)
0B1546 4009                A  5009    	ADD.SIS	HL,BC
0B1548 DD75FE              A  5010    	LD	(IX+%FFFFFFFE),L
0B154B DD74FF              A  5011    	LD	(IX+%FFFFFFFF),H
                           A  5012    ;  453	        str++;
                           A  5013    .LINE 453
                           A  5014    
0B154E DD0706              A  5015    	LD	BC,(IX+%6)
0B1551 03                  A  5016    	INC	BC
0B1552 DD0F06              A  5017    	LD	(IX+%6),BC
                           A  5018    ;  454	    }
0B1555                     A  5019    L_138:
                           A  5020    .LINE 454
                           A  5021    
0B1555 DD2706              A  5022    	LD	HL,(IX+%6)
0B1558 7E                  A  5023    	LD	A,(HL)
0B1559 47                  A  5024    	LD	B,A
0B155A 17ED62              A  5025    	SEXT	HL
0B155D 68                  A  5026    	LD	L,B
0B155E 01300000            A  5027    	LD	BC,48
0B1562 B7                  A  5028    	OR	A,A
0B1563 ED42                A  5029    	SBC	HL,BC
0B1565 FA 6F 15 0B         A  5030    	JP	M,L__93
0B1569 EA 93 15 0B         A  5031    	JP	PE,L_141
0B156D 18 04               A  5032    	JR	L__94
0B156F                     A  5033    L__93:
0B156F E2 93 15 0B         A  5034    	JP	PO,L_141
0B1573                     A  5035    L__94:
0B1573 DD2706              A  5036    	LD	HL,(IX+%6)
0B1576 7E                  A  5037    	LD	A,(HL)
0B1577 47                  A  5038    	LD	B,A
0B1578 17ED62              A  5039    	SEXT	HL
0B157B 68                  A  5040    	LD	L,B
0B157C E5C1                A  5041    	LD	BC,HL
0B157E 21390000            A  5042    	LD	HL,57
0B1582 B7                  A  5043    	OR	A,A
0B1583 ED42                A  5044    	SBC	HL,BC
0B1585 F2 8F 15 0B         A  5045    	JP	P,L__95
0B1589 EA F6 14 0B         A  5046    	JP	PE,L_139
0B158D 18 04               A  5047    	JR	L__96
0B158F                     A  5048    L__95:
0B158F E2 F6 14 0B         A  5049    	JP	PO,L_139
0B1593                     A  5050    L__96:
0B1593                     A  5051    L_141:
                           A  5052    ;  455	
                           A  5053    ;  456	    return result;
                           A  5054    .LINE 456
                           A  5055    
0B1593 DD27FE              A  5056    	LD	HL,(IX+%FFFFFFFE)
                           A  5057    ;  457	}
0B1596                     A  5058    L_142:
                           A  5059    .LINE 457
                           A  5060    
0B1596 DDF9                A  5061    	LD	SP,IX
0B1598 DDE1                A  5062    	POP	IX
0B159A C9                  A  5063    	RET	
                           A  5064    
                           A  5065    
                           A  5066    ;**************************** _strtou16 *******
                           A  5067    ;Name                         Addr/Register   S
                           A  5068    ;digit                                 IX-4    
                           A  5069    ;result                                IX-2    
                           A  5070    ;str                                   IX+6    
                           A  5071    
                           A  5072    
                           A  5073    ; Stack Frame Size: 13 (bytes)
                           A  5074    ;       Spill Code: -3 (instruction)
                           A  5075    
                           A  5076    
                           A  5077    .ENDFUNC "strtou16",457,"_strtou16"
                           A  5078    ;  458	
                           A  5079    ;  459	uint8_t strtou8(const char *str) {
0B159B                     A  5080    _strtou8:
                           A  5081    .DEFINE "_strtou8"
                           A  5082    
                           A  5083    .VALUE _strtou8
                           A  5084    
                           A  5085    .CLASS 2
                           A  5086    
                           A  5087    .TYPE 76
                           A  5088    
                           A  5089    .ENDEF
                           A  5090    
                           A  5091    .BEGFUNC "strtou8",459,"_strtou8"
                           A  5092    
                           A  5093    .LINE 459
                           A  5094    
                           A  5095    .DEFINE "str"
                           A  5096    
                           A  5097    .CLASS 65
                           A  5098    
                           A  5099    .VALUE 6
                           A  5100    
                           A  5101    .TYPE 194
                           A  5102    
                           A  5103    .ENDEF
                           A  5104    
                           A  5105    .DEFINE "result"
                           A  5106    
                           A  5107    .CLASS 65
                           A  5108    
                           A  5109    .VALUE -1
                           A  5110    
                           A  5111    .TYPE 12
                           A  5112    
                           A  5113    .ENDEF
                           A  5114    
                           A  5115    .DEFINE "digit"
                           A  5116    
                           A  5117    .CLASS 65
                           A  5118    
                           A  5119    .VALUE -2
                           A  5120    
                           A  5121    .TYPE 12
                           A  5122    
                           A  5123    .ENDEF
                           A  5124    
0B159B DDE5                A  5125    	PUSH	IX
0B159D DD210000 00         A  5126    	LD	IX,0
0B15A2 DD39                A  5127    	ADD	IX,SP
0B15A4 3B                  A  5128    	DEC	SP
0B15A5 3B                  A  5129    	DEC	SP
                           A  5130    ;  460	    uint8_t result = 0;
                           A  5131    .LINE 460
                           A  5132    
0B15A6 DD36FF00            A  5133    	LD	(IX+%FFFFFFFF),%0
                           A  5134    ;  461	    const uint8_t maxDiv10 = 255 / 10;
                           A  5135    ;  462	    const uint8_t maxMod10 = 255 % 10;
                           A  5136    ;  463	
                           A  5137    ;  464	    while (*str == ' ' || *str == '\t' 
                           A  5138    .LINE 464
                           A  5139    
0B15AA 18 07               A  5140    	JR	L_146
0B15AC                     A  5141    L_147:
                           A  5142    ;  465	        str++;
                           A  5143    .LINE 465
                           A  5144    
0B15AC DD0706              A  5145    	LD	BC,(IX+%6)
0B15AF 03                  A  5146    	INC	BC
0B15B0 DD0F06              A  5147    	LD	(IX+%6),BC
                           A  5148    ;  466	    }
0B15B3                     A  5149    L_146:
                           A  5150    .LINE 466
                           A  5151    
0B15B3 DD2706              A  5152    	LD	HL,(IX+%6)
0B15B6 7E                  A  5153    	LD	A,(HL)
0B15B7 47                  A  5154    	LD	B,A
0B15B8 17ED62              A  5155    	SEXT	HL
0B15BB 68                  A  5156    	LD	L,B
0B15BC 01200000            A  5157    	LD	BC,32
0B15C0 B7                  A  5158    	OR	A,A
0B15C1 ED42                A  5159    	SBC	HL,BC
0B15C3 28 E7               A  5160    	JR	Z,L_147
0B15C5 DD2706              A  5161    	LD	HL,(IX+%6)
0B15C8 7E                  A  5162    	LD	A,(HL)
0B15C9 47                  A  5163    	LD	B,A
0B15CA 17ED62              A  5164    	SEXT	HL
0B15CD 68                  A  5165    	LD	L,B
0B15CE 01090000            A  5166    	LD	BC,9
0B15D2 B7                  A  5167    	OR	A,A
0B15D3 ED42                A  5168    	SBC	HL,BC
0B15D5 28 D5               A  5169    	JR	Z,L_147
0B15D7 DD2706              A  5170    	LD	HL,(IX+%6)
0B15DA 7E                  A  5171    	LD	A,(HL)
0B15DB 47                  A  5172    	LD	B,A
0B15DC 17ED62              A  5173    	SEXT	HL
0B15DF 68                  A  5174    	LD	L,B
0B15E0 010A0000            A  5175    	LD	BC,10
0B15E4 B7                  A  5176    	OR	A,A
0B15E5 ED42                A  5177    	SBC	HL,BC
0B15E7 28 C3               A  5178    	JR	Z,L_147
                           A  5179    ;  467	
                           A  5180    ;  468	    while (*str >= '0' && *str <= '9') 
                           A  5181    .LINE 468
                           A  5182    
0B15E9 18 37               A  5183    	JR	L_154
0B15EB                     A  5184    L_155:
                           A  5185    ;  469	        uint8_t digit = *str - '0';
                           A  5186    .LINE 469
                           A  5187    
0B15EB DD2706              A  5188    	LD	HL,(IX+%6)
0B15EE 7E                  A  5189    	LD	A,(HL)
0B15EF D630                A  5190    	SUB	A,%30
0B15F1 DD77FE              A  5191    	LD	(IX+%FFFFFFFE),A
                           A  5192    ;  470	        if (result > maxDiv10 || (resul
                           A  5193    .LINE 470
                           A  5194    
0B15F4 3E19                A  5195    	LD	A,%19
0B15F6 DDBEFF              A  5196    	CP	A,(IX+%FFFFFFFF)
0B15F9 38 0E               A  5197    	JR	C,L_151
0B15FB DD7EFF              A  5198    	LD	A,(IX+%FFFFFFFF)
0B15FE FE19                A  5199    	CP	A,%19
0B1600 20 0B               A  5200    	JR	NZ,L_152
0B1602 3E05                A  5201    	LD	A,%5
0B1604 DDBEFE              A  5202    	CP	A,(IX+%FFFFFFFE)
0B1607 30 04               A  5203    	JR	NC,L_152
0B1609                     A  5204    L_151:
                           A  5205    ;  471	            return 255;
                           A  5206    .LINE 471
                           A  5207    
0B1609 3EFF                A  5208    	LD	A,%FF
0B160B 18 56               A  5209    	JR	L_158
                           A  5210    ;  472	        }
0B160D                     A  5211    L_152:
                           A  5212    .LINE 472
                           A  5213    
                           A  5214    ;  473	        result = result * 10 + digit;
                           A  5215    .LINE 473
                           A  5216    
0B160D 060A                A  5217    	LD	B,%A
0B160F DD4EFF              A  5218    	LD	C,(IX+%FFFFFFFF)
0B1612 ED4C                A  5219    	MLT	BC
0B1614 79                  A  5220    	LD	A,C
0B1615 DD86FE              A  5221    	ADD	A,(IX+%FFFFFFFE)
0B1618 DD77FF              A  5222    	LD	(IX+%FFFFFFFF),A
                           A  5223    ;  474	        str++;
                           A  5224    .LINE 474
                           A  5225    
0B161B DD0706              A  5226    	LD	BC,(IX+%6)
0B161E 03                  A  5227    	INC	BC
0B161F DD0F06              A  5228    	LD	(IX+%6),BC
                           A  5229    ;  475	    }
0B1622                     A  5230    L_154:
                           A  5231    .LINE 475
                           A  5232    
0B1622 DD2706              A  5233    	LD	HL,(IX+%6)
0B1625 7E                  A  5234    	LD	A,(HL)
0B1626 47                  A  5235    	LD	B,A
0B1627 17ED62              A  5236    	SEXT	HL
0B162A 68                  A  5237    	LD	L,B
0B162B 01300000            A  5238    	LD	BC,48
0B162F B7                  A  5239    	OR	A,A
0B1630 ED42                A  5240    	SBC	HL,BC
0B1632 FA 3C 16 0B         A  5241    	JP	M,L__106
0B1636 EA 60 16 0B         A  5242    	JP	PE,L_157
0B163A 18 04               A  5243    	JR	L__107
0B163C                     A  5244    L__106:
0B163C E2 60 16 0B         A  5245    	JP	PO,L_157
0B1640                     A  5246    L__107:
0B1640 DD2706              A  5247    	LD	HL,(IX+%6)
0B1643 7E                  A  5248    	LD	A,(HL)
0B1644 47                  A  5249    	LD	B,A
0B1645 17ED62              A  5250    	SEXT	HL
0B1648 68                  A  5251    	LD	L,B
0B1649 E5C1                A  5252    	LD	BC,HL
0B164B 21390000            A  5253    	LD	HL,57
0B164F B7                  A  5254    	OR	A,A
0B1650 ED42                A  5255    	SBC	HL,BC
0B1652 F2 5C 16 0B         A  5256    	JP	P,L__108
0B1656 EA EB 15 0B         A  5257    	JP	PE,L_155
0B165A 18 04               A  5258    	JR	L__109
0B165C                     A  5259    L__108:
0B165C E2 EB 15 0B         A  5260    	JP	PO,L_155
0B1660                     A  5261    L__109:
0B1660                     A  5262    L_157:
                           A  5263    ;  476	
                           A  5264    ;  477	    return result;
                           A  5265    .LINE 477
                           A  5266    
0B1660 DD7EFF              A  5267    	LD	A,(IX+%FFFFFFFF)
                           A  5268    ;  478	}
0B1663                     A  5269    L_158:
                           A  5270    .LINE 478
                           A  5271    
0B1663 DDF9                A  5272    	LD	SP,IX
0B1665 DDE1                A  5273    	POP	IX
0B1667 C9                  A  5274    	RET	
                           A  5275    
                           A  5276    
                           A  5277    ;**************************** _strtou8 ********
                           A  5278    ;Name                         Addr/Register   S
                           A  5279    ;digit                                 IX-2    
                           A  5280    ;result                                IX-1    
                           A  5281    ;str                                   IX+6    
                           A  5282    
                           A  5283    
                           A  5284    ; Stack Frame Size: 11 (bytes)
                           A  5285    ;       Spill Code: -3 (instruction)
                           A  5286    
                           A  5287    
                           A  5288    .ENDFUNC "strtou8",478,"_strtou8"
                           A  5289    ;  479	
                           A  5290    ;  480	uint24_t strtou24(const char *str) {
0B1668                     A  5291    _strtou24:
                           A  5292    .DEFINE "_strtou24"
                           A  5293    
                           A  5294    .VALUE _strtou24
                           A  5295    
                           A  5296    .CLASS 2
                           A  5297    
                           A  5298    .TYPE 78
                           A  5299    
                           A  5300    .ENDEF
                           A  5301    
                           A  5302    .BEGFUNC "strtou24",480,"_strtou24"
                           A  5303    
                           A  5304    .LINE 480
                           A  5305    
                           A  5306    .DEFINE "str"
                           A  5307    
                           A  5308    .CLASS 65
                           A  5309    
                           A  5310    .VALUE 6
                           A  5311    
                           A  5312    .TYPE 194
                           A  5313    
                           A  5314    .ENDEF
                           A  5315    
                           A  5316    .DEFINE "result"
                           A  5317    
                           A  5318    .CLASS 65
                           A  5319    
                           A  5320    .VALUE -4
                           A  5321    
                           A  5322    .TYPE 15
                           A  5323    
                           A  5324    .ENDEF
                           A  5325    
                           A  5326    .DEFINE "digit"
                           A  5327    
                           A  5328    .CLASS 65
                           A  5329    
                           A  5330    .VALUE -8
                           A  5331    
                           A  5332    .TYPE 15
                           A  5333    
                           A  5334    .ENDEF
                           A  5335    
0B1668 DDE5                A  5336    	PUSH	IX
0B166A DD210000 00         A  5337    	LD	IX,0
0B166F DD39                A  5338    	ADD	IX,SP
0B1671 C5                  A  5339    	PUSH	BC
0B1672 C5                  A  5340    	PUSH	BC
0B1673 3B                  A  5341    	DEC	SP
0B1674 3B                  A  5342    	DEC	SP
                           A  5343    ;  481	    uint32_t result = 0;
                           A  5344    .LINE 481
                           A  5345    
0B1675 01000000            A  5346    	LD	BC,0
0B1679 AF                  A  5347    	XOR	A,A
0B167A DD0FFC              A  5348    	LD	(IX+%FFFFFFFC),BC
0B167D DD77FF              A  5349    	LD	(IX+%FFFFFFFF),A
                           A  5350    ;  482	    const uint32_t maxDiv10 = 1677721;
                           A  5351    ;  483	    const uint32_t maxMod10 = 5;
                           A  5352    ;  484	
                           A  5353    ;  485	    while (*str == ' ' || *str == '\t' 
                           A  5354    .LINE 485
                           A  5355    
0B1680 18 07               A  5356    	JR	L_162
0B1682                     A  5357    L_163:
                           A  5358    ;  486	        str++;
                           A  5359    .LINE 486
                           A  5360    
0B1682 DD0706              A  5361    	LD	BC,(IX+%6)
0B1685 03                  A  5362    	INC	BC
0B1686 DD0F06              A  5363    	LD	(IX+%6),BC
                           A  5364    ;  487	    }
0B1689                     A  5365    L_162:
                           A  5366    .LINE 487
                           A  5367    
0B1689 DD2706              A  5368    	LD	HL,(IX+%6)
0B168C 7E                  A  5369    	LD	A,(HL)
0B168D 47                  A  5370    	LD	B,A
0B168E 17ED62              A  5371    	SEXT	HL
0B1691 68                  A  5372    	LD	L,B
0B1692 01200000            A  5373    	LD	BC,32
0B1696 B7                  A  5374    	OR	A,A
0B1697 ED42                A  5375    	SBC	HL,BC
0B1699 28 E7               A  5376    	JR	Z,L_163
0B169B DD2706              A  5377    	LD	HL,(IX+%6)
0B169E 7E                  A  5378    	LD	A,(HL)
0B169F 47                  A  5379    	LD	B,A
0B16A0 17ED62              A  5380    	SEXT	HL
0B16A3 68                  A  5381    	LD	L,B
0B16A4 01090000            A  5382    	LD	BC,9
0B16A8 B7                  A  5383    	OR	A,A
0B16A9 ED42                A  5384    	SBC	HL,BC
0B16AB 28 D5               A  5385    	JR	Z,L_163
0B16AD DD2706              A  5386    	LD	HL,(IX+%6)
0B16B0 7E                  A  5387    	LD	A,(HL)
0B16B1 47                  A  5388    	LD	B,A
0B16B2 17ED62              A  5389    	SEXT	HL
0B16B5 68                  A  5390    	LD	L,B
0B16B6 010A0000            A  5391    	LD	BC,10
0B16BA B7                  A  5392    	OR	A,A
0B16BB ED42                A  5393    	SBC	HL,BC
0B16BD 28 C3               A  5394    	JR	Z,L_163
                           A  5395    ;  488		
                           A  5396    ;  489	    while (*str >= '0' && *str <= '9') 
                           A  5397    .LINE 489
                           A  5398    
0B16BF 18 7A               A  5399    	JR	L_170
0B16C1                     A  5400    L_171:
                           A  5401    ;  490	        uint32_t digit = *str - '0';
                           A  5402    .LINE 490
                           A  5403    
0B16C1 DD2706              A  5404    	LD	HL,(IX+%6)
0B16C4 7E                  A  5405    	LD	A,(HL)
0B16C5 47                  A  5406    	LD	B,A
0B16C6 17ED62              A  5407    	SEXT	HL
0B16C9 68                  A  5408    	LD	L,B
0B16CA 5C                  A  5409    	LD	E,H
0B16CB 01300000            A  5410    	LD	BC,48
0B16CF AF                  A  5411    	XOR	A,A
0B16D0 CD 86 2E 0B         A  5412    	CALL	__lsub
0B16D4 DD2FF8              A  5413    	LD	(IX+%FFFFFFF8),HL
0B16D7 DD73FB              A  5414    	LD	(IX+%FFFFFFFB),E
                           A  5415    ;  491	        if (result > maxDiv10 || (resul
                           A  5416    .LINE 491
                           A  5417    
0B16DA 21999919            A  5418    	LD	HL,1677721
0B16DE 1E00                A  5419    	LD	E,%0
0B16E0 DD07FC              A  5420    	LD	BC,(IX+%FFFFFFFC)
0B16E3 DD7EFF              A  5421    	LD	A,(IX+%FFFFFFFF)
0B16E6 CD 70 2F 0B         A  5422    	CALL	__lcmpu
0B16EA 38 23               A  5423    	JR	C,L_167
0B16EC DD27FC              A  5424    	LD	HL,(IX+%FFFFFFFC)
0B16EF DD5EFF              A  5425    	LD	E,(IX+%FFFFFFFF)
0B16F2 01999919            A  5426    	LD	BC,1677721
0B16F6 AF                  A  5427    	XOR	A,A
0B16F7 CD 70 2F 0B         A  5428    	CALL	__lcmpu
0B16FB 20 18               A  5429    	JR	NZ,L_168
0B16FD 21050000            A  5430    	LD	HL,5
0B1701 1E00                A  5431    	LD	E,%0
0B1703 DD07F8              A  5432    	LD	BC,(IX+%FFFFFFF8)
0B1706 DD7EFB              A  5433    	LD	A,(IX+%FFFFFFFB)
0B1709 CD 70 2F 0B         A  5434    	CALL	__lcmpu
0B170D 30 06               A  5435    	JR	NC,L_168
0B170F                     A  5436    L_167:
                           A  5437    ;  492	            return 16777215;
                           A  5438    .LINE 492
                           A  5439    
0B170F 21FFFFFF            A  5440    	LD	HL,16777215
0B1713 18 67               A  5441    	JR	L_174
                           A  5442    ;  493	        }
0B1715                     A  5443    L_168:
                           A  5444    .LINE 493
                           A  5445    
                           A  5446    ;  494	        result = result * 10 + digit;
                           A  5447    .LINE 494
                           A  5448    
0B1715 DD27FC              A  5449    	LD	HL,(IX+%FFFFFFFC)
0B1718 DD5EFF              A  5450    	LD	E,(IX+%FFFFFFFF)
0B171B 010A0000            A  5451    	LD	BC,10
0B171F AF                  A  5452    	XOR	A,A
0B1720 CD EA 2F 0B         A  5453    	CALL	__lmulu
0B1724 DD07F8              A  5454    	LD	BC,(IX+%FFFFFFF8)
0B1727 DD7EFB              A  5455    	LD	A,(IX+%FFFFFFFB)
0B172A CD 86 29 0B         A  5456    	CALL	__ladd
0B172E DD2FFC              A  5457    	LD	(IX+%FFFFFFFC),HL
0B1731 DD73FF              A  5458    	LD	(IX+%FFFFFFFF),E
                           A  5459    ;  495	        str++;
                           A  5460    .LINE 495
                           A  5461    
0B1734 DD0706              A  5462    	LD	BC,(IX+%6)
0B1737 03                  A  5463    	INC	BC
0B1738 DD0F06              A  5464    	LD	(IX+%6),BC
                           A  5465    ;  496	    }
0B173B                     A  5466    L_170:
                           A  5467    .LINE 496
                           A  5468    
0B173B DD2706              A  5469    	LD	HL,(IX+%6)
0B173E 7E                  A  5470    	LD	A,(HL)
0B173F 47                  A  5471    	LD	B,A
0B1740 17ED62              A  5472    	SEXT	HL
0B1743 68                  A  5473    	LD	L,B
0B1744 01300000            A  5474    	LD	BC,48
0B1748 B7                  A  5475    	OR	A,A
0B1749 ED42                A  5476    	SBC	HL,BC
0B174B FA 55 17 0B         A  5477    	JP	M,L__119
0B174F EA 79 17 0B         A  5478    	JP	PE,L_173
0B1753 18 04               A  5479    	JR	L__120
0B1755                     A  5480    L__119:
0B1755 E2 79 17 0B         A  5481    	JP	PO,L_173
0B1759                     A  5482    L__120:
0B1759 DD2706              A  5483    	LD	HL,(IX+%6)
0B175C 7E                  A  5484    	LD	A,(HL)
0B175D 47                  A  5485    	LD	B,A
0B175E 17ED62              A  5486    	SEXT	HL
0B1761 68                  A  5487    	LD	L,B
0B1762 E5C1                A  5488    	LD	BC,HL
0B1764 21390000            A  5489    	LD	HL,57
0B1768 B7                  A  5490    	OR	A,A
0B1769 ED42                A  5491    	SBC	HL,BC
0B176B F2 75 17 0B         A  5492    	JP	P,L__121
0B176F EA C1 16 0B         A  5493    	JP	PE,L_171
0B1773 18 04               A  5494    	JR	L__122
0B1775                     A  5495    L__121:
0B1775 E2 C1 16 0B         A  5496    	JP	PO,L_171
0B1779                     A  5497    L__122:
0B1779                     A  5498    L_173:
                           A  5499    ;  497	
                           A  5500    ;  498	    return result;
                           A  5501    .LINE 498
                           A  5502    
0B1779 DD27FC              A  5503    	LD	HL,(IX+%FFFFFFFC)
                           A  5504    ;  499	}
0B177C                     A  5505    L_174:
                           A  5506    .LINE 499
                           A  5507    
0B177C DDF9                A  5508    	LD	SP,IX
0B177E DDE1                A  5509    	POP	IX
0B1780 C9                  A  5510    	RET	
                           A  5511    
                           A  5512    
                           A  5513    ;**************************** _strtou24 *******
                           A  5514    ;Name                         Addr/Register   S
                           A  5515    ;digit                                 IX-8    
                           A  5516    ;result                                IX-4    
                           A  5517    ;str                                   IX+6    
                           A  5518    
                           A  5519    
                           A  5520    ; Stack Frame Size: 17 (bytes)
                           A  5521    ;       Spill Code: -3 (instruction)
                           A  5522    
                           A  5523    
                           A  5524    .ENDFUNC "strtou24",499,"_strtou24"
                           A  5525    ;  500	
                           A  5526    ;  501	int main(int argc, char * argv[]) {
0B1781                     A  5527    _main:
                           A  5528    .DEFINE "_main"
                           A  5529    
                           A  5530    .VALUE _main
                           A  5531    
                           A  5532    .CLASS 2
                           A  5533    
                           A  5534    .TYPE 68
                           A  5535    
                           A  5536    .ENDEF
                           A  5537    
                           A  5538    .BEGFUNC "main",501,"_main"
                           A  5539    
                           A  5540    .LINE 501
                           A  5541    
                           A  5542    .DEFINE "argc"
                           A  5543    
                           A  5544    .CLASS 65
                           A  5545    
                           A  5546    .VALUE 6
                           A  5547    
                           A  5548    .TYPE 4
                           A  5549    
                           A  5550    .ENDEF
                           A  5551    
                           A  5552    .DEFINE "argv"
                           A  5553    
                           A  5554    .CLASS 65
                           A  5555    
                           A  5556    .VALUE 9
                           A  5557    
                           A  5558    .TYPE 290
                           A  5559    
                           A  5560    .ENDEF
                           A  5561    
                           A  5562    .DEFINE "bitmap_slot"
                           A  5563    
                           A  5564    .CLASS 65
                           A  5565    
                           A  5566    .VALUE -1
                           A  5567    
                           A  5568    .TYPE 12
                           A  5569    
                           A  5570    .ENDEF
                           A  5571    
                           A  5572    .DEFINE "x"
                           A  5573    
                           A  5574    .CLASS 65
                           A  5575    
                           A  5576    .VALUE -7
                           A  5577    
                           A  5578    .TYPE 14
                           A  5579    
                           A  5580    .ENDEF
                           A  5581    
                           A  5582    .DEFINE "bmp"
                           A  5583    
                           A  5584    .CLASS 65
                           A  5585    
                           A  5586    .VALUE -12
                           A  5587    
                           A  5588    .TAG "NONAME6"
                           A  5589    
                           A  5590    .TYPE 8
                           A  5591    
                           A  5592    .ENDEF
                           A  5593    
                           A  5594    .DEFINE "y"
                           A  5595    
                           A  5596    .CLASS 65
                           A  5597    
                           A  5598    .VALUE -18
                           A  5599    
                           A  5600    .TYPE 14
                           A  5601    
                           A  5602    .ENDEF
                           A  5603    
0B1781 DDE5                A  5604    	PUSH	IX
0B1783 DD210000 00         A  5605    	LD	IX,0
0B1788 DD39                A  5606    	ADD	IX,SP
0B178A ED22DE              A  5607    	LEA	HL,IX+%FFFFFFDE
0B178D F9                  A  5608    	LD	SP,HL
                           A  5609    ;  502	
                           A  5610    ;  503	    uint24_t x, y;
                           A  5611    ;  504		uint8_t bitmap_slot = 0;
                           A  5612    .LINE 504
                           A  5613    
0B178E DD36FF00            A  5614    	LD	(IX+%FFFFFFFF),%0
                           A  5615    ;  505		bmp_info bmp;
                           A  5616    ;  506		
                           A  5617    ;  507		//Args = 0:binary name, 1:filname, 
                           A  5618    ;  508		
                           A  5619    ;  509		if ((argc < 2) || (argc == 4) || (a
                           A  5620    .LINE 509
                           A  5621    
0B1792 01020000            A  5622    	LD	BC,2
0B1796 DD2706              A  5623    	LD	HL,(IX+%6)
0B1799 B7                  A  5624    	OR	A,A
0B179A ED42                A  5625    	SBC	HL,BC
0B179C FA A6 17 0B         A  5626    	JP	M,L__137
0B17A0 EA CE 17 0B         A  5627    	JP	PE,L_177
0B17A4 18 04               A  5628    	JR	L__138
0B17A6                     A  5629    L__137:
0B17A6 E2 CE 17 0B         A  5630    	JP	PO,L_177
0B17AA                     A  5631    L__138:
0B17AA 01040000            A  5632    	LD	BC,4
0B17AE DD2706              A  5633    	LD	HL,(IX+%6)
0B17B1 B7                  A  5634    	OR	A,A
0B17B2 ED42                A  5635    	SBC	HL,BC
0B17B4 28 18               A  5636    	JR	Z,L_177
0B17B6 DD0706              A  5637    	LD	BC,(IX+%6)
0B17B9 21050000            A  5638    	LD	HL,5
0B17BD B7                  A  5639    	OR	A,A
0B17BE ED42                A  5640    	SBC	HL,BC
0B17C0 F2 CA 17 0B         A  5641    	JP	P,L__139
0B17C4 EA FD 17 0B         A  5642    	JP	PE,L_179
0B17C8 18 04               A  5643    	JR	L__140
0B17CA                     A  5644    L__139:
0B17CA E2 FD 17 0B         A  5645    	JP	PO,L_179
0B17CE                     A  5646    L__140:
0B17CE                     A  5647    L_177:
                           A  5648    ;  510	        printf("Usage is %s <filename> 
                           A  5649    .LINE 510
                           A  5650    
0B17CE 01 51 2D 0B         A  5651    	LD	BC,___print_uputch
0B17D2 ED43 B4 30 0B       A  5652    	LD	(___print_xputch),BC
0B17D7 01 52 31 0B         A  5653    	LD	BC,L__127
0B17DB C5                  A  5654    	PUSH	BC
0B17DC CD B6 2B 0B         A  5655    	CALL	___print_sendstring
0B17E0 C1                  A  5656    	POP	BC
0B17E1 DD2709              A  5657    	LD	HL,(IX+%9)
0B17E4 ED07                A  5658    	LD	BC,(HL)
0B17E6 C5                  A  5659    	PUSH	BC
0B17E7 CD B6 2B 0B         A  5660    	CALL	___print_sendstring
0B17EB C1                  A  5661    	POP	BC
0B17EC 01 5C 31 0B         A  5662    	LD	BC,L__128
0B17F0 C5                  A  5663    	PUSH	BC
0B17F1 CD B6 2B 0B         A  5664    	CALL	___print_sendstring
0B17F5 C1                  A  5665    	POP	BC
                           A  5666    ;  511	        return 0;
                           A  5667    .LINE 511
                           A  5668    
0B17F6 B7                  A  5669    	OR	A,A
0B17F7 ED62                A  5670    	SBC	HL,HL
0B17F9 C3 BC 19 0B         A  5671    	JR	L_195
                           A  5672    ;  512	    }
0B17FD                     A  5673    L_179:
                           A  5674    .LINE 512
                           A  5675    
                           A  5676    ;  513		
                           A  5677    ;  514		if (argc > 2) bitmap_slot = strtou8
                           A  5678    .LINE 514
                           A  5679    
0B17FD DD0706              A  5680    	LD	BC,(IX+%6)
0B1800 21020000            A  5681    	LD	HL,2
0B1804 B7                  A  5682    	OR	A,A
0B1805 ED42                A  5683    	SBC	HL,BC
0B1807 F2 11 18 0B         A  5684    	JP	P,L__141
0B180B EA 26 18 0B         A  5685    	JP	PE,L_193
0B180F 18 04               A  5686    	JR	L__142
0B1811                     A  5687    L__141:
0B1811 E2 26 18 0B         A  5688    	JP	PO,L_193
0B1815                     A  5689    L__142:
0B1815 DD3109              A  5690    	LD	IY,(IX+%9)
0B1818 ED2306              A  5691    	LEA	HL,IY+%6
0B181B ED07                A  5692    	LD	BC,(HL)
0B181D C5                  A  5693    	PUSH	BC
0B181E CD 9B 15 0B         A  5694    	CALL	_strtou8
0B1822 C1                  A  5695    	POP	BC
0B1823 DD77FF              A  5696    	LD	(IX+%FFFFFFFF),A
0B1826                     A  5697    L_193:
                           A  5698    ;  515		
                           A  5699    ;  516	    //vdp_mode(8);
                           A  5700    ;  517		
                           A  5701    ;  518		if (argc == 2) {
                           A  5702    .LINE 518
                           A  5703    
0B1826 01020000            A  5704    	LD	BC,2
0B182A DD2706              A  5705    	LD	HL,(IX+%6)
0B182D B7                  A  5706    	OR	A,A
0B182E ED42                A  5707    	SBC	HL,BC
0B1830 20 25               A  5708    	JR	NZ,L_192
                           A  5709    ;  519	
                           A  5710    ;  520			bmp = load_bmp_big(argv[1], 0);
                           A  5711    .LINE 520
                           A  5712    
0B1832 01000000            A  5713    	LD	BC,0
0B1836 C5                  A  5714    	PUSH	BC
0B1837 DD3109              A  5715    	LD	IY,(IX+%9)
0B183A ED2303              A  5716    	LEA	HL,IY+%3
0B183D ED07                A  5717    	LD	BC,(HL)
0B183F C5                  A  5718    	PUSH	BC
0B1840 ED65E9              A  5719    	PEA	IX+%FFFFFFE9
0B1843 CD 73 0A 0B         A  5720    	CALL	_load_bmp_big
0B1847 C1                  A  5721    	POP	BC
0B1848 C1                  A  5722    	POP	BC
0B1849 C1                  A  5723    	POP	BC
0B184A ED12F4              A  5724    	LEA	DE,IX+%FFFFFFF4
0B184D 01050000            A  5725    	LD	BC,5
0B1851 EDB0                A  5726    	LDIR	
                           A  5727    ;  521			
                           A  5728    ;  522		} else if (argc == 3) {
                           A  5729    .LINE 522
                           A  5730    
0B1853 C3 B9 19 0B         A  5731    	JR	L_194
0B1857                     A  5732    L_192:
0B1857 01030000            A  5733    	LD	BC,3
0B185B DD2706              A  5734    	LD	HL,(IX+%6)
0B185E B7                  A  5735    	OR	A,A
0B185F ED42                A  5736    	SBC	HL,BC
0B1861 20 26               A  5737    	JR	NZ,L_190
                           A  5738    ;  523			
                           A  5739    ;  524			bmp = load_bmp_big(argv[1], bit
                           A  5740    .LINE 524
                           A  5741    
0B1863 DD4EFF              A  5742    	LD	C,(IX+%FFFFFFFF)
0B1866 0600                A  5743    	LD	B,%0
0B1868 C5                  A  5744    	PUSH	BC
0B1869 DD3109              A  5745    	LD	IY,(IX+%9)
0B186C ED2303              A  5746    	LEA	HL,IY+%3
0B186F ED07                A  5747    	LD	BC,(HL)
0B1871 C5                  A  5748    	PUSH	BC
0B1872 ED65E4              A  5749    	PEA	IX+%FFFFFFE4
0B1875 CD 73 0A 0B         A  5750    	CALL	_load_bmp_big
0B1879 C1                  A  5751    	POP	BC
0B187A C1                  A  5752    	POP	BC
0B187B C1                  A  5753    	POP	BC
0B187C ED12F4              A  5754    	LEA	DE,IX+%FFFFFFF4
0B187F 01050000            A  5755    	LD	BC,5
0B1883 EDB0                A  5756    	LDIR	
                           A  5757    ;  525			
                           A  5758    ;  526		} else if (argc == 5) {
                           A  5759    .LINE 526
                           A  5760    
0B1885 C3 B9 19 0B         A  5761    	JR	L_194
0B1889                     A  5762    L_190:
0B1889 01050000            A  5763    	LD	BC,5
0B188D DD2706              A  5764    	LD	HL,(IX+%6)
0B1890 B7                  A  5765    	OR	A,A
0B1891 ED42                A  5766    	SBC	HL,BC
0B1893 C2 B9 19 0B         A  5767    	JR	NZ,L_194
                           A  5768    ;  527		
                           A  5769    ;  528			bmp = load_bmp_big(argv[1], bit
                           A  5770    .LINE 528
                           A  5771    
0B1897 DD4EFF              A  5772    	LD	C,(IX+%FFFFFFFF)
0B189A 0600                A  5773    	LD	B,%0
0B189C C5                  A  5774    	PUSH	BC
0B189D DD3109              A  5775    	LD	IY,(IX+%9)
0B18A0 ED2303              A  5776    	LEA	HL,IY+%3
0B18A3 ED07                A  5777    	LD	BC,(HL)
0B18A5 C5                  A  5778    	PUSH	BC
0B18A6 ED65DF              A  5779    	PEA	IX+%FFFFFFDF
0B18A9 CD 73 0A 0B         A  5780    	CALL	_load_bmp_big
0B18AD C1                  A  5781    	POP	BC
0B18AE C1                  A  5782    	POP	BC
0B18AF C1                  A  5783    	POP	BC
0B18B0 ED12F4              A  5784    	LEA	DE,IX+%FFFFFFF4
0B18B3 01050000            A  5785    	LD	BC,5
0B18B7 EDB0                A  5786    	LDIR	
                           A  5787    ;  529			
                           A  5788    ;  530			if (argv[3][0] == 'C' || argv[3
                           A  5789    .LINE 530
                           A  5790    
0B18B9 DD3109              A  5791    	LD	IY,(IX+%9)
0B18BC ED3309              A  5792    	LEA	IY,IY+%9
0B18BF DD3EF1              A  5793    	LD	(IX+%FFFFFFF1),IY
0B18C2 DD27F1              A  5794    	LD	HL,(IX+%FFFFFFF1)
0B18C5 ED27                A  5795    	LD	HL,(HL)
0B18C7 7E                  A  5796    	LD	A,(HL)
0B18C8 47                  A  5797    	LD	B,A
0B18C9 17ED62              A  5798    	SEXT	HL
0B18CC 68                  A  5799    	LD	L,B
0B18CD 01430000            A  5800    	LD	BC,67
0B18D1 B7                  A  5801    	OR	A,A
0B18D2 ED42                A  5802    	SBC	HL,BC
0B18D4 28 14               A  5803    	JR	Z,L_181
0B18D6 DD27F1              A  5804    	LD	HL,(IX+%FFFFFFF1)
0B18D9 ED27                A  5805    	LD	HL,(HL)
0B18DB 7E                  A  5806    	LD	A,(HL)
0B18DC 47                  A  5807    	LD	B,A
0B18DD 17ED62              A  5808    	SEXT	HL
0B18E0 68                  A  5809    	LD	L,B
0B18E1 01630000            A  5810    	LD	BC,99
0B18E5 B7                  A  5811    	OR	A,A
0B18E6 ED42                A  5812    	SBC	HL,BC
0B18E8 20 2D               A  5813    	JR	NZ,L_182
0B18EA                     A  5814    L_181:
0B18EA DD77DE              A  5815    	LD	(IX+%FFFFFFDE),A
0B18ED CD 3C 26 0B         A  5816    	CALL	_getsysvar_scrwidth
0B18F1 DD7EDE              A  5817    	LD	A,(IX+%FFFFFFDE)
0B18F4 E5C1                A  5818    	LD	BC,HL
0B18F6 CD 4B 2D 0B         A  5819    	CALL	__stoiu
0B18FA E5D1                A  5820    	LD	DE,HL
0B18FC DD07F4              A  5821    	LD	BC,(IX+%FFFFFFF4)
0B18FF CD 4B 2D 0B         A  5822    	CALL	__stoiu
0B1903 E5C1                A  5823    	LD	BC,HL
0B1905 D5E1                A  5824    	LD	HL,DE
0B1907 B7                  A  5825    	OR	A,A
0B1908 ED42                A  5826    	SBC	HL,BC
0B190A 01020000            A  5827    	LD	BC,2
0B190E CD 30 2F 0B         A  5828    	CALL	__idivs
0B1912 DD2FF9              A  5829    	LD	(IX+%FFFFFFF9),HL
                           A  5830    ;  531			else x = strtou16(argv[4]);
                           A  5831    .LINE 531
                           A  5832    
0B1915 18 17               A  5833    	JR	L_186
0B1917                     A  5834    L_182:
0B1917 DD3109              A  5835    	LD	IY,(IX+%9)
0B191A ED230C              A  5836    	LEA	HL,IY+%C
0B191D ED07                A  5837    	LD	BC,(HL)
0B191F C5                  A  5838    	PUSH	BC
0B1920 CD A2 14 0B         A  5839    	CALL	_strtou16
0B1924 C1                  A  5840    	POP	BC
0B1925 E5C1                A  5841    	LD	BC,HL
0B1927 CD 4B 2D 0B         A  5842    	CALL	__stoiu
0B192B DD2FF9              A  5843    	LD	(IX+%FFFFFFF9),HL
0B192E                     A  5844    L_186:
                           A  5845    ;  532			
                           A  5846    ;  533			if (argv[4][0] == 'C' || argv[4
                           A  5847    .LINE 533
                           A  5848    
0B192E DD3109              A  5849    	LD	IY,(IX+%9)
0B1931 ED330C              A  5850    	LEA	IY,IY+%C
0B1934 DD3EFC              A  5851    	LD	(IX+%FFFFFFFC),IY
0B1937 DD27FC              A  5852    	LD	HL,(IX+%FFFFFFFC)
0B193A ED27                A  5853    	LD	HL,(HL)
0B193C 7E                  A  5854    	LD	A,(HL)
0B193D 47                  A  5855    	LD	B,A
0B193E 17ED62              A  5856    	SEXT	HL
0B1941 68                  A  5857    	LD	L,B
0B1942 01430000            A  5858    	LD	BC,67
0B1946 B7                  A  5859    	OR	A,A
0B1947 ED42                A  5860    	SBC	HL,BC
0B1949 28 14               A  5861    	JR	Z,L_184
0B194B DD27FC              A  5862    	LD	HL,(IX+%FFFFFFFC)
0B194E ED27                A  5863    	LD	HL,(HL)
0B1950 7E                  A  5864    	LD	A,(HL)
0B1951 47                  A  5865    	LD	B,A
0B1952 17ED62              A  5866    	SEXT	HL
0B1955 68                  A  5867    	LD	L,B
0B1956 01630000            A  5868    	LD	BC,99
0B195A B7                  A  5869    	OR	A,A
0B195B ED42                A  5870    	SBC	HL,BC
0B195D 20 2D               A  5871    	JR	NZ,L_185
0B195F                     A  5872    L_184:
0B195F DD77DE              A  5873    	LD	(IX+%FFFFFFDE),A
0B1962 CD 4F 26 0B         A  5874    	CALL	_getsysvar_scrheight
0B1966 DD7EDE              A  5875    	LD	A,(IX+%FFFFFFDE)
0B1969 E5C1                A  5876    	LD	BC,HL
0B196B CD 4B 2D 0B         A  5877    	CALL	__stoiu
0B196F E5D1                A  5878    	LD	DE,HL
0B1971 DD07F6              A  5879    	LD	BC,(IX+%FFFFFFF6)
0B1974 CD 4B 2D 0B         A  5880    	CALL	__stoiu
0B1978 E5C1                A  5881    	LD	BC,HL
0B197A D5E1                A  5882    	LD	HL,DE
0B197C B7                  A  5883    	OR	A,A
0B197D ED42                A  5884    	SBC	HL,BC
0B197F 01020000            A  5885    	LD	BC,2
0B1983 CD 30 2F 0B         A  5886    	CALL	__idivs
0B1987 DD2FEE              A  5887    	LD	(IX+%FFFFFFEE),HL
                           A  5888    ;  534			else y = strtou16(argv[4]);
                           A  5889    .LINE 534
                           A  5890    
0B198A 18 14               A  5891    	JR	L_187
0B198C                     A  5892    L_185:
0B198C DD27FC              A  5893    	LD	HL,(IX+%FFFFFFFC)
0B198F ED07                A  5894    	LD	BC,(HL)
0B1991 C5                  A  5895    	PUSH	BC
0B1992 CD A2 14 0B         A  5896    	CALL	_strtou16
0B1996 C1                  A  5897    	POP	BC
0B1997 E5C1                A  5898    	LD	BC,HL
0B1999 CD 4B 2D 0B         A  5899    	CALL	__stoiu
0B199D DD2FEE              A  5900    	LD	(IX+%FFFFFFEE),HL
0B19A0                     A  5901    L_187:
                           A  5902    ;  535			
                           A  5903    ;  536			vdp_extended_select(bitmap_slot
                           A  5904    .LINE 536
                           A  5905    
0B19A0 DD4EFF              A  5906    	LD	C,(IX+%FFFFFFFF)
0B19A3 0600                A  5907    	LD	B,%0
0B19A5 C5                  A  5908    	PUSH	BC
0B19A6 CD 06 06 0B         A  5909    	CALL	_vdp_extended_select
0B19AA C1                  A  5910    	POP	BC
                           A  5911    ;  537			vdp_bitmapDrawSelected(x,y);
                           A  5912    .LINE 537
                           A  5913    
0B19AB DD07EE              A  5914    	LD	BC,(IX+%FFFFFFEE)
0B19AE C5                  A  5915    	PUSH	BC
0B19AF DD07F9              A  5916    	LD	BC,(IX+%FFFFFFF9)
0B19B2 C5                  A  5917    	PUSH	BC
0B19B3 CD 2E 1F 0B         A  5918    	CALL	_vdp_bitmapDrawSelected
0B19B7 C1                  A  5919    	POP	BC
0B19B8 C1                  A  5920    	POP	BC
                           A  5921    ;  538			
                           A  5922    ;  539		}
0B19B9                     A  5923    L_194:
                           A  5924    .LINE 539
                           A  5925    
                           A  5926    ;  540	
                           A  5927    ;  541	    return 0;
                           A  5928    .LINE 541
                           A  5929    
0B19B9 B7                  A  5930    	OR	A,A
0B19BA ED62                A  5931    	SBC	HL,HL
0B19BC                     A  5932    L_195:
                           A  5933    .LINE 542
                           A  5934    
0B19BC DDF9                A  5935    	LD	SP,IX
0B19BE DDE1                A  5936    	POP	IX
0B19C0 C9                  A  5937    	RET	
                           A  5938    
                           A  5939    
                           A  5940    ;**************************** _main ***********
                           A  5941    ;Name                         Addr/Register   S
                           A  5942    ;_vdp_bitmapDrawSelected             IMPORT  --
                           A  5943    ;_getsysvar_scrheight                IMPORT  --
                           A  5944    ;_getsysvar_scrwidth                 IMPORT  --
                           A  5945    ;___print_sendstring                 IMPORT  --
                           A  5946    ;___print_xputch                     IMPORT    
                           A  5947    ;___print_uputch                     IMPORT  --
                           A  5948    ;y                                    IX-18    
                           A  5949    ;G_1                                  IX-15    
                           A  5950    ;bmp                                  IX-12    
                           A  5951    ;x                                     IX-7    
                           A  5952    ;G_2                                   IX-4    
                           A  5953    ;bitmap_slot                           IX-1    
                           A  5954    ;argv                                  IX+9    
                           A  5955    ;argc                                  IX+6    
                           A  5956    
                           A  5957    
                           A  5958    ; Stack Frame Size: 46 (bytes)
                           A  5959    ;       Spill Code: -3 (instruction)
                           A  5960    
                           A  5961    
                           A  5962    .ENDFUNC "main",542,"_main"
                           A  5963    	SEGMENT STRSECT
0B3152                     A  5964    L__127:
0B3152 55736167 65206973   A  5965    	DB	"Usage is "
0B315A 20 
0B315B 00                  A  5966    	DB	0
0B315C                     A  5967    L__128:
0B315C 203C6669 6C656E61   A  5968    	DB	" <filename> [bitmap slot] [top-left x]
0B3164 6D653E20 5B626974 
0B316C 6D617020 736C6F74 
0B3174 5D205B74 6F702D6C 
0B317C 65667420 785D205B 
0B3184 746F702D 6C656674 
0B318C 20795D 
0B318F 0D0A00              A  5969    	DB	13,10,0
                           A  5970    	XREF _write16bit:ROM
                           A  5971    	XREF _vdp_bitmapDrawSelected:ROM
                           A  5972    	XREF _mos_getfil:ROM
                           A  5973    	XREF _mos_flseek:ROM
                           A  5974    	XREF _mos_fread:ROM
                           A  5975    	XREF _mos_fgetc:ROM
                           A  5976    	XREF _mos_fclose:ROM
                           A  5977    	XREF _mos_fopen:ROM
                           A  5978    	XREF _getsysvar_scrheight:ROM
                           A  5979    	XREF _getsysvar_scrwidth:ROM
                           A  5980    	XREF _mos_puts:ROM
                           A  5981    	XREF _waitvblank:ROM
                           A  5982    	XREF _putch:ROM
                           A  5983    	XREF _memcmp:ROM
                           A  5984    	XREF _memcpy:ROM
                           A  5985    	XREF _malloc:ROM
                           A  5986    	XREF _free:ROM
                           A  5987    	XREF ___print_sendstring:ROM
                           A  5988    	XREF ___print_xputch:ROM
                           A  5989    	XREF ___print_uputch:ROM
                           A  5990    	XREF __lcmps:ROM
                           A  5991    	XREF __lcmpu:ROM
                           A  5992    	XREF __ladd:ROM
                           A  5993    	XREF __lsub:ROM
                           A  5994    	XREF __idivs:ROM
                           A  5995    	XREF __ldivs:ROM
                           A  5996    	XREF __imuls:ROM
                           A  5997    	XREF __lmuls:ROM
                           A  5998    	XREF __lmulu:ROM
                           A  5999    	XREF __smulu:ROM
                           A  6000    	XREF __bshl:ROM
                           A  6001    	XREF __irems:ROM
                           A  6002    	XREF __lrems:ROM
                           A  6003    	XREF __stoiu:ROM
                           A  6004    	XREF __itol:ROM
                           A  6005    	XREF __ildix:ROM
                           A  6006    	XREF __istix:ROM
                           A  6007    	XREF __ladd_b:ROM
                           A  6008    	XREF __ishrs_b:ROM
                           A  6009    	XDEF _main
                           A  6010    	XDEF _strtou24
                           A  6011    	XDEF _strtou8
                           A  6012    	XDEF _strtou16
                           A  6013    	XDEF _load_bmp_big
                           A  6014    	XDEF _bgra8888_to_rgba2222
                           A  6015    	XDEF _bgr888_to_rgba2222
                           A  6016    	XDEF _reorder_and_insert
                           A  6017    	XDEF _reorder
                           A  6018    	XDEF _assign_buffer_to_bitmap
                           A  6019    	XDEF _vdp_extended_select
                           A  6020    	XDEF _add_stream_to_buffer
                           A  6021    	XDEF _clear_buffer
                           A  6022    	XDEF _rgba8888_to_rgba2222
                           A  6023    	XDEF _twiddle_buffer
                           A  6024    	XDEF _flip
                           A  6025    	XDEF _max
                           A  6026    	XDEF _min
                           A  6027    	XDEF _delay_secs
                           A  6028    	END


Errors: 0
Warnings: 0
Lines Assembled: 6029
