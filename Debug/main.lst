Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED14-Oct-23     22:36:20     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optspeed -noreduceopt -nopadbranc
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    .BEGREC "NONAME3",8
                           A   144    .DEFINE "baudRate"
                           A   145    .VALUE 0
                           A   146    .CLASS 8
                           A   147    .TYPE 4
                           A   148    .ENDEF
                           A   149    .DEFINE "dataBits"
                           A   150    .VALUE 3
                           A   151    .CLASS 8
                           A   152    .TYPE 12
                           A   153    .ENDEF
                           A   154    .DEFINE "stopBits"
                           A   155    .VALUE 4
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "parity"
                           A   160    .VALUE 5
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "flowcontrol"
                           A   165    .VALUE 6
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "eir"
                           A   170    .VALUE 7
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .ENDREC "NONAME3"
                           A   175    .BEGREC "NONAME4",15
                           A   176    .DEFINE "fs"
                           A   177    .VALUE 0
                           A   178    .CLASS 8
                           A   179    .TYPE 46
                           A   180    .ENDEF
                           A   181    .DEFINE "id"
                           A   182    .VALUE 3
                           A   183    .CLASS 8
                           A   184    .TYPE 13
                           A   185    .ENDEF
                           A   186    .DEFINE "attr"
                           A   187    .VALUE 5
                           A   188    .CLASS 8
                           A   189    .TYPE 12
                           A   190    .ENDEF
                           A   191    .DEFINE "stat"
                           A   192    .VALUE 6
                           A   193    .CLASS 8
                           A   194    .TYPE 12
                           A   195    .ENDEF
                           A   196    .DEFINE "sclust"
                           A   197    .VALUE 7
                           A   198    .CLASS 8
                           A   199    .TYPE 15
                           A   200    .ENDEF
                           A   201    .DEFINE "objsize"
                           A   202    .VALUE 11
                           A   203    .CLASS 8
                           A   204    .TYPE 15
                           A   205    .ENDEF
                           A   206    .ENDREC "NONAME4"
                           A   207    .BEGREC "NONAME5",36
                           A   208    .DEFINE "obj"
                           A   209    .VALUE 0
                           A   210    .CLASS 8
                           A   211    .TAG "NONAME4"
                           A   212    .TYPE 8
                           A   213    .ENDEF
                           A   214    .DEFINE "flag"
                           A   215    .VALUE 15
                           A   216    .CLASS 8
                           A   217    .TYPE 12
                           A   218    .ENDEF
                           A   219    .DEFINE "err"
                           A   220    .VALUE 16
                           A   221    .CLASS 8
                           A   222    .TYPE 12
                           A   223    .ENDEF
                           A   224    .DEFINE "fptr"
                           A   225    .VALUE 17
                           A   226    .CLASS 8
                           A   227    .TYPE 15
                           A   228    .ENDEF
                           A   229    .DEFINE "clust"
                           A   230    .VALUE 21
                           A   231    .CLASS 8
                           A   232    .TYPE 15
                           A   233    .ENDEF
                           A   234    .DEFINE "sect"
                           A   235    .VALUE 25
                           A   236    .CLASS 8
                           A   237    .TYPE 15
                           A   238    .ENDEF
                           A   239    .DEFINE "dir_sect"
                           A   240    .VALUE 29
                           A   241    .CLASS 8
                           A   242    .TYPE 15
                           A   243    .ENDEF
                           A   244    .DEFINE "dir_ptr"
                           A   245    .VALUE 33
                           A   246    .CLASS 8
                           A   247    .TYPE 46
                           A   248    .ENDEF
                           A   249    .ENDREC "NONAME5"
                           A   250    ;    1	//Copyright HeathenUK 2023, others' cop
                           A   251    ;    2	
                           A   252    ;    3	#include <stdio.h>
                           A   253    ;    4	#include <stdlib.h>
                           A   254    ;    5	#include <ctype.h>
                           A   255    ;    6	#include <stdint.h>
                           A   256    ;    7	#include <string.h>
                           A   257    ;    8	#include <eZ80.h>
                           A   258    ;    9	#include <defines.h>
                           A   259    ;   10	#include "mos-interface.h"
                           A   260    ;   11	#include "vdp.h"
                           A   261    ;   12	
                           A   262    ;   13	typedef struct {
                           A   263    ;   14		
                           A   264    ;   15		uint16_t bmp_width;
                           A   265    ;   16		uint16_t bmp_height;
                           A   266    ;   17		uint8_t  bmp_bitdepth;
                           A   267    ;   18		
                           A   268    ;   19		uint32_t pixels_offset;
                           A   269    ;   20		uint32_t bmp_size;
                           A   270    ;   21		uint32_t main_header_size;
                           A   271    ;   22		
                           A   272    ;   23		uint32_t compression;
                           A   273    ;   24		
                           A   274    ;   25		uint32_t redBitField;
                           A   275    ;   26		uint32_t greenBitField;
                           A   276    ;   27		uint32_t blueBitField;
                           A   277    ;   28		uint32_t alphaBitField;
                           A   278    ;   29		
                           A   279    ;   30		uint32_t color_table_size;
                           A   280    ;   31		char color_table[1024];
                           A   281    ;   32		
                           A   282    ;   33		int8_t red_pos;
                           A   283    ;   34		int8_t green_pos;
                           A   284    ;   35		int8_t blue_pos;
                           A   285    ;   36		int8_t alpha_pos;
                           A   286    ;   37		
                           A   287    ;   38		uint16_t row_padding;
                           A   288    ;   39		uint16_t non_pad_row;
                           A   289    ;   40		
                           A   290    ;   41	} bmp_info;
                           A   291    .BEGREC "NONAME6",1073
                           A   292    .DEFINE "bmp_width"
                           A   293    .VALUE 0
                           A   294    .CLASS 8
                           A   295    .TYPE 13
                           A   296    .ENDEF
                           A   297    .DEFINE "bmp_height"
                           A   298    .VALUE 2
                           A   299    .CLASS 8
                           A   300    .TYPE 13
                           A   301    .ENDEF
                           A   302    .DEFINE "bmp_bitdepth"
                           A   303    .VALUE 4
                           A   304    .CLASS 8
                           A   305    .TYPE 12
                           A   306    .ENDEF
                           A   307    .DEFINE "pixels_offset"
                           A   308    .VALUE 5
                           A   309    .CLASS 8
                           A   310    .TYPE 15
                           A   311    .ENDEF
                           A   312    .DEFINE "bmp_size"
                           A   313    .VALUE 9
                           A   314    .CLASS 8
                           A   315    .TYPE 15
                           A   316    .ENDEF
                           A   317    .DEFINE "main_header_size"
                           A   318    .VALUE 13
                           A   319    .CLASS 8
                           A   320    .TYPE 15
                           A   321    .ENDEF
                           A   322    .DEFINE "compression"
                           A   323    .VALUE 17
                           A   324    .CLASS 8
                           A   325    .TYPE 15
                           A   326    .ENDEF
                           A   327    .DEFINE "redBitField"
                           A   328    .VALUE 21
                           A   329    .CLASS 8
                           A   330    .TYPE 15
                           A   331    .ENDEF
                           A   332    .DEFINE "greenBitField"
                           A   333    .VALUE 25
                           A   334    .CLASS 8
                           A   335    .TYPE 15
                           A   336    .ENDEF
                           A   337    .DEFINE "blueBitField"
                           A   338    .VALUE 29
                           A   339    .CLASS 8
                           A   340    .TYPE 15
                           A   341    .ENDEF
                           A   342    .DEFINE "alphaBitField"
                           A   343    .VALUE 33
                           A   344    .CLASS 8
                           A   345    .TYPE 15
                           A   346    .ENDEF
                           A   347    .DEFINE "color_table_size"
                           A   348    .VALUE 37
                           A   349    .CLASS 8
                           A   350    .TYPE 15
                           A   351    .ENDEF
                           A   352    .DEFINE "color_table"
                           A   353    .VALUE 41
                           A   354    .CLASS 8
                           A   355    .DIM 1024
                           A   356    .TYPE 98
                           A   357    .ENDEF
                           A   358    .DEFINE "red_pos"
                           A   359    .VALUE 1065
                           A   360    .CLASS 8
                           A   361    .TYPE 2
                           A   362    .ENDEF
                           A   363    .DEFINE "green_pos"
                           A   364    .VALUE 1066
                           A   365    .CLASS 8
                           A   366    .TYPE 2
                           A   367    .ENDEF
                           A   368    .DEFINE "blue_pos"
                           A   369    .VALUE 1067
                           A   370    .CLASS 8
                           A   371    .TYPE 2
                           A   372    .ENDEF
                           A   373    .DEFINE "alpha_pos"
                           A   374    .VALUE 1068
                           A   375    .CLASS 8
                           A   376    .TYPE 2
                           A   377    .ENDEF
                           A   378    .DEFINE "row_padding"
                           A   379    .VALUE 1069
                           A   380    .CLASS 8
                           A   381    .TYPE 13
                           A   382    .ENDEF
                           A   383    .DEFINE "non_pad_row"
                           A   384    .VALUE 1071
                           A   385    .CLASS 8
                           A   386    .TYPE 13
                           A   387    .ENDEF
                           A   388    .ENDREC "NONAME6"
                           A   389    ;   42	
                           A   390    ;   43	extern void write16bit(uint16_t w);
                           A   391    ;   44	extern void write24bit(uint24_t w);
                           A   392    ;   45	extern void write32bit(uint32_t w);
                           A   393    ;   46	
                           A   394    ;   47	void delay_secs(UINT16 ticks_end) { //1
0B00E5                     A   395    _delay_secs:
                           A   396    .DEFINE "_delay_secs"
                           A   397    
                           A   398    .VALUE _delay_secs
                           A   399    
                           A   400    .CLASS 2
                           A   401    
                           A   402    .TYPE 65
                           A   403    
                           A   404    .ENDEF
                           A   405    
                           A   406    .BEGFUNC "delay_secs",47,"_delay_secs"
                           A   407    
                           A   408    .LINE 47
                           A   409    
                           A   410    .DEFINE "ticks_end"
                           A   411    
                           A   412    .CLASS 65
                           A   413    
                           A   414    .VALUE 6
                           A   415    
                           A   416    .TYPE 13
                           A   417    
                           A   418    .ENDEF
                           A   419    
                           A   420    .DEFINE "ticks"
                           A   421    
                           A   422    .CLASS 65
                           A   423    
                           A   424    .VALUE -4
                           A   425    
                           A   426    .TYPE 15
                           A   427    
                           A   428    .ENDEF
                           A   429    
0B00E5 DDE5                A   430    	PUSH	IX
0B00E7 DD210000 00         A   431    	LD	IX,0
0B00EC DD39                A   432    	ADD	IX,SP
0B00EE C5                  A   433    	PUSH	BC
0B00EF 3B                  A   434    	DEC	SP
                           A   435    ;   48		
                           A   436    ;   49		UINT32 ticks = 0;
                           A   437    .LINE 49
                           A   438    
0B00F0 01000000            A   439    	LD	BC,0
0B00F4 AF                  A   440    	XOR	A,A
0B00F5 DD0FFC              A   441    	LD	(IX+%FFFFFFFC),BC
0B00F8 DD77FF              A   442    	LD	(IX+%FFFFFFFF),A
                           A   443    ;   50		ticks_end *= 60;
                           A   444    .LINE 50
                           A   445    
0B00FB 49213C00            A   446    	LD.LIS	HL,60
0B00FF DD0706              A   447    	LD	BC,(IX+%6)
0B0102 CD 5D 42 0B         A   448    	CALL	__smulu
0B0106 DD7506              A   449    	LD	(IX+%6),L
0B0109 DD7407              A   450    	LD	(IX+%7),H
                           A   451    ;   51		while(true) {
0B010C                     A   452    L_3:
                           A   453    .LINE 51
                           A   454    
                           A   455    ;   52			
                           A   456    ;   53			waitvblank();
                           A   457    .LINE 53
                           A   458    
0B010C CD 77 31 0B         A   459    	CALL	_waitvblank
                           A   460    ;   54			ticks++;
                           A   461    .LINE 54
                           A   462    
0B0110 DD27FC              A   463    	LD	HL,(IX+%FFFFFFFC)
0B0113 DD5EFF              A   464    	LD	E,(IX+%FFFFFFFF)
0B0116 3E01                A   465    	LD	A,%1
0B0118 CD 31 35 0B         A   466    	CALL	__ladd_b
0B011C DD2FFC              A   467    	LD	(IX+%FFFFFFFC),HL
0B011F DD73FF              A   468    	LD	(IX+%FFFFFFFF),E
                           A   469    ;   55			if(ticks >= ticks_end) break;
                           A   470    .LINE 55
                           A   471    
0B0122 DD0706              A   472    	LD	BC,(IX+%6)
0B0125 CD 22 39 0B         A   473    	CALL	__stoiu
0B0129 E5C1                A   474    	LD	BC,HL
0B012B AF                  A   475    	XOR	A,A
0B012C DD27FC              A   476    	LD	HL,(IX+%FFFFFFFC)
0B012F DD5EFF              A   477    	LD	E,(IX+%FFFFFFFF)
0B0132 CD 49 40 0B         A   478    	CALL	__lcmpu
0B0136 38 D4               A   479    	JR	C,L_3
                           A   480    ;   56			
                           A   481    ;   57		}
                           A   482    ;   58		
                           A   483    ;   59	}
                           A   484    .LINE 59
                           A   485    
0B0138 DDF9                A   486    	LD	SP,IX
0B013A DDE1                A   487    	POP	IX
0B013C C9                  A   488    	RET	
                           A   489    
                           A   490    
                           A   491    ;**************************** _delay_secs *****
                           A   492    ;Name                         Addr/Register   S
                           A   493    ;_waitvblank                         IMPORT  --
                           A   494    ;ticks                                 IX-4    
                           A   495    ;ticks_end                             IX+6    
                           A   496    
                           A   497    
                           A   498    ; Stack Frame Size: 13 (bytes)
                           A   499    ;       Spill Code: 0 (instruction)
                           A   500    
                           A   501    
                           A   502    .ENDFUNC "delay_secs",59,"_delay_secs"
                           A   503    ;   60	
                           A   504    ;   61	int min(int a, int b) {
0B013D                     A   505    _min:
                           A   506    .DEFINE "_min"
                           A   507    
                           A   508    .VALUE _min
                           A   509    
                           A   510    .CLASS 2
                           A   511    
                           A   512    .TYPE 68
                           A   513    
                           A   514    .ENDEF
                           A   515    
                           A   516    .BEGFUNC "min",61,"_min"
                           A   517    
                           A   518    .LINE 61
                           A   519    
                           A   520    .DEFINE "a"
                           A   521    
                           A   522    .CLASS 65
                           A   523    
                           A   524    .VALUE 6
                           A   525    
                           A   526    .TYPE 4
                           A   527    
                           A   528    .ENDEF
                           A   529    
                           A   530    .DEFINE "b"
                           A   531    
                           A   532    .CLASS 65
                           A   533    
                           A   534    .VALUE 9
                           A   535    
                           A   536    .TYPE 4
                           A   537    
                           A   538    .ENDEF
                           A   539    
0B013D DDE5                A   540    	PUSH	IX
0B013F DD210000 00         A   541    	LD	IX,0
0B0144 DD39                A   542    	ADD	IX,SP
                           A   543    ;   62	    if (a > b)
                           A   544    .LINE 62
                           A   545    
0B0146 DD0706              A   546    	LD	BC,(IX+%6)
0B0149 DD2709              A   547    	LD	HL,(IX+%9)
0B014C B7                  A   548    	OR	A,A
0B014D ED42                A   549    	SBC	HL,BC
0B014F F2 59 01 0B         A   550    	JP	P,L__3
0B0153 EA 62 01 0B         A   551    	JP	PE,L_6
0B0157 18 04               A   552    	JR	L__4
0B0159                     A   553    L__3:
0B0159 E2 62 01 0B         A   554    	JP	PO,L_6
0B015D                     A   555    L__4:
                           A   556    ;   63	        return b;
                           A   557    .LINE 63
                           A   558    
0B015D DD2709              A   559    	LD	HL,(IX+%9)
0B0160 18 03               A   560    	JR	L_7
0B0162                     A   561    L_6:
                           A   562    ;   64	    return a;
                           A   563    .LINE 64
                           A   564    
0B0162 DD2706              A   565    	LD	HL,(IX+%6)
                           A   566    ;   65	}
0B0165                     A   567    L_7:
                           A   568    .LINE 65
                           A   569    
0B0165 DDF9                A   570    	LD	SP,IX
0B0167 DDE1                A   571    	POP	IX
0B0169 C9                  A   572    	RET	
                           A   573    
                           A   574    
                           A   575    ;**************************** _min ************
                           A   576    ;Name                         Addr/Register   S
                           A   577    ;b                                     IX+9    
                           A   578    ;a                                     IX+6    
                           A   579    
                           A   580    
                           A   581    ; Stack Frame Size: 12 (bytes)
                           A   582    ;       Spill Code: 0 (instruction)
                           A   583    
                           A   584    
                           A   585    .ENDFUNC "min",65,"_min"
                           A   586    ;   66	
                           A   587    ;   67	int max(int a, int b) {
0B016A                     A   588    _max:
                           A   589    .DEFINE "_max"
                           A   590    
                           A   591    .VALUE _max
                           A   592    
                           A   593    .CLASS 2
                           A   594    
                           A   595    .TYPE 68
                           A   596    
                           A   597    .ENDEF
                           A   598    
                           A   599    .BEGFUNC "max",67,"_max"
                           A   600    
                           A   601    .LINE 67
                           A   602    
                           A   603    .DEFINE "a"
                           A   604    
                           A   605    .CLASS 65
                           A   606    
                           A   607    .VALUE 6
                           A   608    
                           A   609    .TYPE 4
                           A   610    
                           A   611    .ENDEF
                           A   612    
                           A   613    .DEFINE "b"
                           A   614    
                           A   615    .CLASS 65
                           A   616    
                           A   617    .VALUE 9
                           A   618    
                           A   619    .TYPE 4
                           A   620    
                           A   621    .ENDEF
                           A   622    
0B016A DDE5                A   623    	PUSH	IX
0B016C DD210000 00         A   624    	LD	IX,0
0B0171 DD39                A   625    	ADD	IX,SP
                           A   626    ;   68	    if (a > b)
                           A   627    .LINE 68
                           A   628    
0B0173 DD0706              A   629    	LD	BC,(IX+%6)
0B0176 DD2709              A   630    	LD	HL,(IX+%9)
0B0179 B7                  A   631    	OR	A,A
0B017A ED42                A   632    	SBC	HL,BC
0B017C F2 86 01 0B         A   633    	JP	P,L__7
0B0180 EA 8F 01 0B         A   634    	JP	PE,L_9
0B0184 18 04               A   635    	JR	L__8
0B0186                     A   636    L__7:
0B0186 E2 8F 01 0B         A   637    	JP	PO,L_9
0B018A                     A   638    L__8:
                           A   639    ;   69	        return a;
                           A   640    .LINE 69
                           A   641    
0B018A DD2706              A   642    	LD	HL,(IX+%6)
0B018D 18 03               A   643    	JR	L_10
0B018F                     A   644    L_9:
                           A   645    ;   70	    return b;
                           A   646    .LINE 70
                           A   647    
0B018F DD2709              A   648    	LD	HL,(IX+%9)
                           A   649    ;   71	}
0B0192                     A   650    L_10:
                           A   651    .LINE 71
                           A   652    
0B0192 DDF9                A   653    	LD	SP,IX
0B0194 DDE1                A   654    	POP	IX
0B0196 C9                  A   655    	RET	
                           A   656    
                           A   657    
                           A   658    ;**************************** _max ************
                           A   659    ;Name                         Addr/Register   S
                           A   660    ;b                                     IX+9    
                           A   661    ;a                                     IX+6    
                           A   662    
                           A   663    
                           A   664    ; Stack Frame Size: 12 (bytes)
                           A   665    ;       Spill Code: 0 (instruction)
                           A   666    
                           A   667    
                           A   668    .ENDFUNC "max",71,"_max"
                           A   669    ;   72	
                           A   670    ;   73	void flip(uint32_t * framebuffer, int w
0B0197                     A   671    _flip:
                           A   672    .DEFINE "_flip"
                           A   673    
                           A   674    .VALUE _flip
                           A   675    
                           A   676    .CLASS 2
                           A   677    
                           A   678    .TYPE 65
                           A   679    
                           A   680    .ENDEF
                           A   681    
                           A   682    .BEGFUNC "flip",73,"_flip"
                           A   683    
                           A   684    .LINE 73
                           A   685    
                           A   686    .DEFINE "framebuffer"
                           A   687    
                           A   688    .CLASS 65
                           A   689    
                           A   690    .VALUE 6
                           A   691    
                           A   692    .TYPE 47
                           A   693    
                           A   694    .ENDEF
                           A   695    
                           A   696    .DEFINE "width"
                           A   697    
                           A   698    .CLASS 65
                           A   699    
                           A   700    .VALUE 9
                           A   701    
                           A   702    .TYPE 4
                           A   703    
                           A   704    .ENDEF
                           A   705    
                           A   706    .DEFINE "height"
                           A   707    
                           A   708    .CLASS 65
                           A   709    
                           A   710    .VALUE 12
                           A   711    
                           A   712    .TYPE 4
                           A   713    
                           A   714    .ENDEF
                           A   715    
                           A   716    .DEFINE "y"
                           A   717    
                           A   718    .CLASS 65
                           A   719    
                           A   720    .VALUE -2
                           A   721    
                           A   722    .TYPE 13
                           A   723    
                           A   724    .ENDEF
                           A   725    
                           A   726    .DEFINE "row_buffer"
                           A   727    
                           A   728    .CLASS 65
                           A   729    
                           A   730    .VALUE -5
                           A   731    
                           A   732    .TYPE 47
                           A   733    
                           A   734    .ENDEF
                           A   735    
                           A   736    .DEFINE "row_size"
                           A   737    
                           A   738    .CLASS 65
                           A   739    
                           A   740    .VALUE -8
                           A   741    
                           A   742    .TYPE 4
                           A   743    
                           A   744    .ENDEF
                           A   745    
                           A   746    .DEFINE "top_row"
                           A   747    
                           A   748    .CLASS 65
                           A   749    
                           A   750    .VALUE -11
                           A   751    
                           A   752    .TYPE 47
                           A   753    
                           A   754    .ENDEF
                           A   755    
                           A   756    .DEFINE "bottom_row"
                           A   757    
                           A   758    .CLASS 65
                           A   759    
                           A   760    .VALUE -14
                           A   761    
                           A   762    .TYPE 47
                           A   763    
                           A   764    .ENDEF
                           A   765    
0B0197 DDE5                A   766    	PUSH	IX
0B0199 DD210000 00         A   767    	LD	IX,0
0B019E DD39                A   768    	ADD	IX,SP
0B01A0 ED22F1              A   769    	LEA	HL,IX+%FFFFFFF1
0B01A3 F9                  A   770    	LD	SP,HL
                           A   771    ;   74	    uint16_t y;
                           A   772    ;   75	    uint32_t * row_buffer = (uint32_t *
                           A   773    .LINE 75
                           A   774    
0B01A4 DD2709              A   775    	LD	HL,(IX+%9)
0B01A7 29                  A   776    	ADD	HL,HL
0B01A8 29                  A   777    	ADD	HL,HL
0B01A9 E5                  A   778    	PUSH	HL
0B01AA DD77F1              A   779    	LD	(IX+%FFFFFFF1),A
0B01AD CD 4B 36 0B         A   780    	CALL	_malloc
0B01B1 DD7EF1              A   781    	LD	A,(IX+%FFFFFFF1)
0B01B4 C1                  A   782    	POP	BC
0B01B5 DD2FFB              A   783    	LD	(IX+%FFFFFFFB),HL
                           A   784    ;   76	    int row_size = width * sizeof(uint3
                           A   785    .LINE 76
                           A   786    
0B01B8 DD2709              A   787    	LD	HL,(IX+%9)
0B01BB 29                  A   788    	ADD	HL,HL
0B01BC 29                  A   789    	ADD	HL,HL
0B01BD DD2FF8              A   790    	LD	(IX+%FFFFFFF8),HL
                           A   791    ;   77	
                           A   792    ;   78	    for (y = 0; y < height / 2; y++) {
                           A   793    .LINE 78
                           A   794    
0B01C0 DD36FE00            A   795    	LD	(IX+%FFFFFFFE),%0
0B01C4 DD36FF00            A   796    	LD	(IX+%FFFFFFFF),%0
0B01C8 C3 58 02 0B         A   797    	JR	L_14
0B01CC                     A   798    L_12:
                           A   799    ;   79	        uint32_t * top_row = framebuffe
                           A   800    .LINE 79
                           A   801    
0B01CC DD07FE              A   802    	LD	BC,(IX+%FFFFFFFE)
0B01CF CD 22 39 0B         A   803    	CALL	__stoiu
0B01D3 DD0709              A   804    	LD	BC,(IX+%9)
0B01D6 CD 8A 3F 0B         A   805    	CALL	__imuls
0B01DA 29                  A   806    	ADD	HL,HL
0B01DB 29                  A   807    	ADD	HL,HL
0B01DC DD0706              A   808    	LD	BC,(IX+%6)
0B01DF 09                  A   809    	ADD	HL,BC
0B01E0 DD2FF5              A   810    	LD	(IX+%FFFFFFF5),HL
                           A   811    ;   80	        uint32_t * bottom_row = framebu
                           A   812    .LINE 80
                           A   813    
0B01E3 DD07FE              A   814    	LD	BC,(IX+%FFFFFFFE)
0B01E6 CD 22 39 0B         A   815    	CALL	__stoiu
0B01EA E5C1                A   816    	LD	BC,HL
0B01EC DD270C              A   817    	LD	HL,(IX+%C)
0B01EF B7                  A   818    	OR	A,A
0B01F0 ED42                A   819    	SBC	HL,BC
0B01F2 2B                  A   820    	DEC	HL
0B01F3 DD0709              A   821    	LD	BC,(IX+%9)
0B01F6 CD 8A 3F 0B         A   822    	CALL	__imuls
0B01FA 29                  A   823    	ADD	HL,HL
0B01FB 29                  A   824    	ADD	HL,HL
0B01FC DD0706              A   825    	LD	BC,(IX+%6)
0B01FF 09                  A   826    	ADD	HL,BC
0B0200 DD2FF2              A   827    	LD	(IX+%FFFFFFF2),HL
                           A   828    ;   81	
                           A   829    ;   82	        memcpy(row_buffer, top_row, row
                           A   830    .LINE 82
                           A   831    
0B0203 DD07F8              A   832    	LD	BC,(IX+%FFFFFFF8)
0B0206 C5                  A   833    	PUSH	BC
0B0207 DD07F5              A   834    	LD	BC,(IX+%FFFFFFF5)
0B020A C5                  A   835    	PUSH	BC
0B020B DD07FB              A   836    	LD	BC,(IX+%FFFFFFFB)
0B020E C5                  A   837    	PUSH	BC
0B020F DD77F1              A   838    	LD	(IX+%FFFFFFF1),A
0B0212 CD FB 3C 0B         A   839    	CALL	_memcpy
0B0216 DD7EF1              A   840    	LD	A,(IX+%FFFFFFF1)
0B0219 C1                  A   841    	POP	BC
0B021A C1                  A   842    	POP	BC
0B021B C1                  A   843    	POP	BC
                           A   844    ;   83	        memcpy(top_row, bottom_row, row
                           A   845    .LINE 83
                           A   846    
0B021C DD07F8              A   847    	LD	BC,(IX+%FFFFFFF8)
0B021F C5                  A   848    	PUSH	BC
0B0220 DD07F2              A   849    	LD	BC,(IX+%FFFFFFF2)
0B0223 C5                  A   850    	PUSH	BC
0B0224 DD07F5              A   851    	LD	BC,(IX+%FFFFFFF5)
0B0227 C5                  A   852    	PUSH	BC
0B0228 DD77F1              A   853    	LD	(IX+%FFFFFFF1),A
0B022B CD FB 3C 0B         A   854    	CALL	_memcpy
0B022F DD7EF1              A   855    	LD	A,(IX+%FFFFFFF1)
0B0232 C1                  A   856    	POP	BC
0B0233 C1                  A   857    	POP	BC
0B0234 C1                  A   858    	POP	BC
                           A   859    ;   84	        memcpy(bottom_row, row_buffer, 
                           A   860    .LINE 84
                           A   861    
0B0235 DD07F8              A   862    	LD	BC,(IX+%FFFFFFF8)
0B0238 C5                  A   863    	PUSH	BC
0B0239 DD07FB              A   864    	LD	BC,(IX+%FFFFFFFB)
0B023C C5                  A   865    	PUSH	BC
0B023D DD07F2              A   866    	LD	BC,(IX+%FFFFFFF2)
0B0240 C5                  A   867    	PUSH	BC
0B0241 DD77F1              A   868    	LD	(IX+%FFFFFFF1),A
0B0244 CD FB 3C 0B         A   869    	CALL	_memcpy
0B0248 DD7EF1              A   870    	LD	A,(IX+%FFFFFFF1)
0B024B C1                  A   871    	POP	BC
0B024C C1                  A   872    	POP	BC
0B024D C1                  A   873    	POP	BC
0B024E DD27FE              A   874    	LD	HL,(IX+%FFFFFFFE)
0B0251 23                  A   875    	INC	HL
0B0252 DD75FE              A   876    	LD	(IX+%FFFFFFFE),L
0B0255 DD74FF              A   877    	LD	(IX+%FFFFFFFF),H
                           A   878    ;   85	    }
0B0258                     A   879    L_14:
                           A   880    .LINE 85
                           A   881    
0B0258 01020000            A   882    	LD	BC,2
0B025C DD270C              A   883    	LD	HL,(IX+%C)
0B025F CD C6 3F 0B         A   884    	CALL	__idivs
0B0263 E5D1                A   885    	LD	DE,HL
0B0265 DD07FE              A   886    	LD	BC,(IX+%FFFFFFFE)
0B0268 CD 22 39 0B         A   887    	CALL	__stoiu
0B026C B7                  A   888    	OR	A,A
0B026D ED52                A   889    	SBC	HL,DE
0B026F FA 79 02 0B         A   890    	JP	M,L__11
0B0273 EA CC 01 0B         A   891    	JP	PE,L_12
0B0277 18 04               A   892    	JR	L__12
0B0279                     A   893    L__11:
0B0279 E2 CC 01 0B         A   894    	JP	PO,L_12
0B027D                     A   895    L__12:
                           A   896    ;   86	
                           A   897    ;   87	    free(row_buffer);
                           A   898    .LINE 87
                           A   899    
0B027D DD07FB              A   900    	LD	BC,(IX+%FFFFFFFB)
0B0280 C5                  A   901    	PUSH	BC
0B0281 CD 46 35 0B         A   902    	CALL	_free
0B0285 C1                  A   903    	POP	BC
                           A   904    ;   88	}
                           A   905    .LINE 88
                           A   906    
0B0286 DDF9                A   907    	LD	SP,IX
0B0288 DDE1                A   908    	POP	IX
0B028A C9                  A   909    	RET	
                           A   910    
                           A   911    
                           A   912    ;**************************** _flip ***********
                           A   913    ;Name                         Addr/Register   S
                           A   914    ;_free                               IMPORT  --
                           A   915    ;_memcpy                             IMPORT  --
                           A   916    ;_malloc                             IMPORT  --
                           A   917    ;bottom_row                           IX-14    
                           A   918    ;top_row                              IX-11    
                           A   919    ;row_size                              IX-8    
                           A   920    ;row_buffer                            IX-5    
                           A   921    ;y                                     IX-2    
                           A   922    ;height                               IX+12    
                           A   923    ;width                                 IX+9    
                           A   924    ;framebuffer                           IX+6    
                           A   925    
                           A   926    
                           A   927    ; Stack Frame Size: 30 (bytes)
                           A   928    ;       Spill Code: 0 (instruction)
                           A   929    
                           A   930    
                           A   931    .ENDFUNC "flip",88,"_flip"
                           A   932    ;   89	
                           A   933    ;   90	void twiddle_buffer(char* buffer, int w
0B028B                     A   934    _twiddle_buffer:
                           A   935    .DEFINE "_twiddle_buffer"
                           A   936    
                           A   937    .VALUE _twiddle_buffer
                           A   938    
                           A   939    .CLASS 2
                           A   940    
                           A   941    .TYPE 65
                           A   942    
                           A   943    .ENDEF
                           A   944    
                           A   945    .BEGFUNC "twiddle_buffer",90,"_twiddle_buffer"
                           A   946    
                           A   947    .LINE 90
                           A   948    
                           A   949    .DEFINE "buffer"
                           A   950    
                           A   951    .CLASS 65
                           A   952    
                           A   953    .VALUE 6
                           A   954    
                           A   955    .TYPE 34
                           A   956    
                           A   957    .ENDEF
                           A   958    
                           A   959    .DEFINE "width"
                           A   960    
                           A   961    .CLASS 65
                           A   962    
                           A   963    .VALUE 9
                           A   964    
                           A   965    .TYPE 4
                           A   966    
                           A   967    .ENDEF
                           A   968    
                           A   969    .DEFINE "height"
                           A   970    
                           A   971    .CLASS 65
                           A   972    
                           A   973    .VALUE 12
                           A   974    
                           A   975    .TYPE 4
                           A   976    
                           A   977    .ENDEF
                           A   978    
                           A   979    .DEFINE "col"
                           A   980    
                           A   981    .CLASS 65
                           A   982    
                           A   983    .VALUE -3
                           A   984    
                           A   985    .TYPE 4
                           A   986    
                           A   987    .ENDEF
                           A   988    
                           A   989    .DEFINE "tempRow"
                           A   990    
                           A   991    .CLASS 65
                           A   992    
                           A   993    .VALUE -6
                           A   994    
                           A   995    .TYPE 34
                           A   996    
                           A   997    .ENDEF
                           A   998    
                           A   999    .DEFINE "oppositeRowPtr"
                           A  1000    
                           A  1001    .CLASS 65
                           A  1002    
                           A  1003    .VALUE -9
                           A  1004    
                           A  1005    .TYPE 34
                           A  1006    
                           A  1007    .ENDEF
                           A  1008    
                           A  1009    .DEFINE "rowPtr"
                           A  1010    
                           A  1011    .CLASS 65
                           A  1012    
                           A  1013    .VALUE -12
                           A  1014    
                           A  1015    .TYPE 34
                           A  1016    
                           A  1017    .ENDEF
                           A  1018    
                           A  1019    .DEFINE "row"
                           A  1020    
                           A  1021    .CLASS 65
                           A  1022    
                           A  1023    .VALUE -15
                           A  1024    
                           A  1025    .TYPE 4
                           A  1026    
                           A  1027    .ENDEF
                           A  1028    
0B028B DDE5                A  1029    	PUSH	IX
0B028D DD210000 00         A  1030    	LD	IX,0
0B0292 DD39                A  1031    	ADD	IX,SP
0B0294 ED22E4              A  1032    	LEA	HL,IX+%FFFFFFE4
0B0297 F9                  A  1033    	LD	SP,HL
                           A  1034    ;   91	    int row, col;
                           A  1035    ;   92	    char* rowPtr;
                           A  1036    ;   93		char* oppositeRowPtr;
                           A  1037    ;   94		char* tempRow = (char*)malloc(width
                           A  1038    .LINE 94
                           A  1039    
0B0298 DD2709              A  1040    	LD	HL,(IX+%9)
0B029B 29                  A  1041    	ADD	HL,HL
0B029C 29                  A  1042    	ADD	HL,HL
0B029D E5                  A  1043    	PUSH	HL
0B029E DD77E4              A  1044    	LD	(IX+%FFFFFFE4),A
0B02A1 CD 4B 36 0B         A  1045    	CALL	_malloc
0B02A5 DD7EE4              A  1046    	LD	A,(IX+%FFFFFFE4)
0B02A8 C1                  A  1047    	POP	BC
0B02A9 DD2FFA              A  1048    	LD	(IX+%FFFFFFFA),HL
                           A  1049    ;   95	
                           A  1050    ;   96	    //Iterate over each row
                           A  1051    ;   97	    for (row = 0; row < height / 2; row
                           A  1052    .LINE 97
                           A  1053    
0B02AC 01000000            A  1054    	LD	BC,0
0B02B0 DD0FF1              A  1055    	LD	(IX+%FFFFFFF1),BC
0B02B3 C3 6B 04 0B         A  1056    	JR	L_24
0B02B7                     A  1057    L_22:
                           A  1058    ;   98	        rowPtr = buffer + row * width *
                           A  1059    .LINE 98
                           A  1060    
0B02B7 DD27F1              A  1061    	LD	HL,(IX+%FFFFFFF1)
0B02BA DD0709              A  1062    	LD	BC,(IX+%9)
0B02BD CD 8A 3F 0B         A  1063    	CALL	__imuls
0B02C1 29                  A  1064    	ADD	HL,HL
0B02C2 29                  A  1065    	ADD	HL,HL
0B02C3 DD0706              A  1066    	LD	BC,(IX+%6)
0B02C6 09                  A  1067    	ADD	HL,BC
0B02C7 DD2FF4              A  1068    	LD	(IX+%FFFFFFF4),HL
                           A  1069    ;   99	        oppositeRowPtr = buffer + (heig
                           A  1070    .LINE 99
                           A  1071    
0B02CA DD07F1              A  1072    	LD	BC,(IX+%FFFFFFF1)
0B02CD DD270C              A  1073    	LD	HL,(IX+%C)
0B02D0 B7                  A  1074    	OR	A,A
0B02D1 ED42                A  1075    	SBC	HL,BC
0B02D3 2B                  A  1076    	DEC	HL
0B02D4 DD0709              A  1077    	LD	BC,(IX+%9)
0B02D7 CD 8A 3F 0B         A  1078    	CALL	__imuls
0B02DB 29                  A  1079    	ADD	HL,HL
0B02DC 29                  A  1080    	ADD	HL,HL
0B02DD DD0706              A  1081    	LD	BC,(IX+%6)
0B02E0 09                  A  1082    	ADD	HL,BC
0B02E1 DD2FF7              A  1083    	LD	(IX+%FFFFFFF7),HL
                           A  1084    ;  100	
                           A  1085    ;  101	        //Swap bytes within each row (B
                           A  1086    ;  102	        for (col = 0; col < width; col+
                           A  1087    .LINE 102
                           A  1088    
0B02E4 01000000            A  1089    	LD	BC,0
0B02E8 DD0FFD              A  1090    	LD	(IX+%FFFFFFFD),BC
0B02EB C3 4D 04 0B         A  1091    	JR	L_21
0B02EF                     A  1092    L_19:
                           A  1093    ;  103	            tempRow[col * 4] = opposite
                           A  1094    .LINE 103
                           A  1095    
0B02EF DD27FD              A  1096    	LD	HL,(IX+%FFFFFFFD)
0B02F2 29                  A  1097    	ADD	HL,HL
0B02F3 29                  A  1098    	ADD	HL,HL
0B02F4 E5C1                A  1099    	LD	BC,HL
0B02F6 DD27FD              A  1100    	LD	HL,(IX+%FFFFFFFD)
0B02F9 29                  A  1101    	ADD	HL,HL
0B02FA 29                  A  1102    	ADD	HL,HL
0B02FB DD17F7              A  1103    	LD	DE,(IX+%FFFFFFF7)
0B02FE 19                  A  1104    	ADD	HL,DE
0B02FF E5FDE1              A  1105    	LD	IY,HL
0B0302 C5D1                A  1106    	LD	DE,BC
0B0304 DD27FA              A  1107    	LD	HL,(IX+%FFFFFFFA)
0B0307 19                  A  1108    	ADD	HL,DE
0B0308 FD7E02              A  1109    	LD	A,(IY+%2)
0B030B 77                  A  1110    	LD	(HL),A
                           A  1111    ;  104	            tempRow[col * 4 + 1] = oppo
                           A  1112    .LINE 104
                           A  1113    
0B030C DD27FD              A  1114    	LD	HL,(IX+%FFFFFFFD)
0B030F 29                  A  1115    	ADD	HL,HL
0B0310 29                  A  1116    	ADD	HL,HL
0B0311 E5D1                A  1117    	LD	DE,HL
0B0313 DD27F7              A  1118    	LD	HL,(IX+%FFFFFFF7)
0B0316 09                  A  1119    	ADD	HL,BC
0B0317 E5FDE1              A  1120    	LD	IY,HL
0B031A D5C1                A  1121    	LD	BC,DE
0B031C DD27FA              A  1122    	LD	HL,(IX+%FFFFFFFA)
0B031F 09                  A  1123    	ADD	HL,BC
0B0320 23                  A  1124    	INC	HL
0B0321 FD7E01              A  1125    	LD	A,(IY+%1)
0B0324 77                  A  1126    	LD	(HL),A
                           A  1127    ;  105	            tempRow[col * 4 + 2] = oppo
                           A  1128    .LINE 105
                           A  1129    
0B0325 DD27FD              A  1130    	LD	HL,(IX+%FFFFFFFD)
0B0328 29                  A  1131    	ADD	HL,HL
0B0329 29                  A  1132    	ADD	HL,HL
0B032A E5C1                A  1133    	LD	BC,HL
0B032C DD27F7              A  1134    	LD	HL,(IX+%FFFFFFF7)
0B032F 19                  A  1135    	ADD	HL,DE
0B0330 E5FDE1              A  1136    	LD	IY,HL
0B0333 C5D1                A  1137    	LD	DE,BC
0B0335 DD27FA              A  1138    	LD	HL,(IX+%FFFFFFFA)
0B0338 19                  A  1139    	ADD	HL,DE
0B0339 23                  A  1140    	INC	HL
0B033A 23                  A  1141    	INC	HL
0B033B FD7E00              A  1142    	LD	A,(IY)
0B033E 77                  A  1143    	LD	(HL),A
                           A  1144    ;  106	            tempRow[col * 4 + 3] = oppo
                           A  1145    .LINE 106
                           A  1146    
0B033F DD27FD              A  1147    	LD	HL,(IX+%FFFFFFFD)
0B0342 29                  A  1148    	ADD	HL,HL
0B0343 29                  A  1149    	ADD	HL,HL
0B0344 E5D1                A  1150    	LD	DE,HL
0B0346 DD27F7              A  1151    	LD	HL,(IX+%FFFFFFF7)
0B0349 09                  A  1152    	ADD	HL,BC
0B034A E5FDE1              A  1153    	LD	IY,HL
0B034D DD2FEE              A  1154    	LD	(IX+%FFFFFFEE),HL	; spill
0B0350 ED2303              A  1155    	LEA	HL,IY+%3
0B0353 DD2FEB              A  1156    	LD	(IX+%FFFFFFEB),HL	; spill
0B0356 D5C1                A  1157    	LD	BC,DE
0B0358 DD27FA              A  1158    	LD	HL,(IX+%FFFFFFFA)
0B035B 09                  A  1159    	ADD	HL,BC
0B035C E5FDE1              A  1160    	LD	IY,HL
0B035F DD27EB              A  1161    	LD	HL,(IX+%FFFFFFEB)	; unspill
0B0362 7E                  A  1162    	LD	A,(HL)
0B0363 FD7703              A  1163    	LD	(IY+%3),A
                           A  1164    ;  107	
                           A  1165    ;  108	            oppositeRowPtr[col * 4] = r
                           A  1166    .LINE 108
                           A  1167    
0B0366 DD27FD              A  1168    	LD	HL,(IX+%FFFFFFFD)
0B0369 29                  A  1169    	ADD	HL,HL
0B036A 29                  A  1170    	ADD	HL,HL
0B036B E5C1                A  1171    	LD	BC,HL
0B036D DD27F4              A  1172    	LD	HL,(IX+%FFFFFFF4)
0B0370 19                  A  1173    	ADD	HL,DE
0B0371 E5FDE1              A  1174    	LD	IY,HL
0B0374 C5D1                A  1175    	LD	DE,BC
0B0376 DD27F7              A  1176    	LD	HL,(IX+%FFFFFFF7)
0B0379 19                  A  1177    	ADD	HL,DE
0B037A FD7E02              A  1178    	LD	A,(IY+%2)
0B037D 77                  A  1179    	LD	(HL),A
                           A  1180    ;  109	            oppositeRowPtr[col * 4 + 1]
                           A  1181    .LINE 109
                           A  1182    
0B037E DD27FD              A  1183    	LD	HL,(IX+%FFFFFFFD)
0B0381 29                  A  1184    	ADD	HL,HL
0B0382 29                  A  1185    	ADD	HL,HL
0B0383 E5D1                A  1186    	LD	DE,HL
0B0385 DD27F4              A  1187    	LD	HL,(IX+%FFFFFFF4)
0B0388 09                  A  1188    	ADD	HL,BC
0B0389 E5FDE1              A  1189    	LD	IY,HL
0B038C D5C1                A  1190    	LD	BC,DE
0B038E DD27F7              A  1191    	LD	HL,(IX+%FFFFFFF7)
0B0391 09                  A  1192    	ADD	HL,BC
0B0392 23                  A  1193    	INC	HL
0B0393 FD7E01              A  1194    	LD	A,(IY+%1)
0B0396 77                  A  1195    	LD	(HL),A
                           A  1196    ;  110	            oppositeRowPtr[col * 4 + 2]
                           A  1197    .LINE 110
                           A  1198    
0B0397 DD27FD              A  1199    	LD	HL,(IX+%FFFFFFFD)
0B039A 29                  A  1200    	ADD	HL,HL
0B039B 29                  A  1201    	ADD	HL,HL
0B039C E5C1                A  1202    	LD	BC,HL
0B039E DD27F4              A  1203    	LD	HL,(IX+%FFFFFFF4)
0B03A1 19                  A  1204    	ADD	HL,DE
0B03A2 E5FDE1              A  1205    	LD	IY,HL
0B03A5 C5D1                A  1206    	LD	DE,BC
0B03A7 DD27F7              A  1207    	LD	HL,(IX+%FFFFFFF7)
0B03AA 19                  A  1208    	ADD	HL,DE
0B03AB 23                  A  1209    	INC	HL
0B03AC 23                  A  1210    	INC	HL
0B03AD FD7E00              A  1211    	LD	A,(IY)
0B03B0 77                  A  1212    	LD	(HL),A
                           A  1213    ;  111	            oppositeRowPtr[col * 4 + 3]
                           A  1214    .LINE 111
                           A  1215    
0B03B1 DD27FD              A  1216    	LD	HL,(IX+%FFFFFFFD)
0B03B4 29                  A  1217    	ADD	HL,HL
0B03B5 29                  A  1218    	ADD	HL,HL
0B03B6 E5D1                A  1219    	LD	DE,HL
0B03B8 DD27F4              A  1220    	LD	HL,(IX+%FFFFFFF4)
0B03BB 09                  A  1221    	ADD	HL,BC
0B03BC E5FDE1              A  1222    	LD	IY,HL
0B03BF DD2FEE              A  1223    	LD	(IX+%FFFFFFEE),HL	; spill
0B03C2 ED2303              A  1224    	LEA	HL,IY+%3
0B03C5 DD2FE8              A  1225    	LD	(IX+%FFFFFFE8),HL	; spill
0B03C8 D5C1                A  1226    	LD	BC,DE
0B03CA DD27F7              A  1227    	LD	HL,(IX+%FFFFFFF7)
0B03CD 09                  A  1228    	ADD	HL,BC
0B03CE E5FDE1              A  1229    	LD	IY,HL
0B03D1 DD27E8              A  1230    	LD	HL,(IX+%FFFFFFE8)	; unspill
0B03D4 7E                  A  1231    	LD	A,(HL)
0B03D5 FD7703              A  1232    	LD	(IY+%3),A
                           A  1233    ;  112	
                           A  1234    ;  113	            rowPtr[col * 4] = tempRow[c
                           A  1235    .LINE 113
                           A  1236    
0B03D8 DD27FD              A  1237    	LD	HL,(IX+%FFFFFFFD)
0B03DB 29                  A  1238    	ADD	HL,HL
0B03DC 29                  A  1239    	ADD	HL,HL
0B03DD E5C1                A  1240    	LD	BC,HL
0B03DF DD27FA              A  1241    	LD	HL,(IX+%FFFFFFFA)
0B03E2 19                  A  1242    	ADD	HL,DE
0B03E3 E5FDE1              A  1243    	LD	IY,HL
0B03E6 C5D1                A  1244    	LD	DE,BC
0B03E8 DD27F4              A  1245    	LD	HL,(IX+%FFFFFFF4)
0B03EB 19                  A  1246    	ADD	HL,DE
0B03EC FD7E00              A  1247    	LD	A,(IY)
0B03EF 77                  A  1248    	LD	(HL),A
                           A  1249    ;  114	            rowPtr[col * 4 + 1] = tempR
                           A  1250    .LINE 114
                           A  1251    
0B03F0 DD27FD              A  1252    	LD	HL,(IX+%FFFFFFFD)
0B03F3 29                  A  1253    	ADD	HL,HL
0B03F4 29                  A  1254    	ADD	HL,HL
0B03F5 E5D1                A  1255    	LD	DE,HL
0B03F7 DD27FA              A  1256    	LD	HL,(IX+%FFFFFFFA)
0B03FA 09                  A  1257    	ADD	HL,BC
0B03FB E5FDE1              A  1258    	LD	IY,HL
0B03FE D5C1                A  1259    	LD	BC,DE
0B0400 DD27F4              A  1260    	LD	HL,(IX+%FFFFFFF4)
0B0403 09                  A  1261    	ADD	HL,BC
0B0404 23                  A  1262    	INC	HL
0B0405 FD7E01              A  1263    	LD	A,(IY+%1)
0B0408 77                  A  1264    	LD	(HL),A
                           A  1265    ;  115	            rowPtr[col * 4 + 2] = tempR
                           A  1266    .LINE 115
                           A  1267    
0B0409 DD27FD              A  1268    	LD	HL,(IX+%FFFFFFFD)
0B040C 29                  A  1269    	ADD	HL,HL
0B040D 29                  A  1270    	ADD	HL,HL
0B040E E5C1                A  1271    	LD	BC,HL
0B0410 DD27FA              A  1272    	LD	HL,(IX+%FFFFFFFA)
0B0413 19                  A  1273    	ADD	HL,DE
0B0414 E5FDE1              A  1274    	LD	IY,HL
0B0417 C5D1                A  1275    	LD	DE,BC
0B0419 DD27F4              A  1276    	LD	HL,(IX+%FFFFFFF4)
0B041C 19                  A  1277    	ADD	HL,DE
0B041D 23                  A  1278    	INC	HL
0B041E 23                  A  1279    	INC	HL
0B041F FD7E02              A  1280    	LD	A,(IY+%2)
0B0422 77                  A  1281    	LD	(HL),A
                           A  1282    ;  116	            rowPtr[col * 4 + 3] = tempR
                           A  1283    .LINE 116
                           A  1284    
0B0423 DD27FA              A  1285    	LD	HL,(IX+%FFFFFFFA)
0B0426 09                  A  1286    	ADD	HL,BC
0B0427 E5FDE1              A  1287    	LD	IY,HL
0B042A DD2FEE              A  1288    	LD	(IX+%FFFFFFEE),HL	; spill
0B042D ED2303              A  1289    	LEA	HL,IY+%3
0B0430 DD2FE5              A  1290    	LD	(IX+%FFFFFFE5),HL	; spill
0B0433 DD27FD              A  1291    	LD	HL,(IX+%FFFFFFFD)
0B0436 29                  A  1292    	ADD	HL,HL
0B0437 29                  A  1293    	ADD	HL,HL
0B0438 DD07F4              A  1294    	LD	BC,(IX+%FFFFFFF4)
0B043B 09                  A  1295    	ADD	HL,BC
0B043C E5FDE1              A  1296    	LD	IY,HL
0B043F DD27E5              A  1297    	LD	HL,(IX+%FFFFFFE5)	; unspill
0B0442 7E                  A  1298    	LD	A,(HL)
0B0443 FD7703              A  1299    	LD	(IY+%3),A
0B0446 DD07FD              A  1300    	LD	BC,(IX+%FFFFFFFD)
0B0449 03                  A  1301    	INC	BC
0B044A DD0FFD              A  1302    	LD	(IX+%FFFFFFFD),BC
                           A  1303    ;  117	        }
0B044D                     A  1304    L_21:
                           A  1305    .LINE 117
                           A  1306    
0B044D DD0709              A  1307    	LD	BC,(IX+%9)
0B0450 DD27FD              A  1308    	LD	HL,(IX+%FFFFFFFD)
0B0453 B7                  A  1309    	OR	A,A
0B0454 ED42                A  1310    	SBC	HL,BC
0B0456 FA 60 04 0B         A  1311    	JP	M,L__16
0B045A EA EF 02 0B         A  1312    	JP	PE,L_19
0B045E 18 04               A  1313    	JR	L__17
0B0460                     A  1314    L__16:
0B0460 E2 EF 02 0B         A  1315    	JP	PO,L_19
0B0464                     A  1316    L__17:
0B0464 DD07F1              A  1317    	LD	BC,(IX+%FFFFFFF1)
0B0467 03                  A  1318    	INC	BC
0B0468 DD0FF1              A  1319    	LD	(IX+%FFFFFFF1),BC
                           A  1320    ;  118	    }
0B046B                     A  1321    L_24:
                           A  1322    .LINE 118
                           A  1323    
0B046B 01020000            A  1324    	LD	BC,2
0B046F DD270C              A  1325    	LD	HL,(IX+%C)
0B0472 CD C6 3F 0B         A  1326    	CALL	__idivs
0B0476 E5C1                A  1327    	LD	BC,HL
0B0478 DD27F1              A  1328    	LD	HL,(IX+%FFFFFFF1)
0B047B B7                  A  1329    	OR	A,A
0B047C ED42                A  1330    	SBC	HL,BC
0B047E FA 88 04 0B         A  1331    	JP	M,L__18
0B0482 EA B7 02 0B         A  1332    	JP	PE,L_22
0B0486 18 04               A  1333    	JR	L__19
0B0488                     A  1334    L__18:
0B0488 E2 B7 02 0B         A  1335    	JP	PO,L_22
0B048C                     A  1336    L__19:
                           A  1337    ;  119		free(tempRow);
                           A  1338    .LINE 119
                           A  1339    
0B048C DD07FA              A  1340    	LD	BC,(IX+%FFFFFFFA)
0B048F C5                  A  1341    	PUSH	BC
0B0490 CD 46 35 0B         A  1342    	CALL	_free
0B0494 C1                  A  1343    	POP	BC
                           A  1344    ;  120	}
                           A  1345    .LINE 120
                           A  1346    
0B0495 DDF9                A  1347    	LD	SP,IX
0B0497 DDE1                A  1348    	POP	IX
0B0499 C9                  A  1349    	RET	
                           A  1350    
                           A  1351    
                           A  1352    ;**************************** _twiddle_buffer *
                           A  1353    ;Name                         Addr/Register   S
                           A  1354    ;_free                               IMPORT  --
                           A  1355    ;_malloc                             IMPORT  --
                           A  1356    ;row                                  IX-15    
                           A  1357    ;rowPtr                               IX-12    
                           A  1358    ;oppositeRowPtr                        IX-9    
                           A  1359    ;tempRow                               IX-6    
                           A  1360    ;col                                   IX-3    
                           A  1361    ;height                               IX+12    
                           A  1362    ;width                                 IX+9    
                           A  1363    ;buffer                                IX+6    
                           A  1364    
                           A  1365    
                           A  1366    ; Stack Frame Size: 43 (bytes)
                           A  1367    ;       Spill Code: -3 (instruction)
                           A  1368    
                           A  1369    
                           A  1370    .ENDFUNC "twiddle_buffer",120,"_twiddle_buffer"
                           A  1371    ;  121	
                           A  1372    ;  122	// void bgra8888_to_rgba2222(char *inpu
                           A  1373    ;  123	    // 
                           A  1374    ;  124		// char *input_ptr = input;
                           A  1375    ;  125	    // char *output_ptr = output;
                           A  1376    ;  126	
                           A  1377    ;  127	    // while (num_pixels--) {
                           A  1378    ;  128	
                           A  1379    ;  129	        // *output_ptr = CONVR64[input[
                           A  1380    ;  130	
                           A  1381    ;  131	        // input_ptr += 4;
                           A  1382    ;  132	        // output_ptr++;
                           A  1383    ;  133			// 
                           A  1384    ;  134	    // }
                           A  1385    ;  135	// }
                           A  1386    ;  136	
                           A  1387    ;  137	void rgba8888_to_rgba2222(char *input, 
0B049A                     A  1388    _rgba8888_to_rgba2222:
                           A  1389    .DEFINE "_rgba8888_to_rgba2222"
                           A  1390    
                           A  1391    .VALUE _rgba8888_to_rgba2222
                           A  1392    
                           A  1393    .CLASS 2
                           A  1394    
                           A  1395    .TYPE 65
                           A  1396    
                           A  1397    .ENDEF
                           A  1398    
                           A  1399    .BEGFUNC "rgba8888_to_rgba2222",137,"_rgba8888_
                           A  1400    
                           A  1401    .LINE 137
                           A  1402    
                           A  1403    .DEFINE "input"
                           A  1404    
                           A  1405    .CLASS 65
                           A  1406    
                           A  1407    .VALUE 6
                           A  1408    
                           A  1409    .TYPE 34
                           A  1410    
                           A  1411    .ENDEF
                           A  1412    
                           A  1413    .DEFINE "output"
                           A  1414    
                           A  1415    .CLASS 65
                           A  1416    
                           A  1417    .VALUE 9
                           A  1418    
                           A  1419    .TYPE 34
                           A  1420    
                           A  1421    .ENDEF
                           A  1422    
                           A  1423    .DEFINE "num_pixels"
                           A  1424    
                           A  1425    .CLASS 65
                           A  1426    
                           A  1427    .VALUE 12
                           A  1428    
                           A  1429    .TYPE 14
                           A  1430    
                           A  1431    .ENDEF
                           A  1432    
                           A  1433    .DEFINE "input_ptr"
                           A  1434    
                           A  1435    .CLASS 65
                           A  1436    
                           A  1437    .VALUE -3
                           A  1438    
                           A  1439    .TYPE 34
                           A  1440    
                           A  1441    .ENDEF
                           A  1442    
                           A  1443    .DEFINE "output_ptr"
                           A  1444    
                           A  1445    .CLASS 65
                           A  1446    
                           A  1447    .VALUE -6
                           A  1448    
                           A  1449    .TYPE 34
                           A  1450    
                           A  1451    .ENDEF
                           A  1452    
                           A  1453    .DEFINE "r"
                           A  1454    
                           A  1455    .CLASS 65
                           A  1456    
                           A  1457    .VALUE -7
                           A  1458    
                           A  1459    .TYPE 12
                           A  1460    
                           A  1461    .ENDEF
                           A  1462    
                           A  1463    .DEFINE "g"
                           A  1464    
                           A  1465    .CLASS 65
                           A  1466    
                           A  1467    .VALUE -8
                           A  1468    
                           A  1469    .TYPE 12
                           A  1470    
                           A  1471    .ENDEF
                           A  1472    
                           A  1473    .DEFINE "b"
                           A  1474    
                           A  1475    .CLASS 65
                           A  1476    
                           A  1477    .VALUE -9
                           A  1478    
                           A  1479    .TYPE 12
                           A  1480    
                           A  1481    .ENDEF
                           A  1482    
                           A  1483    .DEFINE "a"
                           A  1484    
                           A  1485    .CLASS 65
                           A  1486    
                           A  1487    .VALUE -10
                           A  1488    
                           A  1489    .TYPE 12
                           A  1490    
                           A  1491    .ENDEF
                           A  1492    
0B049A DDE5                A  1493    	PUSH	IX
0B049C DD210000 00         A  1494    	LD	IX,0
0B04A1 DD39                A  1495    	ADD	IX,SP
0B04A3 ED22E7              A  1496    	LEA	HL,IX+%FFFFFFE7
0B04A6 F9                  A  1497    	LD	SP,HL
                           A  1498    ;  138	    char *input_ptr = input;
                           A  1499    .LINE 138
                           A  1500    
0B04A7 DD0706              A  1501    	LD	BC,(IX+%6)
0B04AA DD0FFD              A  1502    	LD	(IX+%FFFFFFFD),BC
                           A  1503    ;  139	    char *output_ptr = output;
                           A  1504    .LINE 139
                           A  1505    
0B04AD DD0709              A  1506    	LD	BC,(IX+%9)
0B04B0 DD0FFA              A  1507    	LD	(IX+%FFFFFFFA),BC
                           A  1508    ;  140	
                           A  1509    ;  141	    while (num_pixels--) {
                           A  1510    .LINE 141
                           A  1511    
0B04B3 C3 4B 05 0B         A  1512    	JR	L_33
0B04B7                     A  1513    L_34:
                           A  1514    ;  142	        uint8_t r = *input_ptr++;
                           A  1515    .LINE 142
                           A  1516    
0B04B7 DD07FD              A  1517    	LD	BC,(IX+%FFFFFFFD)
0B04BA DD0FF3              A  1518    	LD	(IX+%FFFFFFF3),BC
0B04BD DD07FD              A  1519    	LD	BC,(IX+%FFFFFFFD)
0B04C0 03                  A  1520    	INC	BC
0B04C1 DD0FFD              A  1521    	LD	(IX+%FFFFFFFD),BC
0B04C4 DD27F3              A  1522    	LD	HL,(IX+%FFFFFFF3)
0B04C7 7E                  A  1523    	LD	A,(HL)
0B04C8 DD77F9              A  1524    	LD	(IX+%FFFFFFF9),A
                           A  1525    ;  143			uint8_t g = *input_ptr++;
                           A  1526    .LINE 143
                           A  1527    
0B04CB DD07FD              A  1528    	LD	BC,(IX+%FFFFFFFD)
0B04CE DD0FF0              A  1529    	LD	(IX+%FFFFFFF0),BC
0B04D1 DD07FD              A  1530    	LD	BC,(IX+%FFFFFFFD)
0B04D4 03                  A  1531    	INC	BC
0B04D5 DD0FFD              A  1532    	LD	(IX+%FFFFFFFD),BC
0B04D8 DD27F0              A  1533    	LD	HL,(IX+%FFFFFFF0)
0B04DB 7E                  A  1534    	LD	A,(HL)
0B04DC DD77F8              A  1535    	LD	(IX+%FFFFFFF8),A
                           A  1536    ;  144			uint8_t b = *input_ptr++;
                           A  1537    .LINE 144
                           A  1538    
0B04DF DD07FD              A  1539    	LD	BC,(IX+%FFFFFFFD)
0B04E2 DD0FED              A  1540    	LD	(IX+%FFFFFFED),BC
0B04E5 DD07FD              A  1541    	LD	BC,(IX+%FFFFFFFD)
0B04E8 03                  A  1542    	INC	BC
0B04E9 DD0FFD              A  1543    	LD	(IX+%FFFFFFFD),BC
0B04EC DD27ED              A  1544    	LD	HL,(IX+%FFFFFFED)
0B04EF 7E                  A  1545    	LD	A,(HL)
0B04F0 DD77F7              A  1546    	LD	(IX+%FFFFFFF7),A
                           A  1547    ;  145	        uint8_t a = *input_ptr++;
                           A  1548    .LINE 145
                           A  1549    
0B04F3 DD07FD              A  1550    	LD	BC,(IX+%FFFFFFFD)
0B04F6 DD0FEA              A  1551    	LD	(IX+%FFFFFFEA),BC
0B04F9 DD07FD              A  1552    	LD	BC,(IX+%FFFFFFFD)
0B04FC 03                  A  1553    	INC	BC
0B04FD DD0FFD              A  1554    	LD	(IX+%FFFFFFFD),BC
0B0500 DD27EA              A  1555    	LD	HL,(IX+%FFFFFFEA)
0B0503 7E                  A  1556    	LD	A,(HL)
0B0504 DD77F6              A  1557    	LD	(IX+%FFFFFFF6),A
                           A  1558    ;  146	
                           A  1559    ;  147	        *output_ptr++ = (r & 0xC0) | ((
                           A  1560    .LINE 147
                           A  1561    
0B0507 DD07FA              A  1562    	LD	BC,(IX+%FFFFFFFA)
0B050A DD0FE7              A  1563    	LD	(IX+%FFFFFFE7),BC
0B050D DD7EF8              A  1564    	LD	A,(IX+%FFFFFFF8)
0B0510 CB3F                A  1565    	SRL	A
0B0512 CB3F                A  1566    	SRL	A
0B0514 E630                A  1567    	AND	A,%30
0B0516 6F                  A  1568    	LD	L,A
0B0517 DD7EF9              A  1569    	LD	A,(IX+%FFFFFFF9)
0B051A E6C0                A  1570    	AND	A,%C0
0B051C 47                  A  1571    	LD	B,A
0B051D 7D                  A  1572    	LD	A,L
0B051E B0                  A  1573    	OR	A,B
0B051F 47                  A  1574    	LD	B,A
0B0520 DD7EF7              A  1575    	LD	A,(IX+%FFFFFFF7)
0B0523 CB3F                A  1576    	SRL	A
0B0525 CB3F                A  1577    	SRL	A
0B0527 CB3F                A  1578    	SRL	A
0B0529 CB3F                A  1579    	SRL	A
0B052B E60C                A  1580    	AND	A,%C
0B052D 6F                  A  1581    	LD	L,A
0B052E 78                  A  1582    	LD	A,B
0B052F B5                  A  1583    	OR	A,L
0B0530 47                  A  1584    	LD	B,A
0B0531 DD7EF6              A  1585    	LD	A,(IX+%FFFFFFF6)
0B0534 B7ED62              A  1586    	UEXT	HL
0B0537 6F                  A  1587    	LD	L,A
0B0538 3E06                A  1588    	LD	A,%6
0B053A CD 36 37 0B         A  1589    	CALL	__ishrs_b
0B053E 78                  A  1590    	LD	A,B
0B053F B5                  A  1591    	OR	A,L
0B0540 DD27E7              A  1592    	LD	HL,(IX+%FFFFFFE7)
0B0543 77                  A  1593    	LD	(HL),A
0B0544 DD07FA              A  1594    	LD	BC,(IX+%FFFFFFFA)
0B0547 03                  A  1595    	INC	BC
0B0548 DD0FFA              A  1596    	LD	(IX+%FFFFFFFA),BC
                           A  1597    ;  148	    }
0B054B                     A  1598    L_33:
                           A  1599    .LINE 148
                           A  1600    
0B054B DD270C              A  1601    	LD	HL,(IX+%C)
0B054E DD310C              A  1602    	LD	IY,(IX+%C)
0B0551 ED33FF              A  1603    	LEA	IY,IY+%FFFFFFFF
0B0554 DD3E0C              A  1604    	LD	(IX+%C),IY
0B0557 01000000            A  1605    	LD	BC,0
0B055B B7                  A  1606    	OR	A,A
0B055C ED42                A  1607    	SBC	HL,BC
0B055E C2 B7 04 0B         A  1608    	JR	NZ,L_34
                           A  1609    ;  149	}
                           A  1610    .LINE 149
                           A  1611    
0B0562 DDF9                A  1612    	LD	SP,IX
0B0564 DDE1                A  1613    	POP	IX
0B0566 C9                  A  1614    	RET	
                           A  1615    
                           A  1616    
                           A  1617    ;**************************** _rgba8888_to_rgba
                           A  1618    ;Name                         Addr/Register   S
                           A  1619    ;a                                    IX-10    
                           A  1620    ;b                                     IX-9    
                           A  1621    ;g                                     IX-8    
                           A  1622    ;r                                     IX-7    
                           A  1623    ;output_ptr                            IX-6    
                           A  1624    ;input_ptr                             IX-3    
                           A  1625    ;num_pixels                           IX+12    
                           A  1626    ;output                                IX+9    
                           A  1627    ;input                                 IX+6    
                           A  1628    
                           A  1629    
                           A  1630    ; Stack Frame Size: 40 (bytes)
                           A  1631    ;       Spill Code: -3 (instruction)
                           A  1632    
                           A  1633    
                           A  1634    .ENDFUNC "rgba8888_to_rgba2222",149,"_rgba8888_
                           A  1635    ;  150	
                           A  1636    ;  151	void clear_buffer(uint16_t buffer_id) {
0B0567                     A  1637    _clear_buffer:
                           A  1638    .DEFINE "_clear_buffer"
                           A  1639    
                           A  1640    .VALUE _clear_buffer
                           A  1641    
                           A  1642    .CLASS 2
                           A  1643    
                           A  1644    .TYPE 65
                           A  1645    
                           A  1646    .ENDEF
                           A  1647    
                           A  1648    .BEGFUNC "clear_buffer",151,"_clear_buffer"
                           A  1649    
                           A  1650    .LINE 151
                           A  1651    
                           A  1652    .DEFINE "buffer_id"
                           A  1653    
                           A  1654    .CLASS 65
                           A  1655    
                           A  1656    .VALUE 6
                           A  1657    
                           A  1658    .TYPE 13
                           A  1659    
                           A  1660    .ENDEF
                           A  1661    
0B0567 DDE5                A  1662    	PUSH	IX
0B0569 DD210000 00         A  1663    	LD	IX,0
0B056E DD39                A  1664    	ADD	IX,SP
                           A  1665    ;  152		
                           A  1666    ;  153		putch(23);
                           A  1667    .LINE 153
                           A  1668    
0B0570 01170000            A  1669    	LD	BC,23
0B0574 C5                  A  1670    	PUSH	BC
0B0575 CD 3D 31 0B         A  1671    	CALL	_putch
0B0579 C1                  A  1672    	POP	BC
                           A  1673    ;  154		putch(0);
                           A  1674    .LINE 154
                           A  1675    
0B057A 01000000            A  1676    	LD	BC,0
0B057E C5                  A  1677    	PUSH	BC
0B057F CD 3D 31 0B         A  1678    	CALL	_putch
0B0583 C1                  A  1679    	POP	BC
                           A  1680    ;  155		putch(0xA0);
                           A  1681    .LINE 155
                           A  1682    
0B0584 01A00000            A  1683    	LD	BC,160
0B0588 C5                  A  1684    	PUSH	BC
0B0589 CD 3D 31 0B         A  1685    	CALL	_putch
0B058D C1                  A  1686    	POP	BC
                           A  1687    ;  156		write16bit(buffer_id);
                           A  1688    .LINE 156
                           A  1689    
0B058E DD0706              A  1690    	LD	BC,(IX+%6)
0B0591 C5                  A  1691    	PUSH	BC
0B0592 CD 7B 25 0B         A  1692    	CALL	_write16bit
0B0596 C1                  A  1693    	POP	BC
                           A  1694    ;  157		putch(2);	
                           A  1695    .LINE 157
                           A  1696    
0B0597 01020000            A  1697    	LD	BC,2
0B059B C5                  A  1698    	PUSH	BC
0B059C CD 3D 31 0B         A  1699    	CALL	_putch
0B05A0 C1                  A  1700    	POP	BC
                           A  1701    ;  158		
                           A  1702    ;  159	}
                           A  1703    .LINE 159
                           A  1704    
0B05A1 DDF9                A  1705    	LD	SP,IX
0B05A3 DDE1                A  1706    	POP	IX
0B05A5 C9                  A  1707    	RET	
                           A  1708    
                           A  1709    
                           A  1710    ;**************************** _clear_buffer ***
                           A  1711    ;Name                         Addr/Register   S
                           A  1712    ;_write16bit                         IMPORT  --
                           A  1713    ;_putch                              IMPORT  --
                           A  1714    ;buffer_id                             IX+6    
                           A  1715    
                           A  1716    
                           A  1717    ; Stack Frame Size: 9 (bytes)
                           A  1718    ;       Spill Code: -3 (instruction)
                           A  1719    
                           A  1720    
                           A  1721    .ENDFUNC "clear_buffer",159,"_clear_buffer"
                           A  1722    ;  160	
                           A  1723    ;  161	void select_buffer (uint24_t buffer_id)
0B05A6                     A  1724    _select_buffer:
                           A  1725    .DEFINE "_select_buffer"
                           A  1726    
                           A  1727    .VALUE _select_buffer
                           A  1728    
                           A  1729    .CLASS 2
                           A  1730    
                           A  1731    .TYPE 65
                           A  1732    
                           A  1733    .ENDEF
                           A  1734    
                           A  1735    .BEGFUNC "select_buffer",161,"_select_buffer"
                           A  1736    
                           A  1737    .LINE 161
                           A  1738    
                           A  1739    .DEFINE "buffer_id"
                           A  1740    
                           A  1741    .CLASS 65
                           A  1742    
                           A  1743    .VALUE 6
                           A  1744    
                           A  1745    .TYPE 14
                           A  1746    
                           A  1747    .ENDEF
                           A  1748    
0B05A6 DDE5                A  1749    	PUSH	IX
0B05A8 DD210000 00         A  1750    	LD	IX,0
0B05AD DD39                A  1751    	ADD	IX,SP
                           A  1752    ;  162		
                           A  1753    ;  163		putch(23);
                           A  1754    .LINE 163
                           A  1755    
0B05AF 01170000            A  1756    	LD	BC,23
0B05B3 C5                  A  1757    	PUSH	BC
0B05B4 CD 3D 31 0B         A  1758    	CALL	_putch
0B05B8 C1                  A  1759    	POP	BC
                           A  1760    ;  164		putch(27);
                           A  1761    .LINE 164
                           A  1762    
0B05B9 011B0000            A  1763    	LD	BC,27
0B05BD C5                  A  1764    	PUSH	BC
0B05BE CD 3D 31 0B         A  1765    	CALL	_putch
0B05C2 C1                  A  1766    	POP	BC
                           A  1767    ;  165		putch(0x20);
                           A  1768    .LINE 165
                           A  1769    
0B05C3 01200000            A  1770    	LD	BC,32
0B05C7 C5                  A  1771    	PUSH	BC
0B05C8 CD 3D 31 0B         A  1772    	CALL	_putch
0B05CC C1                  A  1773    	POP	BC
                           A  1774    ;  166		write16bit(buffer_id);
                           A  1775    .LINE 166
                           A  1776    
0B05CD DD0706              A  1777    	LD	BC,(IX+%6)
0B05D0 C5                  A  1778    	PUSH	BC
0B05D1 CD 7B 25 0B         A  1779    	CALL	_write16bit
0B05D5 C1                  A  1780    	POP	BC
                           A  1781    ;  167		
                           A  1782    ;  168	}
                           A  1783    .LINE 168
                           A  1784    
0B05D6 DDF9                A  1785    	LD	SP,IX
0B05D8 DDE1                A  1786    	POP	IX
0B05DA C9                  A  1787    	RET	
                           A  1788    
                           A  1789    
                           A  1790    ;**************************** _select_buffer **
                           A  1791    ;Name                         Addr/Register   S
                           A  1792    ;_write16bit                         IMPORT  --
                           A  1793    ;_putch                              IMPORT  --
                           A  1794    ;buffer_id                             IX+6    
                           A  1795    
                           A  1796    
                           A  1797    ; Stack Frame Size: 9 (bytes)
                           A  1798    ;       Spill Code: -3 (instruction)
                           A  1799    
                           A  1800    
                           A  1801    .ENDFUNC "select_buffer",168,"_select_buffer"
                           A  1802    ;  169	
                           A  1803    ;  170	void add_stream_to_buffer(uint16_t buff
0B05DB                     A  1804    _add_stream_to_buffer:
                           A  1805    .DEFINE "_add_stream_to_buffer"
                           A  1806    
                           A  1807    .VALUE _add_stream_to_buffer
                           A  1808    
                           A  1809    .CLASS 2
                           A  1810    
                           A  1811    .TYPE 65
                           A  1812    
                           A  1813    .ENDEF
                           A  1814    
                           A  1815    .BEGFUNC "add_stream_to_buffer",170,"_add_strea
                           A  1816    
                           A  1817    .LINE 170
                           A  1818    
                           A  1819    .DEFINE "buffer_id"
                           A  1820    
                           A  1821    .CLASS 65
                           A  1822    
                           A  1823    .VALUE 6
                           A  1824    
                           A  1825    .TYPE 13
                           A  1826    
                           A  1827    .ENDEF
                           A  1828    
                           A  1829    .DEFINE "buffer_content"
                           A  1830    
                           A  1831    .CLASS 65
                           A  1832    
                           A  1833    .VALUE 9
                           A  1834    
                           A  1835    .TYPE 34
                           A  1836    
                           A  1837    .ENDEF
                           A  1838    
                           A  1839    .DEFINE "buffer_size"
                           A  1840    
                           A  1841    .CLASS 65
                           A  1842    
                           A  1843    .VALUE 12
                           A  1844    
                           A  1845    .TYPE 13
                           A  1846    
                           A  1847    .ENDEF
                           A  1848    
0B05DB DDE5                A  1849    	PUSH	IX
0B05DD DD210000 00         A  1850    	LD	IX,0
0B05E2 DD39                A  1851    	ADD	IX,SP
                           A  1852    ;  171	
                           A  1853    ;  172		putch(23);
                           A  1854    .LINE 172
                           A  1855    
0B05E4 01170000            A  1856    	LD	BC,23
0B05E8 C5                  A  1857    	PUSH	BC
0B05E9 CD 3D 31 0B         A  1858    	CALL	_putch
0B05ED C1                  A  1859    	POP	BC
                           A  1860    ;  173		putch(0);
                           A  1861    .LINE 173
                           A  1862    
0B05EE 01000000            A  1863    	LD	BC,0
0B05F2 C5                  A  1864    	PUSH	BC
0B05F3 CD 3D 31 0B         A  1865    	CALL	_putch
0B05F7 C1                  A  1866    	POP	BC
                           A  1867    ;  174		putch(0xA0);
                           A  1868    .LINE 174
                           A  1869    
0B05F8 01A00000            A  1870    	LD	BC,160
0B05FC C5                  A  1871    	PUSH	BC
0B05FD CD 3D 31 0B         A  1872    	CALL	_putch
0B0601 C1                  A  1873    	POP	BC
                           A  1874    ;  175		write16bit(buffer_id);
                           A  1875    .LINE 175
                           A  1876    
0B0602 DD0706              A  1877    	LD	BC,(IX+%6)
0B0605 C5                  A  1878    	PUSH	BC
0B0606 CD 7B 25 0B         A  1879    	CALL	_write16bit
0B060A C1                  A  1880    	POP	BC
                           A  1881    ;  176		putch(0);
                           A  1882    .LINE 176
                           A  1883    
0B060B 01000000            A  1884    	LD	BC,0
0B060F C5                  A  1885    	PUSH	BC
0B0610 CD 3D 31 0B         A  1886    	CALL	_putch
0B0614 C1                  A  1887    	POP	BC
                           A  1888    ;  177		write16bit(buffer_size);
                           A  1889    .LINE 177
                           A  1890    
0B0615 DD070C              A  1891    	LD	BC,(IX+%C)
0B0618 C5                  A  1892    	PUSH	BC
0B0619 CD 7B 25 0B         A  1893    	CALL	_write16bit
0B061D C1                  A  1894    	POP	BC
                           A  1895    ;  178		
                           A  1896    ;  179		mos_puts(buffer_content, buffer_siz
                           A  1897    .LINE 179
                           A  1898    
0B061E 01000000            A  1899    	LD	BC,0
0B0622 C5                  A  1900    	PUSH	BC
0B0623 DD070C              A  1901    	LD	BC,(IX+%C)
0B0626 CD 22 39 0B         A  1902    	CALL	__stoiu
0B062A E5                  A  1903    	PUSH	HL
0B062B DD0709              A  1904    	LD	BC,(IX+%9)
0B062E C5                  A  1905    	PUSH	BC
0B062F CD 55 31 0B         A  1906    	CALL	_mos_puts
0B0633 C1                  A  1907    	POP	BC
0B0634 C1                  A  1908    	POP	BC
0B0635 C1                  A  1909    	POP	BC
                           A  1910    ;  180	
                           A  1911    ;  181	}
                           A  1912    .LINE 181
                           A  1913    
0B0636 DDF9                A  1914    	LD	SP,IX
0B0638 DDE1                A  1915    	POP	IX
0B063A C9                  A  1916    	RET	
                           A  1917    
                           A  1918    
                           A  1919    ;**************************** _add_stream_to_bu
                           A  1920    ;Name                         Addr/Register   S
                           A  1921    ;_mos_puts                           IMPORT  --
                           A  1922    ;_write16bit                         IMPORT  --
                           A  1923    ;_putch                              IMPORT  --
                           A  1924    ;buffer_size                          IX+12    
                           A  1925    ;buffer_content                        IX+9    
                           A  1926    ;buffer_id                             IX+6    
                           A  1927    
                           A  1928    
                           A  1929    ; Stack Frame Size: 15 (bytes)
                           A  1930    ;       Spill Code: -3 (instruction)
                           A  1931    
                           A  1932    
                           A  1933    .ENDFUNC "add_stream_to_buffer",181,"_add_strea
                           A  1934    ;  182	
                           A  1935    ;  183	void vdp_extended_select(uint16_t buffe
0B063B                     A  1936    _vdp_extended_select:
                           A  1937    .DEFINE "_vdp_extended_select"
                           A  1938    
                           A  1939    .VALUE _vdp_extended_select
                           A  1940    
                           A  1941    .CLASS 2
                           A  1942    
                           A  1943    .TYPE 65
                           A  1944    
                           A  1945    .ENDEF
                           A  1946    
                           A  1947    .BEGFUNC "vdp_extended_select",183,"_vdp_extend
                           A  1948    
                           A  1949    .LINE 183
                           A  1950    
                           A  1951    .DEFINE "buffer_id"
                           A  1952    
                           A  1953    .CLASS 65
                           A  1954    
                           A  1955    .VALUE 6
                           A  1956    
                           A  1957    .TYPE 13
                           A  1958    
                           A  1959    .ENDEF
                           A  1960    
0B063B DDE5                A  1961    	PUSH	IX
0B063D DD210000 00         A  1962    	LD	IX,0
0B0642 DD39                A  1963    	ADD	IX,SP
                           A  1964    ;  184	
                           A  1965    ;  185		putch(23);
                           A  1966    .LINE 185
                           A  1967    
0B0644 01170000            A  1968    	LD	BC,23
0B0648 C5                  A  1969    	PUSH	BC
0B0649 CD 3D 31 0B         A  1970    	CALL	_putch
0B064D C1                  A  1971    	POP	BC
                           A  1972    ;  186		putch(27);
                           A  1973    .LINE 186
                           A  1974    
0B064E 011B0000            A  1975    	LD	BC,27
0B0652 C5                  A  1976    	PUSH	BC
0B0653 CD 3D 31 0B         A  1977    	CALL	_putch
0B0657 C1                  A  1978    	POP	BC
                           A  1979    ;  187		putch(0x20);
                           A  1980    .LINE 187
                           A  1981    
0B0658 01200000            A  1982    	LD	BC,32
0B065C C5                  A  1983    	PUSH	BC
0B065D CD 3D 31 0B         A  1984    	CALL	_putch
0B0661 C1                  A  1985    	POP	BC
                           A  1986    ;  188		write16bit(buffer_id);
                           A  1987    .LINE 188
                           A  1988    
0B0662 DD0706              A  1989    	LD	BC,(IX+%6)
0B0665 C5                  A  1990    	PUSH	BC
0B0666 CD 7B 25 0B         A  1991    	CALL	_write16bit
0B066A C1                  A  1992    	POP	BC
                           A  1993    ;  189	
                           A  1994    ;  190	}
                           A  1995    .LINE 190
                           A  1996    
0B066B DDF9                A  1997    	LD	SP,IX
0B066D DDE1                A  1998    	POP	IX
0B066F C9                  A  1999    	RET	
                           A  2000    
                           A  2001    
                           A  2002    ;**************************** _vdp_extended_sel
                           A  2003    ;Name                         Addr/Register   S
                           A  2004    ;_write16bit                         IMPORT  --
                           A  2005    ;_putch                              IMPORT  --
                           A  2006    ;buffer_id                             IX+6    
                           A  2007    
                           A  2008    
                           A  2009    ; Stack Frame Size: 9 (bytes)
                           A  2010    ;       Spill Code: -3 (instruction)
                           A  2011    
                           A  2012    
                           A  2013    .ENDFUNC "vdp_extended_select",190,"_vdp_extend
                           A  2014    ;  191	
                           A  2015    ;  192	void assign_buffer_to_bitmap(uint16_t b
0B0670                     A  2016    _assign_buffer_to_bitmap:
                           A  2017    .DEFINE "_assign_buffer_to_bitmap"
                           A  2018    
                           A  2019    .VALUE _assign_buffer_to_bitmap
                           A  2020    
                           A  2021    .CLASS 2
                           A  2022    
                           A  2023    .TYPE 65
                           A  2024    
                           A  2025    .ENDEF
                           A  2026    
                           A  2027    .BEGFUNC "assign_buffer_to_bitmap",192,"_assign
                           A  2028    
                           A  2029    .LINE 192
                           A  2030    
                           A  2031    .DEFINE "buffer_id"
                           A  2032    
                           A  2033    .CLASS 65
                           A  2034    
                           A  2035    .VALUE 6
                           A  2036    
                           A  2037    .TYPE 13
                           A  2038    
                           A  2039    .ENDEF
                           A  2040    
                           A  2041    .DEFINE "bitmap_format"
                           A  2042    
                           A  2043    .CLASS 65
                           A  2044    
                           A  2045    .VALUE 9
                           A  2046    
                           A  2047    .TYPE 12
                           A  2048    
                           A  2049    .ENDEF
                           A  2050    
                           A  2051    .DEFINE "width"
                           A  2052    
                           A  2053    .CLASS 65
                           A  2054    
                           A  2055    .VALUE 12
                           A  2056    
                           A  2057    .TYPE 13
                           A  2058    
                           A  2059    .ENDEF
                           A  2060    
                           A  2061    .DEFINE "height"
                           A  2062    
                           A  2063    .CLASS 65
                           A  2064    
                           A  2065    .VALUE 15
                           A  2066    
                           A  2067    .TYPE 13
                           A  2068    
                           A  2069    .ENDEF
                           A  2070    
0B0670 DDE5                A  2071    	PUSH	IX
0B0672 DD210000 00         A  2072    	LD	IX,0
0B0677 DD39                A  2073    	ADD	IX,SP
                           A  2074    ;  193	
                           A  2075    ;  194		vdp_extended_select(buffer_id);
                           A  2076    .LINE 194
                           A  2077    
0B0679 DD0706              A  2078    	LD	BC,(IX+%6)
0B067C C5                  A  2079    	PUSH	BC
0B067D CD 3B 06 0B         A  2080    	CALL	_vdp_extended_select
0B0681 C1                  A  2081    	POP	BC
                           A  2082    ;  195		
                           A  2083    ;  196		//Consolidate buffer: (if needed) V
                           A  2084    ;  197		
                           A  2085    ;  198		putch(23);
                           A  2086    .LINE 198
                           A  2087    
0B0682 01170000            A  2088    	LD	BC,23
0B0686 C5                  A  2089    	PUSH	BC
0B0687 CD 3D 31 0B         A  2090    	CALL	_putch
0B068B C1                  A  2091    	POP	BC
                           A  2092    ;  199		putch(0);
                           A  2093    .LINE 199
                           A  2094    
0B068C 01000000            A  2095    	LD	BC,0
0B0690 C5                  A  2096    	PUSH	BC
0B0691 CD 3D 31 0B         A  2097    	CALL	_putch
0B0695 C1                  A  2098    	POP	BC
                           A  2099    ;  200		putch(0xA0);
                           A  2100    .LINE 200
                           A  2101    
0B0696 01A00000            A  2102    	LD	BC,160
0B069A C5                  A  2103    	PUSH	BC
0B069B CD 3D 31 0B         A  2104    	CALL	_putch
0B069F C1                  A  2105    	POP	BC
                           A  2106    ;  201		write16bit(buffer_id);
                           A  2107    .LINE 201
                           A  2108    
0B06A0 DD0706              A  2109    	LD	BC,(IX+%6)
0B06A3 C5                  A  2110    	PUSH	BC
0B06A4 CD 7B 25 0B         A  2111    	CALL	_write16bit
0B06A8 C1                  A  2112    	POP	BC
                           A  2113    ;  202		putch(0x0E);
                           A  2114    .LINE 202
                           A  2115    
0B06A9 010E0000            A  2116    	LD	BC,14
0B06AD C5                  A  2117    	PUSH	BC
0B06AE CD 3D 31 0B         A  2118    	CALL	_putch
0B06B2 C1                  A  2119    	POP	BC
                           A  2120    ;  203		
                           A  2121    ;  204		//Create bitmap from buffer: VDU 23
                           A  2122    ;  205		
                           A  2123    ;  206		putch(23);
                           A  2124    .LINE 206
                           A  2125    
0B06B3 01170000            A  2126    	LD	BC,23
0B06B7 C5                  A  2127    	PUSH	BC
0B06B8 CD 3D 31 0B         A  2128    	CALL	_putch
0B06BC C1                  A  2129    	POP	BC
                           A  2130    ;  207		putch(27);
                           A  2131    .LINE 207
                           A  2132    
0B06BD 011B0000            A  2133    	LD	BC,27
0B06C1 C5                  A  2134    	PUSH	BC
0B06C2 CD 3D 31 0B         A  2135    	CALL	_putch
0B06C6 C1                  A  2136    	POP	BC
                           A  2137    ;  208		putch(0x21);
                           A  2138    .LINE 208
                           A  2139    
0B06C7 01210000            A  2140    	LD	BC,33
0B06CB C5                  A  2141    	PUSH	BC
0B06CC CD 3D 31 0B         A  2142    	CALL	_putch
0B06D0 C1                  A  2143    	POP	BC
                           A  2144    ;  209		//write16bit(buffer_id);
                           A  2145    ;  210		write16bit(width);
                           A  2146    .LINE 210
                           A  2147    
0B06D1 DD070C              A  2148    	LD	BC,(IX+%C)
0B06D4 C5                  A  2149    	PUSH	BC
0B06D5 CD 7B 25 0B         A  2150    	CALL	_write16bit
0B06D9 C1                  A  2151    	POP	BC
                           A  2152    ;  211		write16bit(height);
                           A  2153    .LINE 211
                           A  2154    
0B06DA DD070F              A  2155    	LD	BC,(IX+%F)
0B06DD C5                  A  2156    	PUSH	BC
0B06DE CD 7B 25 0B         A  2157    	CALL	_write16bit
0B06E2 C1                  A  2158    	POP	BC
                           A  2159    ;  212		putch(bitmap_format);
                           A  2160    .LINE 212
                           A  2161    
0B06E3 DD7E09              A  2162    	LD	A,(IX+%9)
0B06E6 B7ED62              A  2163    	UEXT	HL
0B06E9 6F                  A  2164    	LD	L,A
0B06EA E5                  A  2165    	PUSH	HL
0B06EB CD 3D 31 0B         A  2166    	CALL	_putch
0B06EF C1                  A  2167    	POP	BC
                           A  2168    ;  213		
                           A  2169    ;  214	}
                           A  2170    .LINE 214
                           A  2171    
0B06F0 DDF9                A  2172    	LD	SP,IX
0B06F2 DDE1                A  2173    	POP	IX
0B06F4 C9                  A  2174    	RET	
                           A  2175    
                           A  2176    
                           A  2177    ;**************************** _assign_buffer_to
                           A  2178    ;Name                         Addr/Register   S
                           A  2179    ;_write16bit                         IMPORT  --
                           A  2180    ;_putch                              IMPORT  --
                           A  2181    ;height                               IX+15    
                           A  2182    ;width                                IX+12    
                           A  2183    ;bitmap_format                         IX+9    
                           A  2184    ;buffer_id                             IX+6    
                           A  2185    
                           A  2186    
                           A  2187    ; Stack Frame Size: 18 (bytes)
                           A  2188    ;       Spill Code: -3 (instruction)
                           A  2189    
                           A  2190    
                           A  2191    .ENDFUNC "assign_buffer_to_bitmap",214,"_assign
                           A  2192    ;  215	
                           A  2193    ;  216	void reorder(char *arr, uint16_t length
0B06F5                     A  2194    _reorder:
                           A  2195    .DEFINE "_reorder"
                           A  2196    
                           A  2197    .VALUE _reorder
                           A  2198    
                           A  2199    .CLASS 2
                           A  2200    
                           A  2201    .TYPE 65
                           A  2202    
                           A  2203    .ENDEF
                           A  2204    
                           A  2205    .BEGFUNC "reorder",216,"_reorder"
                           A  2206    
                           A  2207    .LINE 216
                           A  2208    
                           A  2209    .DEFINE "arr"
                           A  2210    
                           A  2211    .CLASS 65
                           A  2212    
                           A  2213    .VALUE 6
                           A  2214    
                           A  2215    .TYPE 34
                           A  2216    
                           A  2217    .ENDEF
                           A  2218    
                           A  2219    .DEFINE "length"
                           A  2220    
                           A  2221    .CLASS 65
                           A  2222    
                           A  2223    .VALUE 9
                           A  2224    
                           A  2225    .TYPE 13
                           A  2226    
                           A  2227    .ENDEF
                           A  2228    
                           A  2229    .DEFINE "i"
                           A  2230    
                           A  2231    .CLASS 65
                           A  2232    
                           A  2233    .VALUE -2
                           A  2234    
                           A  2235    .TYPE 13
                           A  2236    
                           A  2237    .ENDEF
                           A  2238    
                           A  2239    .DEFINE "temp"
                           A  2240    
                           A  2241    .CLASS 65
                           A  2242    
                           A  2243    .VALUE -3
                           A  2244    
                           A  2245    .TYPE 12
                           A  2246    
                           A  2247    .ENDEF
                           A  2248    
0B06F5 DDE5                A  2249    	PUSH	IX
0B06F7 DD210000 00         A  2250    	LD	IX,0
0B06FC DD39                A  2251    	ADD	IX,SP
0B06FE C5                  A  2252    	PUSH	BC
0B06FF C5                  A  2253    	PUSH	BC
                           A  2254    ;  217	    uint16_t i;
                           A  2255    ;  218		for (i = 0; i < length; i += 4) {
                           A  2256    .LINE 218
                           A  2257    
0B0700 DD36FE00            A  2258    	LD	(IX+%FFFFFFFE),%0
0B0704 DD36FF00            A  2259    	LD	(IX+%FFFFFFFF),%0
0B0708 18 68               A  2260    	JR	L_44
0B070A                     A  2261    L_42:
                           A  2262    ;  219	        if (i + 2 < length) {
                           A  2263    .LINE 219
                           A  2264    
0B070A DD07FE              A  2265    	LD	BC,(IX+%FFFFFFFE)
0B070D CD 22 39 0B         A  2266    	CALL	__stoiu
0B0711 E5D1                A  2267    	LD	DE,HL
0B0713 13                  A  2268    	INC	DE
0B0714 13                  A  2269    	INC	DE
0B0715 DD0709              A  2270    	LD	BC,(IX+%9)
0B0718 CD 22 39 0B         A  2271    	CALL	__stoiu
0B071C E5C1                A  2272    	LD	BC,HL
0B071E D5E1                A  2273    	LD	HL,DE
0B0720 B7                  A  2274    	OR	A,A
0B0721 ED42                A  2275    	SBC	HL,BC
0B0723 F2 2D 07 0B         A  2276    	JP	P,L__30
0B0727 EA 66 07 0B         A  2277    	JP	PE,L_43
0B072B 18 04               A  2278    	JR	L__31
0B072D                     A  2279    L__30:
0B072D E2 66 07 0B         A  2280    	JP	PO,L_43
0B0731                     A  2281    L__31:
                           A  2282    ;  220	            uint8_t temp = arr[i];
                           A  2283    .LINE 220
                           A  2284    
0B0731 DD07FE              A  2285    	LD	BC,(IX+%FFFFFFFE)
0B0734 CD 22 39 0B         A  2286    	CALL	__stoiu
0B0738 DD0706              A  2287    	LD	BC,(IX+%6)
0B073B 09                  A  2288    	ADD	HL,BC
0B073C DD2FFA              A  2289    	LD	(IX+%FFFFFFFA),HL
0B073F 7E                  A  2290    	LD	A,(HL)
0B0740 DD77FD              A  2291    	LD	(IX+%FFFFFFFD),A
                           A  2292    ;  221	            arr[i] = arr[i + 2];
                           A  2293    .LINE 221
                           A  2294    
0B0743 DD31FA              A  2295    	LD	IY,(IX+%FFFFFFFA)
0B0746 DD07FE              A  2296    	LD	BC,(IX+%FFFFFFFE)
0B0749 CD 22 39 0B         A  2297    	CALL	__stoiu
0B074D DD0706              A  2298    	LD	BC,(IX+%6)
0B0750 09                  A  2299    	ADD	HL,BC
0B0751 FD7E02              A  2300    	LD	A,(IY+%2)
0B0754 77                  A  2301    	LD	(HL),A
                           A  2302    ;  222	            arr[i + 2] = temp;
                           A  2303    .LINE 222
                           A  2304    
0B0755 DD07FE              A  2305    	LD	BC,(IX+%FFFFFFFE)
0B0758 CD 22 39 0B         A  2306    	CALL	__stoiu
0B075C DD0706              A  2307    	LD	BC,(IX+%6)
0B075F 09                  A  2308    	ADD	HL,BC
0B0760 23                  A  2309    	INC	HL
0B0761 23                  A  2310    	INC	HL
0B0762 DD7EFD              A  2311    	LD	A,(IX+%FFFFFFFD)
0B0765 77                  A  2312    	LD	(HL),A
                           A  2313    ;  223	        }
                           A  2314    ;  224	    }
0B0766                     A  2315    L_43:
                           A  2316    .LINE 224
                           A  2317    
0B0766 DD31FE              A  2318    	LD	IY,(IX+%FFFFFFFE)
0B0769 ED2304              A  2319    	LEA	HL,IY+%4
0B076C DD75FE              A  2320    	LD	(IX+%FFFFFFFE),L
0B076F DD74FF              A  2321    	LD	(IX+%FFFFFFFF),H
0B0772                     A  2322    L_44:
0B0772 DD0709              A  2323    	LD	BC,(IX+%9)
0B0775 DD27FE              A  2324    	LD	HL,(IX+%FFFFFFFE)
0B0778 B7                  A  2325    	OR	A,A
0B0779 40ED42              A  2326    	SBC.SIS	HL,BC
0B077C 38 8C               A  2327    	JR	C,L_42
                           A  2328    ;  225	}
                           A  2329    .LINE 225
                           A  2330    
0B077E DDF9                A  2331    	LD	SP,IX
0B0780 DDE1                A  2332    	POP	IX
0B0782 C9                  A  2333    	RET	
                           A  2334    
                           A  2335    
                           A  2336    ;**************************** _reorder ********
                           A  2337    ;Name                         Addr/Register   S
                           A  2338    ;temp                                  IX-3    
                           A  2339    ;i                                     IX-2    
                           A  2340    ;length                                IX+9    
                           A  2341    ;arr                                   IX+6    
                           A  2342    
                           A  2343    
                           A  2344    ; Stack Frame Size: 18 (bytes)
                           A  2345    ;       Spill Code: -3 (instruction)
                           A  2346    
                           A  2347    
                           A  2348    .ENDFUNC "reorder",225,"_reorder"
                           A  2349    ;  226	
                           A  2350    ;  227	void reorder_and_insert(char *arr, uint
0B0783                     A  2351    _reorder_and_insert:
                           A  2352    .DEFINE "_reorder_and_insert"
                           A  2353    
                           A  2354    .VALUE _reorder_and_insert
                           A  2355    
                           A  2356    .CLASS 2
                           A  2357    
                           A  2358    .TYPE 65
                           A  2359    
                           A  2360    .ENDEF
                           A  2361    
                           A  2362    .BEGFUNC "reorder_and_insert",227,"_reorder_and
                           A  2363    
                           A  2364    .LINE 227
                           A  2365    
                           A  2366    .DEFINE "arr"
                           A  2367    
                           A  2368    .CLASS 65
                           A  2369    
                           A  2370    .VALUE 6
                           A  2371    
                           A  2372    .TYPE 34
                           A  2373    
                           A  2374    .ENDEF
                           A  2375    
                           A  2376    .DEFINE "length"
                           A  2377    
                           A  2378    .CLASS 65
                           A  2379    
                           A  2380    .VALUE 9
                           A  2381    
                           A  2382    .TYPE 13
                           A  2383    
                           A  2384    .ENDEF
                           A  2385    
                           A  2386    .DEFINE "new_arr"
                           A  2387    
                           A  2388    .CLASS 65
                           A  2389    
                           A  2390    .VALUE 12
                           A  2391    
                           A  2392    .TYPE 290
                           A  2393    
                           A  2394    .ENDEF
                           A  2395    
                           A  2396    .DEFINE "new_length"
                           A  2397    
                           A  2398    .CLASS 65
                           A  2399    
                           A  2400    .VALUE 15
                           A  2401    
                           A  2402    .TYPE 45
                           A  2403    
                           A  2404    .ENDEF
                           A  2405    
                           A  2406    .DEFINE "insert_value"
                           A  2407    
                           A  2408    .CLASS 65
                           A  2409    
                           A  2410    .VALUE 18
                           A  2411    
                           A  2412    .TYPE 2
                           A  2413    
                           A  2414    .ENDEF
                           A  2415    
                           A  2416    .DEFINE "i"
                           A  2417    
                           A  2418    .CLASS 65
                           A  2419    
                           A  2420    .VALUE -2
                           A  2421    
                           A  2422    .TYPE 13
                           A  2423    
                           A  2424    .ENDEF
                           A  2425    
                           A  2426    .DEFINE "j"
                           A  2427    
                           A  2428    .CLASS 65
                           A  2429    
                           A  2430    .VALUE -4
                           A  2431    
                           A  2432    .TYPE 13
                           A  2433    
                           A  2434    .ENDEF
                           A  2435    
0B0783 DDE5                A  2436    	PUSH	IX
0B0785 DD210000 00         A  2437    	LD	IX,0
0B078A DD39                A  2438    	ADD	IX,SP
0B078C ED22ED              A  2439    	LEA	HL,IX+%FFFFFFED
0B078F F9                  A  2440    	LD	SP,HL
                           A  2441    ;  228	
                           A  2442    ;  229		uint16_t i, j = 0;
                           A  2443    .LINE 229
                           A  2444    
0B0790 DD36FC00            A  2445    	LD	(IX+%FFFFFFFC),%0
0B0794 DD36FD00            A  2446    	LD	(IX+%FFFFFFFD),%0
                           A  2447    ;  230	    *new_length = (length / 3) * 4 + (l
                           A  2448    .LINE 230
                           A  2449    
0B0798 DD0709              A  2450    	LD	BC,(IX+%9)
0B079B CD 22 39 0B         A  2451    	CALL	__stoiu
0B079F 01030000            A  2452    	LD	BC,3
0B07A3 CD C6 3F 0B         A  2453    	CALL	__idivs
0B07A7 29                  A  2454    	ADD	HL,HL
0B07A8 29                  A  2455    	ADD	HL,HL
0B07A9 E5D1                A  2456    	LD	DE,HL
0B07AB DD0709              A  2457    	LD	BC,(IX+%9)
0B07AE CD 22 39 0B         A  2458    	CALL	__stoiu
0B07B2 01030000            A  2459    	LD	BC,3
0B07B6 CD FE 36 0B         A  2460    	CALL	__irems
0B07BA 19                  A  2461    	ADD	HL,DE
0B07BB E5C1                A  2462    	LD	BC,HL
0B07BD DD270F              A  2463    	LD	HL,(IX+%F)
0B07C0 71                  A  2464    	LD	(HL),C
0B07C1 23                  A  2465    	INC	HL
0B07C2 70                  A  2466    	LD	(HL),B
                           A  2467    ;  231	    *new_arr = (char *) malloc(*new_len
                           A  2468    .LINE 231
                           A  2469    
0B07C3 DD270F              A  2470    	LD	HL,(IX+%F)
0B07C6 ED07                A  2471    	LD	BC,(HL)
0B07C8 CD 22 39 0B         A  2472    	CALL	__stoiu
0B07CC E5                  A  2473    	PUSH	HL
0B07CD CD 4B 36 0B         A  2474    	CALL	_malloc
0B07D1 C1                  A  2475    	POP	BC
0B07D2 DD310C              A  2476    	LD	IY,(IX+%C)
0B07D5 FD2F00              A  2477    	LD	(IY),HL
                           A  2478    ;  232	
                           A  2479    ;  233	    for (i = 0; i < length; i += 3) {
                           A  2480    .LINE 233
                           A  2481    
0B07D8 DD36FE00            A  2482    	LD	(IX+%FFFFFFFE),%0
0B07DC DD36FF00            A  2483    	LD	(IX+%FFFFFFFF),%0
0B07E0 C3 E9 08 0B         A  2484    	JR	L_56
0B07E4                     A  2485    L_54:
                           A  2486    ;  234	        
                           A  2487    ;  235	        (*new_arr)[j] = (i + 2 < length
                           A  2488    .LINE 235
                           A  2489    
0B07E4 DD07FE              A  2490    	LD	BC,(IX+%FFFFFFFE)
0B07E7 CD 22 39 0B         A  2491    	CALL	__stoiu
0B07EB E5D1                A  2492    	LD	DE,HL
0B07ED 13                  A  2493    	INC	DE
0B07EE 13                  A  2494    	INC	DE
0B07EF DD0709              A  2495    	LD	BC,(IX+%9)
0B07F2 CD 22 39 0B         A  2496    	CALL	__stoiu
0B07F6 E5C1                A  2497    	LD	BC,HL
0B07F8 D5E1                A  2498    	LD	HL,DE
0B07FA B7                  A  2499    	OR	A,A
0B07FB ED42                A  2500    	SBC	HL,BC
0B07FD F2 07 08 0B         A  2501    	JP	P,L__36
0B0801 EA 23 08 0B         A  2502    	JP	PE,L_48
0B0805 18 04               A  2503    	JR	L__37
0B0807                     A  2504    L__36:
0B0807 E2 23 08 0B         A  2505    	JP	PO,L_48
0B080B                     A  2506    L__37:
0B080B DD07FE              A  2507    	LD	BC,(IX+%FFFFFFFE)
0B080E CD 22 39 0B         A  2508    	CALL	__stoiu
0B0812 DD0706              A  2509    	LD	BC,(IX+%6)
0B0815 09                  A  2510    	ADD	HL,BC
0B0816 23                  A  2511    	INC	HL
0B0817 23                  A  2512    	INC	HL
0B0818 7E                  A  2513    	LD	A,(HL)
0B0819 47                  A  2514    	LD	B,A
0B081A 17ED62              A  2515    	SEXT	HL
0B081D 68                  A  2516    	LD	L,B
0B081E DD2FF9              A  2517    	LD	(IX+%FFFFFFF9),HL
0B0821 18 07               A  2518    	JR	L_49
0B0823                     A  2519    L_48:
0B0823 01000000            A  2520    	LD	BC,0
0B0827 DD0FF9              A  2521    	LD	(IX+%FFFFFFF9),BC
0B082A                     A  2522    L_49:
0B082A DD310C              A  2523    	LD	IY,(IX+%C)
0B082D DD07FC              A  2524    	LD	BC,(IX+%FFFFFFFC)
0B0830 CD 22 39 0B         A  2525    	CALL	__stoiu
0B0834 FD0700              A  2526    	LD	BC,(IY)
0B0837 09                  A  2527    	ADD	HL,BC
0B0838 DD2FF3              A  2528    	LD	(IX+%FFFFFFF3),HL
0B083B DD7EF9              A  2529    	LD	A,(IX+%FFFFFFF9)
0B083E DD27F3              A  2530    	LD	HL,(IX+%FFFFFFF3)
0B0841 77                  A  2531    	LD	(HL),A
                           A  2532    ;  236	        (*new_arr)[j + 1] = (i + 1 < le
                           A  2533    .LINE 236
                           A  2534    
0B0842 DD07FE              A  2535    	LD	BC,(IX+%FFFFFFFE)
0B0845 CD 22 39 0B         A  2536    	CALL	__stoiu
0B0849 E5D1                A  2537    	LD	DE,HL
0B084B 13                  A  2538    	INC	DE
0B084C DD0709              A  2539    	LD	BC,(IX+%9)
0B084F CD 22 39 0B         A  2540    	CALL	__stoiu
0B0853 E5C1                A  2541    	LD	BC,HL
0B0855 D5E1                A  2542    	LD	HL,DE
0B0857 B7                  A  2543    	OR	A,A
0B0858 ED42                A  2544    	SBC	HL,BC
0B085A F2 64 08 0B         A  2545    	JP	P,L__38
0B085E EA 7F 08 0B         A  2546    	JP	PE,L_52
0B0862 18 04               A  2547    	JR	L__39
0B0864                     A  2548    L__38:
0B0864 E2 7F 08 0B         A  2549    	JP	PO,L_52
0B0868                     A  2550    L__39:
0B0868 DD07FE              A  2551    	LD	BC,(IX+%FFFFFFFE)
0B086B CD 22 39 0B         A  2552    	CALL	__stoiu
0B086F DD0706              A  2553    	LD	BC,(IX+%6)
0B0872 09                  A  2554    	ADD	HL,BC
0B0873 23                  A  2555    	INC	HL
0B0874 7E                  A  2556    	LD	A,(HL)
0B0875 47                  A  2557    	LD	B,A
0B0876 17ED62              A  2558    	SEXT	HL
0B0879 68                  A  2559    	LD	L,B
0B087A DD2FF6              A  2560    	LD	(IX+%FFFFFFF6),HL
0B087D 18 07               A  2561    	JR	L_53
0B087F                     A  2562    L_52:
0B087F 01000000            A  2563    	LD	BC,0
0B0883 DD0FF6              A  2564    	LD	(IX+%FFFFFFF6),BC
0B0886                     A  2565    L_53:
0B0886 DD7EF6              A  2566    	LD	A,(IX+%FFFFFFF6)
0B0889 DD27F3              A  2567    	LD	HL,(IX+%FFFFFFF3)
0B088C 23                  A  2568    	INC	HL
0B088D 77                  A  2569    	LD	(HL),A
                           A  2570    ;  237	        (*new_arr)[j + 2] = arr[i];
                           A  2571    .LINE 237
                           A  2572    
0B088E DD07FE              A  2573    	LD	BC,(IX+%FFFFFFFE)
0B0891 CD 22 39 0B         A  2574    	CALL	__stoiu
0B0895 DD0706              A  2575    	LD	BC,(IX+%6)
0B0898 09                  A  2576    	ADD	HL,BC
0B0899 E5FDE1              A  2577    	LD	IY,HL
0B089C DD270C              A  2578    	LD	HL,(IX+%C)
0B089F DD2FED              A  2579    	LD	(IX+%FFFFFFED),HL	; spill
0B08A2 DD07FC              A  2580    	LD	BC,(IX+%FFFFFFFC)
0B08A5 CD 22 39 0B         A  2581    	CALL	__stoiu
0B08A9 DD2FF0              A  2582    	LD	(IX+%FFFFFFF0),HL	; spill
0B08AC DD27ED              A  2583    	LD	HL,(IX+%FFFFFFED)	; unspill
0B08AF ED07                A  2584    	LD	BC,(HL)
0B08B1 DD27F0              A  2585    	LD	HL,(IX+%FFFFFFF0)	; unspill
0B08B4 09                  A  2586    	ADD	HL,BC
0B08B5 23                  A  2587    	INC	HL
0B08B6 23                  A  2588    	INC	HL
0B08B7 FD7E00              A  2589    	LD	A,(IY)
0B08BA 77                  A  2590    	LD	(HL),A
                           A  2591    ;  238	        
                           A  2592    ;  239	        (*new_arr)[j + 3] = 0xFF;
                           A  2593    .LINE 239
                           A  2594    
0B08BB DD310C              A  2595    	LD	IY,(IX+%C)
0B08BE DD07FC              A  2596    	LD	BC,(IX+%FFFFFFFC)
0B08C1 CD 22 39 0B         A  2597    	CALL	__stoiu
0B08C5 FD0700              A  2598    	LD	BC,(IY)
0B08C8 09                  A  2599    	ADD	HL,BC
0B08C9 E5FDE1              A  2600    	LD	IY,HL
0B08CC ED2303              A  2601    	LEA	HL,IY+%3
0B08CF 36FF                A  2602    	LD	(HL),%FF
                           A  2603    ;  240	
                           A  2604    ;  241	        j += 4;
                           A  2605    .LINE 241
                           A  2606    
0B08D1 DD31FC              A  2607    	LD	IY,(IX+%FFFFFFFC)
0B08D4 ED2304              A  2608    	LEA	HL,IY+%4
0B08D7 DD75FC              A  2609    	LD	(IX+%FFFFFFFC),L
0B08DA DD74FD              A  2610    	LD	(IX+%FFFFFFFD),H
0B08DD DD31FE              A  2611    	LD	IY,(IX+%FFFFFFFE)
0B08E0 ED2303              A  2612    	LEA	HL,IY+%3
0B08E3 DD75FE              A  2613    	LD	(IX+%FFFFFFFE),L
0B08E6 DD74FF              A  2614    	LD	(IX+%FFFFFFFF),H
                           A  2615    ;  242	    }
0B08E9                     A  2616    L_56:
                           A  2617    .LINE 242
                           A  2618    
0B08E9 DD0709              A  2619    	LD	BC,(IX+%9)
0B08EC DD27FE              A  2620    	LD	HL,(IX+%FFFFFFFE)
0B08EF B7                  A  2621    	OR	A,A
0B08F0 40ED42              A  2622    	SBC.SIS	HL,BC
0B08F3 DA E4 07 0B         A  2623    	JR	C,L_54
                           A  2624    ;  243		
                           A  2625    ;  244	}
                           A  2626    .LINE 244
                           A  2627    
0B08F7 DDF9                A  2628    	LD	SP,IX
0B08F9 DDE1                A  2629    	POP	IX
0B08FB C9                  A  2630    	RET	
                           A  2631    
                           A  2632    
                           A  2633    ;**************************** _reorder_and_inse
                           A  2634    ;Name                         Addr/Register   S
                           A  2635    ;_malloc                             IMPORT  --
                           A  2636    ;G_0                                  IX-13    
                           A  2637    ;temp50                               IX-10    
                           A  2638    ;temp46                                IX-7    
                           A  2639    ;j                                     IX-4    
                           A  2640    ;i                                     IX-2    
                           A  2641    ;insert_value                         IX+18    
                           A  2642    ;new_length                           IX+15    
                           A  2643    ;new_arr                              IX+12    
                           A  2644    ;length                                IX+9    
                           A  2645    ;arr                                   IX+6    
                           A  2646    
                           A  2647    
                           A  2648    ; Stack Frame Size: 40 (bytes)
                           A  2649    ;       Spill Code: -3 (instruction)
                           A  2650    
                           A  2651    
                           A  2652    .ENDFUNC "reorder_and_insert",244,"_reorder_and
                           A  2653    ;  245	
                           A  2654    ;  246	void bgr888_to_rgba2222(char *input, ch
0B08FC                     A  2655    _bgr888_to_rgba2222:
                           A  2656    .DEFINE "_bgr888_to_rgba2222"
                           A  2657    
                           A  2658    .VALUE _bgr888_to_rgba2222
                           A  2659    
                           A  2660    .CLASS 2
                           A  2661    
                           A  2662    .TYPE 65
                           A  2663    
                           A  2664    .ENDEF
                           A  2665    
                           A  2666    .BEGFUNC "bgr888_to_rgba2222",246,"_bgr888_to_r
                           A  2667    
                           A  2668    .LINE 246
                           A  2669    
                           A  2670    .DEFINE "input"
                           A  2671    
                           A  2672    .CLASS 65
                           A  2673    
                           A  2674    .VALUE 6
                           A  2675    
                           A  2676    .TYPE 34
                           A  2677    
                           A  2678    .ENDEF
                           A  2679    
                           A  2680    .DEFINE "output"
                           A  2681    
                           A  2682    .CLASS 65
                           A  2683    
                           A  2684    .VALUE 9
                           A  2685    
                           A  2686    .TYPE 34
                           A  2687    
                           A  2688    .ENDEF
                           A  2689    
                           A  2690    .DEFINE "num_pixels"
                           A  2691    
                           A  2692    .CLASS 65
                           A  2693    
                           A  2694    .VALUE 12
                           A  2695    
                           A  2696    .TYPE 14
                           A  2697    
                           A  2698    .ENDEF
                           A  2699    
                           A  2700    .DEFINE "input_ptr"
                           A  2701    
                           A  2702    .CLASS 65
                           A  2703    
                           A  2704    .VALUE -3
                           A  2705    
                           A  2706    .TYPE 34
                           A  2707    
                           A  2708    .ENDEF
                           A  2709    
                           A  2710    .DEFINE "output_ptr"
                           A  2711    
                           A  2712    .CLASS 65
                           A  2713    
                           A  2714    .VALUE -6
                           A  2715    
                           A  2716    .TYPE 34
                           A  2717    
                           A  2718    .ENDEF
                           A  2719    
                           A  2720    .DEFINE "b"
                           A  2721    
                           A  2722    .CLASS 65
                           A  2723    
                           A  2724    .VALUE -7
                           A  2725    
                           A  2726    .TYPE 12
                           A  2727    
                           A  2728    .ENDEF
                           A  2729    
                           A  2730    .DEFINE "g"
                           A  2731    
                           A  2732    .CLASS 65
                           A  2733    
                           A  2734    .VALUE -8
                           A  2735    
                           A  2736    .TYPE 12
                           A  2737    
                           A  2738    .ENDEF
                           A  2739    
                           A  2740    .DEFINE "r"
                           A  2741    
                           A  2742    .CLASS 65
                           A  2743    
                           A  2744    .VALUE -9
                           A  2745    
                           A  2746    .TYPE 12
                           A  2747    
                           A  2748    .ENDEF
                           A  2749    
0B08FC DDE5                A  2750    	PUSH	IX
0B08FE DD210000 00         A  2751    	LD	IX,0
0B0903 DD39                A  2752    	ADD	IX,SP
0B0905 ED22EE              A  2753    	LEA	HL,IX+%FFFFFFEE
0B0908 F9                  A  2754    	LD	SP,HL
                           A  2755    ;  247	    char *input_ptr = input;
                           A  2756    .LINE 247
                           A  2757    
0B0909 DD0706              A  2758    	LD	BC,(IX+%6)
0B090C DD0FFD              A  2759    	LD	(IX+%FFFFFFFD),BC
                           A  2760    ;  248	    char *output_ptr = output;
                           A  2761    .LINE 248
                           A  2762    
0B090F DD0709              A  2763    	LD	BC,(IX+%9)
0B0912 DD0FFA              A  2764    	LD	(IX+%FFFFFFFA),BC
                           A  2765    ;  249	
                           A  2766    ;  250	    while (num_pixels--) {
                           A  2767    .LINE 250
                           A  2768    
0B0915 C3 A0 09 0B         A  2769    	JR	L_63
0B0919                     A  2770    L_64:
                           A  2771    ;  251	        uint8_t b = *input_ptr++;
                           A  2772    .LINE 251
                           A  2773    
0B0919 DD07FD              A  2774    	LD	BC,(IX+%FFFFFFFD)
0B091C DD0FF4              A  2775    	LD	(IX+%FFFFFFF4),BC
0B091F DD07FD              A  2776    	LD	BC,(IX+%FFFFFFFD)
0B0922 03                  A  2777    	INC	BC
0B0923 DD0FFD              A  2778    	LD	(IX+%FFFFFFFD),BC
0B0926 DD27F4              A  2779    	LD	HL,(IX+%FFFFFFF4)
0B0929 7E                  A  2780    	LD	A,(HL)
0B092A DD77F9              A  2781    	LD	(IX+%FFFFFFF9),A
                           A  2782    ;  252	        uint8_t g = *input_ptr++;
                           A  2783    .LINE 252
                           A  2784    
0B092D DD07FD              A  2785    	LD	BC,(IX+%FFFFFFFD)
0B0930 DD0FF1              A  2786    	LD	(IX+%FFFFFFF1),BC
0B0933 DD07FD              A  2787    	LD	BC,(IX+%FFFFFFFD)
0B0936 03                  A  2788    	INC	BC
0B0937 DD0FFD              A  2789    	LD	(IX+%FFFFFFFD),BC
0B093A DD27F1              A  2790    	LD	HL,(IX+%FFFFFFF1)
0B093D 7E                  A  2791    	LD	A,(HL)
0B093E DD77F8              A  2792    	LD	(IX+%FFFFFFF8),A
                           A  2793    ;  253	        uint8_t r = *input_ptr++;
                           A  2794    .LINE 253
                           A  2795    
0B0941 DD07FD              A  2796    	LD	BC,(IX+%FFFFFFFD)
0B0944 DD0FEE              A  2797    	LD	(IX+%FFFFFFEE),BC
0B0947 DD07FD              A  2798    	LD	BC,(IX+%FFFFFFFD)
0B094A 03                  A  2799    	INC	BC
0B094B DD0FFD              A  2800    	LD	(IX+%FFFFFFFD),BC
0B094E DD27EE              A  2801    	LD	HL,(IX+%FFFFFFEE)
0B0951 7E                  A  2802    	LD	A,(HL)
0B0952 DD77F7              A  2803    	LD	(IX+%FFFFFFF7),A
                           A  2804    ;  254	        uint8_t a = 0xFF; // Alpha chan
                           A  2805    ;  255	
                           A  2806    ;  256			// *output_ptr = 0;
                           A  2807    ;  257			// *output_ptr |= CONVR64[r >> 
                           A  2808    ;  258			// *output_ptr |= CONVG64[g >> 
                           A  2809    ;  259			// *output_ptr |= CONVB64[b >> 
                           A  2810    ;  260			// *output_ptr |= CONVA64[a >> 
                           A  2811    ;  261			// output_ptr++;
                           A  2812    ;  262			
                           A  2813    ;  263			*output_ptr = ((r >> 6) & 0x03)
                           A  2814    ;  264	              (((g >> 6) & 0x03) << 2) 
                           A  2815    ;  265	              (((b >> 6) & 0x03) << 4) 
                           A  2816    ;  266	              (((a >> 6) & 0x03) << 6);
                           A  2817    .LINE 266
                           A  2818    
0B0955 DD7EF8              A  2819    	LD	A,(IX+%FFFFFFF8)
0B0958 B7ED62              A  2820    	UEXT	HL
0B095B 6F                  A  2821    	LD	L,A
0B095C 3E06                A  2822    	LD	A,%6
0B095E CD 36 37 0B         A  2823    	CALL	__ishrs_b
0B0962 7D                  A  2824    	LD	A,L
0B0963 E603                A  2825    	AND	A,%3
0B0965 87                  A  2826    	ADD	A,A
0B0966 87                  A  2827    	ADD	A,A
0B0967 47                  A  2828    	LD	B,A
0B0968 DD7EF7              A  2829    	LD	A,(IX+%FFFFFFF7)
0B096B B7ED62              A  2830    	UEXT	HL
0B096E 6F                  A  2831    	LD	L,A
0B096F 3E06                A  2832    	LD	A,%6
0B0971 CD 36 37 0B         A  2833    	CALL	__ishrs_b
0B0975 7D                  A  2834    	LD	A,L
0B0976 E603                A  2835    	AND	A,%3
0B0978 4F                  A  2836    	LD	C,A
0B0979 78                  A  2837    	LD	A,B
0B097A B1                  A  2838    	OR	A,C
0B097B 47                  A  2839    	LD	B,A
0B097C DD7EF9              A  2840    	LD	A,(IX+%FFFFFFF9)
0B097F B7ED62              A  2841    	UEXT	HL
0B0982 6F                  A  2842    	LD	L,A
0B0983 3E06                A  2843    	LD	A,%6
0B0985 CD 36 37 0B         A  2844    	CALL	__ishrs_b
0B0989 7D                  A  2845    	LD	A,L
0B098A E603                A  2846    	AND	A,%3
0B098C 87                  A  2847    	ADD	A,A
0B098D 87                  A  2848    	ADD	A,A
0B098E 87                  A  2849    	ADD	A,A
0B098F 87                  A  2850    	ADD	A,A
0B0990 4F                  A  2851    	LD	C,A
0B0991 78                  A  2852    	LD	A,B
0B0992 B1                  A  2853    	OR	A,C
0B0993 F6C0                A  2854    	OR	A,%C0
0B0995 DD27FA              A  2855    	LD	HL,(IX+%FFFFFFFA)
0B0998 77                  A  2856    	LD	(HL),A
                           A  2857    ;  267			output_ptr++;
                           A  2858    .LINE 267
                           A  2859    
0B0999 DD07FA              A  2860    	LD	BC,(IX+%FFFFFFFA)
0B099C 03                  A  2861    	INC	BC
0B099D DD0FFA              A  2862    	LD	(IX+%FFFFFFFA),BC
                           A  2863    ;  268			
                           A  2864    ;  269	    }
0B09A0                     A  2865    L_63:
                           A  2866    .LINE 269
                           A  2867    
0B09A0 DD270C              A  2868    	LD	HL,(IX+%C)
0B09A3 DD310C              A  2869    	LD	IY,(IX+%C)
0B09A6 ED33FF              A  2870    	LEA	IY,IY+%FFFFFFFF
0B09A9 DD3E0C              A  2871    	LD	(IX+%C),IY
0B09AC 01000000            A  2872    	LD	BC,0
0B09B0 B7                  A  2873    	OR	A,A
0B09B1 ED42                A  2874    	SBC	HL,BC
0B09B3 C2 19 09 0B         A  2875    	JR	NZ,L_64
                           A  2876    ;  270	}
                           A  2877    .LINE 270
                           A  2878    
0B09B7 DDF9                A  2879    	LD	SP,IX
0B09B9 DDE1                A  2880    	POP	IX
0B09BB C9                  A  2881    	RET	
                           A  2882    
                           A  2883    
                           A  2884    ;**************************** _bgr888_to_rgba22
                           A  2885    ;Name                         Addr/Register   S
                           A  2886    ;r                                     IX-9    
                           A  2887    ;g                                     IX-8    
                           A  2888    ;b                                     IX-7    
                           A  2889    ;output_ptr                            IX-6    
                           A  2890    ;input_ptr                             IX-3    
                           A  2891    ;num_pixels                           IX+12    
                           A  2892    ;output                                IX+9    
                           A  2893    ;input                                 IX+6    
                           A  2894    
                           A  2895    
                           A  2896    ; Stack Frame Size: 33 (bytes)
                           A  2897    ;       Spill Code: -3 (instruction)
                           A  2898    
                           A  2899    
                           A  2900    .ENDFUNC "bgr888_to_rgba2222",270,"_bgr888_to_r
                           A  2901    ;  271	
                           A  2902    ;  272	void bgra8888_to_rgba2222(char *input, 
0B09BC                     A  2903    _bgra8888_to_rgba2222:
                           A  2904    .DEFINE "_bgra8888_to_rgba2222"
                           A  2905    
                           A  2906    .VALUE _bgra8888_to_rgba2222
                           A  2907    
                           A  2908    .CLASS 2
                           A  2909    
                           A  2910    .TYPE 65
                           A  2911    
                           A  2912    .ENDEF
                           A  2913    
                           A  2914    .BEGFUNC "bgra8888_to_rgba2222",272,"_bgra8888_
                           A  2915    
                           A  2916    .LINE 272
                           A  2917    
                           A  2918    .DEFINE "input"
                           A  2919    
                           A  2920    .CLASS 65
                           A  2921    
                           A  2922    .VALUE 6
                           A  2923    
                           A  2924    .TYPE 34
                           A  2925    
                           A  2926    .ENDEF
                           A  2927    
                           A  2928    .DEFINE "output"
                           A  2929    
                           A  2930    .CLASS 65
                           A  2931    
                           A  2932    .VALUE 9
                           A  2933    
                           A  2934    .TYPE 34
                           A  2935    
                           A  2936    .ENDEF
                           A  2937    
                           A  2938    .DEFINE "num_pixels"
                           A  2939    
                           A  2940    .CLASS 65
                           A  2941    
                           A  2942    .VALUE 12
                           A  2943    
                           A  2944    .TYPE 14
                           A  2945    
                           A  2946    .ENDEF
                           A  2947    
                           A  2948    .DEFINE "input_ptr"
                           A  2949    
                           A  2950    .CLASS 65
                           A  2951    
                           A  2952    .VALUE -3
                           A  2953    
                           A  2954    .TYPE 34
                           A  2955    
                           A  2956    .ENDEF
                           A  2957    
                           A  2958    .DEFINE "output_ptr"
                           A  2959    
                           A  2960    .CLASS 65
                           A  2961    
                           A  2962    .VALUE -6
                           A  2963    
                           A  2964    .TYPE 34
                           A  2965    
                           A  2966    .ENDEF
                           A  2967    
                           A  2968    .DEFINE "b"
                           A  2969    
                           A  2970    .CLASS 65
                           A  2971    
                           A  2972    .VALUE -7
                           A  2973    
                           A  2974    .TYPE 12
                           A  2975    
                           A  2976    .ENDEF
                           A  2977    
                           A  2978    .DEFINE "g"
                           A  2979    
                           A  2980    .CLASS 65
                           A  2981    
                           A  2982    .VALUE -8
                           A  2983    
                           A  2984    .TYPE 12
                           A  2985    
                           A  2986    .ENDEF
                           A  2987    
                           A  2988    .DEFINE "r"
                           A  2989    
                           A  2990    .CLASS 65
                           A  2991    
                           A  2992    .VALUE -9
                           A  2993    
                           A  2994    .TYPE 12
                           A  2995    
                           A  2996    .ENDEF
                           A  2997    
                           A  2998    .DEFINE "a"
                           A  2999    
                           A  3000    .CLASS 65
                           A  3001    
                           A  3002    .VALUE -10
                           A  3003    
                           A  3004    .TYPE 12
                           A  3005    
                           A  3006    .ENDEF
                           A  3007    
0B09BC DDE5                A  3008    	PUSH	IX
0B09BE DD210000 00         A  3009    	LD	IX,0
0B09C3 DD39                A  3010    	ADD	IX,SP
0B09C5 ED22EA              A  3011    	LEA	HL,IX+%FFFFFFEA
0B09C8 F9                  A  3012    	LD	SP,HL
                           A  3013    ;  273	    char *input_ptr = input;
                           A  3014    .LINE 273
                           A  3015    
0B09C9 DD0706              A  3016    	LD	BC,(IX+%6)
0B09CC DD0FFD              A  3017    	LD	(IX+%FFFFFFFD),BC
                           A  3018    ;  274	    char *output_ptr = output;
                           A  3019    .LINE 274
                           A  3020    
0B09CF DD0709              A  3021    	LD	BC,(IX+%9)
0B09D2 DD0FFA              A  3022    	LD	(IX+%FFFFFFFA),BC
                           A  3023    ;  275	
                           A  3024    ;  276	    while (num_pixels--) {
                           A  3025    .LINE 276
                           A  3026    
0B09D5 C3 8C 0A 0B         A  3027    	JR	L_72
0B09D9                     A  3028    L_73:
                           A  3029    ;  277	        uint8_t b = *input_ptr++;
                           A  3030    .LINE 277
                           A  3031    
0B09D9 DD07FD              A  3032    	LD	BC,(IX+%FFFFFFFD)
0B09DC DD0FF3              A  3033    	LD	(IX+%FFFFFFF3),BC
0B09DF DD07FD              A  3034    	LD	BC,(IX+%FFFFFFFD)
0B09E2 03                  A  3035    	INC	BC
0B09E3 DD0FFD              A  3036    	LD	(IX+%FFFFFFFD),BC
0B09E6 DD27F3              A  3037    	LD	HL,(IX+%FFFFFFF3)
0B09E9 7E                  A  3038    	LD	A,(HL)
0B09EA DD77F9              A  3039    	LD	(IX+%FFFFFFF9),A
                           A  3040    ;  278	        uint8_t g = *input_ptr++;
                           A  3041    .LINE 278
                           A  3042    
0B09ED DD07FD              A  3043    	LD	BC,(IX+%FFFFFFFD)
0B09F0 DD0FF0              A  3044    	LD	(IX+%FFFFFFF0),BC
0B09F3 DD07FD              A  3045    	LD	BC,(IX+%FFFFFFFD)
0B09F6 03                  A  3046    	INC	BC
0B09F7 DD0FFD              A  3047    	LD	(IX+%FFFFFFFD),BC
0B09FA DD27F0              A  3048    	LD	HL,(IX+%FFFFFFF0)
0B09FD 7E                  A  3049    	LD	A,(HL)
0B09FE DD77F8              A  3050    	LD	(IX+%FFFFFFF8),A
                           A  3051    ;  279	        uint8_t r = *input_ptr++;
                           A  3052    .LINE 279
                           A  3053    
0B0A01 DD07FD              A  3054    	LD	BC,(IX+%FFFFFFFD)
0B0A04 DD0FED              A  3055    	LD	(IX+%FFFFFFED),BC
0B0A07 DD07FD              A  3056    	LD	BC,(IX+%FFFFFFFD)
0B0A0A 03                  A  3057    	INC	BC
0B0A0B DD0FFD              A  3058    	LD	(IX+%FFFFFFFD),BC
0B0A0E DD27ED              A  3059    	LD	HL,(IX+%FFFFFFED)
0B0A11 7E                  A  3060    	LD	A,(HL)
0B0A12 DD77F7              A  3061    	LD	(IX+%FFFFFFF7),A
                           A  3062    ;  280	        uint8_t a = *input_ptr++;;
                           A  3063    .LINE 280
                           A  3064    
0B0A15 DD07FD              A  3065    	LD	BC,(IX+%FFFFFFFD)
0B0A18 DD0FEA              A  3066    	LD	(IX+%FFFFFFEA),BC
0B0A1B DD07FD              A  3067    	LD	BC,(IX+%FFFFFFFD)
0B0A1E 03                  A  3068    	INC	BC
0B0A1F DD0FFD              A  3069    	LD	(IX+%FFFFFFFD),BC
0B0A22 DD27EA              A  3070    	LD	HL,(IX+%FFFFFFEA)
0B0A25 7E                  A  3071    	LD	A,(HL)
0B0A26 DD77F6              A  3072    	LD	(IX+%FFFFFFF6),A
                           A  3073    ;  281	
                           A  3074    ;  282			*output_ptr = ((r >> 6) & 0x03)
                           A  3075    ;  283	              (((g >> 6) & 0x03) << 2) 
                           A  3076    ;  284	              (((b >> 6) & 0x03) << 4) 
                           A  3077    ;  285	              (((a >> 6) & 0x03) << 6);
                           A  3078    .LINE 285
                           A  3079    
0B0A29 DD7EF8              A  3080    	LD	A,(IX+%FFFFFFF8)
0B0A2C B7ED62              A  3081    	UEXT	HL
0B0A2F 6F                  A  3082    	LD	L,A
0B0A30 3E06                A  3083    	LD	A,%6
0B0A32 CD 36 37 0B         A  3084    	CALL	__ishrs_b
0B0A36 7D                  A  3085    	LD	A,L
0B0A37 E603                A  3086    	AND	A,%3
0B0A39 87                  A  3087    	ADD	A,A
0B0A3A 87                  A  3088    	ADD	A,A
0B0A3B 47                  A  3089    	LD	B,A
0B0A3C DD7EF7              A  3090    	LD	A,(IX+%FFFFFFF7)
0B0A3F B7ED62              A  3091    	UEXT	HL
0B0A42 6F                  A  3092    	LD	L,A
0B0A43 3E06                A  3093    	LD	A,%6
0B0A45 CD 36 37 0B         A  3094    	CALL	__ishrs_b
0B0A49 7D                  A  3095    	LD	A,L
0B0A4A E603                A  3096    	AND	A,%3
0B0A4C 4F                  A  3097    	LD	C,A
0B0A4D 78                  A  3098    	LD	A,B
0B0A4E B1                  A  3099    	OR	A,C
0B0A4F 47                  A  3100    	LD	B,A
0B0A50 DD7EF9              A  3101    	LD	A,(IX+%FFFFFFF9)
0B0A53 B7ED62              A  3102    	UEXT	HL
0B0A56 6F                  A  3103    	LD	L,A
0B0A57 3E06                A  3104    	LD	A,%6
0B0A59 CD 36 37 0B         A  3105    	CALL	__ishrs_b
0B0A5D 7D                  A  3106    	LD	A,L
0B0A5E E603                A  3107    	AND	A,%3
0B0A60 87                  A  3108    	ADD	A,A
0B0A61 87                  A  3109    	ADD	A,A
0B0A62 87                  A  3110    	ADD	A,A
0B0A63 87                  A  3111    	ADD	A,A
0B0A64 4F                  A  3112    	LD	C,A
0B0A65 78                  A  3113    	LD	A,B
0B0A66 B1                  A  3114    	OR	A,C
0B0A67 57                  A  3115    	LD	D,A
0B0A68 DD7EF6              A  3116    	LD	A,(IX+%FFFFFFF6)
0B0A6B B7ED62              A  3117    	UEXT	HL
0B0A6E 6F                  A  3118    	LD	L,A
0B0A6F 3E06                A  3119    	LD	A,%6
0B0A71 CD 36 37 0B         A  3120    	CALL	__ishrs_b
0B0A75 7D                  A  3121    	LD	A,L
0B0A76 E603                A  3122    	AND	A,%3
0B0A78 0606                A  3123    	LD	B,%6
0B0A7A CD DF 42 0B         A  3124    	CALL	__bshl
0B0A7E 47                  A  3125    	LD	B,A
0B0A7F 7A                  A  3126    	LD	A,D
0B0A80 B0                  A  3127    	OR	A,B
0B0A81 DD27FA              A  3128    	LD	HL,(IX+%FFFFFFFA)
0B0A84 77                  A  3129    	LD	(HL),A
                           A  3130    ;  286			output_ptr++;
                           A  3131    .LINE 286
                           A  3132    
0B0A85 DD07FA              A  3133    	LD	BC,(IX+%FFFFFFFA)
0B0A88 03                  A  3134    	INC	BC
0B0A89 DD0FFA              A  3135    	LD	(IX+%FFFFFFFA),BC
                           A  3136    ;  287			
                           A  3137    ;  288	    }
0B0A8C                     A  3138    L_72:
                           A  3139    .LINE 288
                           A  3140    
0B0A8C DD270C              A  3141    	LD	HL,(IX+%C)
0B0A8F DD310C              A  3142    	LD	IY,(IX+%C)
0B0A92 ED33FF              A  3143    	LEA	IY,IY+%FFFFFFFF
0B0A95 DD3E0C              A  3144    	LD	(IX+%C),IY
0B0A98 01000000            A  3145    	LD	BC,0
0B0A9C B7                  A  3146    	OR	A,A
0B0A9D ED42                A  3147    	SBC	HL,BC
0B0A9F C2 D9 09 0B         A  3148    	JR	NZ,L_73
                           A  3149    ;  289	}
                           A  3150    .LINE 289
                           A  3151    
0B0AA3 DDF9                A  3152    	LD	SP,IX
0B0AA5 DDE1                A  3153    	POP	IX
0B0AA7 C9                  A  3154    	RET	
                           A  3155    
                           A  3156    
                           A  3157    ;**************************** _bgra8888_to_rgba
                           A  3158    ;Name                         Addr/Register   S
                           A  3159    ;a                                    IX-10    
                           A  3160    ;r                                     IX-9    
                           A  3161    ;g                                     IX-8    
                           A  3162    ;b                                     IX-7    
                           A  3163    ;output_ptr                            IX-6    
                           A  3164    ;input_ptr                             IX-3    
                           A  3165    ;num_pixels                           IX+12    
                           A  3166    ;output                                IX+9    
                           A  3167    ;input                                 IX+6    
                           A  3168    
                           A  3169    
                           A  3170    ; Stack Frame Size: 37 (bytes)
                           A  3171    ;       Spill Code: -3 (instruction)
                           A  3172    
                           A  3173    
                           A  3174    .ENDFUNC "bgra8888_to_rgba2222",289,"_bgra8888_
                           A  3175    ;  290	
                           A  3176    ;  291	void generic8888_to_rgba2222(char *inpu
0B0AA8                     A  3177    _generic8888_to_rgba2222:
                           A  3178    .DEFINE "_generic8888_to_rgba2222"
                           A  3179    
                           A  3180    .VALUE _generic8888_to_rgba2222
                           A  3181    
                           A  3182    .CLASS 2
                           A  3183    
                           A  3184    .TYPE 65
                           A  3185    
                           A  3186    .ENDEF
                           A  3187    
                           A  3188    .BEGFUNC "generic8888_to_rgba2222",291,"_generi
                           A  3189    
                           A  3190    .LINE 291
                           A  3191    
                           A  3192    .DEFINE "input"
                           A  3193    
                           A  3194    .CLASS 65
                           A  3195    
                           A  3196    .VALUE 6
                           A  3197    
                           A  3198    .TYPE 34
                           A  3199    
                           A  3200    .ENDEF
                           A  3201    
                           A  3202    .DEFINE "output"
                           A  3203    
                           A  3204    .CLASS 65
                           A  3205    
                           A  3206    .VALUE 9
                           A  3207    
                           A  3208    .TYPE 34
                           A  3209    
                           A  3210    .ENDEF
                           A  3211    
                           A  3212    .DEFINE "num_pixels"
                           A  3213    
                           A  3214    .CLASS 65
                           A  3215    
                           A  3216    .VALUE 12
                           A  3217    
                           A  3218    .TYPE 14
                           A  3219    
                           A  3220    .ENDEF
                           A  3221    
                           A  3222    .DEFINE "width"
                           A  3223    
                           A  3224    .CLASS 65
                           A  3225    
                           A  3226    .VALUE 15
                           A  3227    
                           A  3228    .TYPE 12
                           A  3229    
                           A  3230    .ENDEF
                           A  3231    
                           A  3232    .DEFINE "red_byte"
                           A  3233    
                           A  3234    .CLASS 65
                           A  3235    
                           A  3236    .VALUE 18
                           A  3237    
                           A  3238    .TYPE 2
                           A  3239    
                           A  3240    .ENDEF
                           A  3241    
                           A  3242    .DEFINE "green_byte"
                           A  3243    
                           A  3244    .CLASS 65
                           A  3245    
                           A  3246    .VALUE 21
                           A  3247    
                           A  3248    .TYPE 2
                           A  3249    
                           A  3250    .ENDEF
                           A  3251    
                           A  3252    .DEFINE "blue_byte"
                           A  3253    
                           A  3254    .CLASS 65
                           A  3255    
                           A  3256    .VALUE 24
                           A  3257    
                           A  3258    .TYPE 2
                           A  3259    
                           A  3260    .ENDEF
                           A  3261    
                           A  3262    .DEFINE "alpha_byte"
                           A  3263    
                           A  3264    .CLASS 65
                           A  3265    
                           A  3266    .VALUE 27
                           A  3267    
                           A  3268    .TYPE 2
                           A  3269    
                           A  3270    .ENDEF
                           A  3271    
                           A  3272    .DEFINE "input_ptr"
                           A  3273    
                           A  3274    .CLASS 65
                           A  3275    
                           A  3276    .VALUE -3
                           A  3277    
                           A  3278    .TYPE 34
                           A  3279    
                           A  3280    .ENDEF
                           A  3281    
                           A  3282    .DEFINE "output_ptr"
                           A  3283    
                           A  3284    .CLASS 65
                           A  3285    
                           A  3286    .VALUE -6
                           A  3287    
                           A  3288    .TYPE 34
                           A  3289    
                           A  3290    .ENDEF
                           A  3291    
                           A  3292    .DEFINE "r"
                           A  3293    
                           A  3294    .CLASS 65
                           A  3295    
                           A  3296    .VALUE -7
                           A  3297    
                           A  3298    .TYPE 12
                           A  3299    
                           A  3300    .ENDEF
                           A  3301    
                           A  3302    .DEFINE "g"
                           A  3303    
                           A  3304    .CLASS 65
                           A  3305    
                           A  3306    .VALUE -8
                           A  3307    
                           A  3308    .TYPE 12
                           A  3309    
                           A  3310    .ENDEF
                           A  3311    
                           A  3312    .DEFINE "b"
                           A  3313    
                           A  3314    .CLASS 65
                           A  3315    
                           A  3316    .VALUE -9
                           A  3317    
                           A  3318    .TYPE 12
                           A  3319    
                           A  3320    .ENDEF
                           A  3321    
                           A  3322    .DEFINE "a"
                           A  3323    
                           A  3324    .CLASS 65
                           A  3325    
                           A  3326    .VALUE -10
                           A  3327    
                           A  3328    .TYPE 12
                           A  3329    
                           A  3330    .ENDEF
                           A  3331    
0B0AA8 DDE5                A  3332    	PUSH	IX
0B0AAA DD210000 00         A  3333    	LD	IX,0
0B0AAF DD39                A  3334    	ADD	IX,SP
0B0AB1 ED22F3              A  3335    	LEA	HL,IX+%FFFFFFF3
0B0AB4 F9                  A  3336    	LD	SP,HL
                           A  3337    ;  292	    char *input_ptr = input;
                           A  3338    .LINE 292
                           A  3339    
0B0AB5 DD0706              A  3340    	LD	BC,(IX+%6)
0B0AB8 DD0FFD              A  3341    	LD	(IX+%FFFFFFFD),BC
                           A  3342    ;  293	    char *output_ptr = output;
                           A  3343    .LINE 293
                           A  3344    
0B0ABB DD0709              A  3345    	LD	BC,(IX+%9)
0B0ABE DD0FFA              A  3346    	LD	(IX+%FFFFFFFA),BC
                           A  3347    ;  294	
                           A  3348    ;  295	    while (num_pixels--) {
                           A  3349    .LINE 295
                           A  3350    
0B0AC1 C3 96 0B 0B         A  3351    	JR	L_81
0B0AC5                     A  3352    L_82:
                           A  3353    ;  296	        uint8_t r = input_ptr[red_byte]
                           A  3354    .LINE 296
                           A  3355    
0B0AC5 DD7E12              A  3356    	LD	A,(IX+%12)
0B0AC8 17ED62              A  3357    	SEXT	HL
0B0ACB DD6E12              A  3358    	LD	L,(IX+%12)
0B0ACE DD07FD              A  3359    	LD	BC,(IX+%FFFFFFFD)
0B0AD1 09                  A  3360    	ADD	HL,BC
0B0AD2 7E                  A  3361    	LD	A,(HL)
0B0AD3 DD77F9              A  3362    	LD	(IX+%FFFFFFF9),A
                           A  3363    ;  297	        uint8_t g = input_ptr[green_byt
                           A  3364    .LINE 297
                           A  3365    
0B0AD6 DD7E15              A  3366    	LD	A,(IX+%15)
0B0AD9 17ED62              A  3367    	SEXT	HL
0B0ADC DD6E15              A  3368    	LD	L,(IX+%15)
0B0ADF DD07FD              A  3369    	LD	BC,(IX+%FFFFFFFD)
0B0AE2 09                  A  3370    	ADD	HL,BC
0B0AE3 7E                  A  3371    	LD	A,(HL)
0B0AE4 DD77F8              A  3372    	LD	(IX+%FFFFFFF8),A
                           A  3373    ;  298	        uint8_t b = input_ptr[blue_byte
                           A  3374    .LINE 298
                           A  3375    
0B0AE7 DD7E18              A  3376    	LD	A,(IX+%18)
0B0AEA 17ED62              A  3377    	SEXT	HL
0B0AED DD6E18              A  3378    	LD	L,(IX+%18)
0B0AF0 DD07FD              A  3379    	LD	BC,(IX+%FFFFFFFD)
0B0AF3 09                  A  3380    	ADD	HL,BC
0B0AF4 7E                  A  3381    	LD	A,(HL)
0B0AF5 DD77F7              A  3382    	LD	(IX+%FFFFFFF7),A
                           A  3383    ;  299	        uint8_t a = (alpha_byte < 0) ? 
                           A  3384    .LINE 299
                           A  3385    
0B0AF8 DD7E1B              A  3386    	LD	A,(IX+%1B)
0B0AFB B7                  A  3387    	OR	A,A
0B0AFC F2 09 0B 0B         A  3388    	JP	P,L_78
0B0B00 01FF0000            A  3389    	LD	BC,255
0B0B04 DD0FF3              A  3390    	LD	(IX+%FFFFFFF3),BC
0B0B07 18 16               A  3391    	JR	L_79
0B0B09                     A  3392    L_78:
0B0B09 DD7E1B              A  3393    	LD	A,(IX+%1B)
0B0B0C 17ED62              A  3394    	SEXT	HL
0B0B0F DD6E1B              A  3395    	LD	L,(IX+%1B)
0B0B12 DD07FD              A  3396    	LD	BC,(IX+%FFFFFFFD)
0B0B15 09                  A  3397    	ADD	HL,BC
0B0B16 7E                  A  3398    	LD	A,(HL)
0B0B17 47                  A  3399    	LD	B,A
0B0B18 17ED62              A  3400    	SEXT	HL
0B0B1B 68                  A  3401    	LD	L,B
0B0B1C DD2FF3              A  3402    	LD	(IX+%FFFFFFF3),HL
0B0B1F                     A  3403    L_79:
0B0B1F DD7EF3              A  3404    	LD	A,(IX+%FFFFFFF3)
0B0B22 DD77F6              A  3405    	LD	(IX+%FFFFFFF6),A
                           A  3406    ;  300	
                           A  3407    ;  301			*output_ptr = ((r >> 6) & 0x03)
                           A  3408    ;  302	              (((g >> 6) & 0x03) << 2) 
                           A  3409    ;  303	              (((b >> 6) & 0x03) << 4) 
                           A  3410    ;  304	              (((a >> 6) & 0x03) << 6);
                           A  3411    .LINE 304
                           A  3412    
0B0B25 DD7EF8              A  3413    	LD	A,(IX+%FFFFFFF8)
0B0B28 B7ED62              A  3414    	UEXT	HL
0B0B2B 6F                  A  3415    	LD	L,A
0B0B2C 3E06                A  3416    	LD	A,%6
0B0B2E CD 36 37 0B         A  3417    	CALL	__ishrs_b
0B0B32 7D                  A  3418    	LD	A,L
0B0B33 E603                A  3419    	AND	A,%3
0B0B35 87                  A  3420    	ADD	A,A
0B0B36 87                  A  3421    	ADD	A,A
0B0B37 4F                  A  3422    	LD	C,A
0B0B38 DD7EF9              A  3423    	LD	A,(IX+%FFFFFFF9)
0B0B3B B7ED62              A  3424    	UEXT	HL
0B0B3E 6F                  A  3425    	LD	L,A
0B0B3F 3E06                A  3426    	LD	A,%6
0B0B41 CD 36 37 0B         A  3427    	CALL	__ishrs_b
0B0B45 7D                  A  3428    	LD	A,L
0B0B46 E603                A  3429    	AND	A,%3
0B0B48 47                  A  3430    	LD	B,A
0B0B49 79                  A  3431    	LD	A,C
0B0B4A B0                  A  3432    	OR	A,B
0B0B4B 4F                  A  3433    	LD	C,A
0B0B4C DD7EF7              A  3434    	LD	A,(IX+%FFFFFFF7)
0B0B4F B7ED62              A  3435    	UEXT	HL
0B0B52 6F                  A  3436    	LD	L,A
0B0B53 3E06                A  3437    	LD	A,%6
0B0B55 CD 36 37 0B         A  3438    	CALL	__ishrs_b
0B0B59 7D                  A  3439    	LD	A,L
0B0B5A E603                A  3440    	AND	A,%3
0B0B5C 87                  A  3441    	ADD	A,A
0B0B5D 87                  A  3442    	ADD	A,A
0B0B5E 87                  A  3443    	ADD	A,A
0B0B5F 87                  A  3444    	ADD	A,A
0B0B60 47                  A  3445    	LD	B,A
0B0B61 79                  A  3446    	LD	A,C
0B0B62 B0                  A  3447    	OR	A,B
0B0B63 57                  A  3448    	LD	D,A
0B0B64 DD7EF6              A  3449    	LD	A,(IX+%FFFFFFF6)
0B0B67 B7ED62              A  3450    	UEXT	HL
0B0B6A 6F                  A  3451    	LD	L,A
0B0B6B 3E06                A  3452    	LD	A,%6
0B0B6D CD 36 37 0B         A  3453    	CALL	__ishrs_b
0B0B71 7D                  A  3454    	LD	A,L
0B0B72 E603                A  3455    	AND	A,%3
0B0B74 0606                A  3456    	LD	B,%6
0B0B76 CD DF 42 0B         A  3457    	CALL	__bshl
0B0B7A 47                  A  3458    	LD	B,A
0B0B7B 7A                  A  3459    	LD	A,D
0B0B7C B0                  A  3460    	OR	A,B
0B0B7D DD27FA              A  3461    	LD	HL,(IX+%FFFFFFFA)
0B0B80 77                  A  3462    	LD	(HL),A
                           A  3463    ;  305			output_ptr++;
                           A  3464    .LINE 305
                           A  3465    
0B0B81 DD07FA              A  3466    	LD	BC,(IX+%FFFFFFFA)
0B0B84 03                  A  3467    	INC	BC
0B0B85 DD0FFA              A  3468    	LD	(IX+%FFFFFFFA),BC
                           A  3469    ;  306			
                           A  3470    ;  307			input_ptr += width;
                           A  3471    .LINE 307
                           A  3472    
0B0B88 DD7E0F              A  3473    	LD	A,(IX+%F)
0B0B8B B7ED62              A  3474    	UEXT	HL
0B0B8E 6F                  A  3475    	LD	L,A
0B0B8F DD07FD              A  3476    	LD	BC,(IX+%FFFFFFFD)
0B0B92 09                  A  3477    	ADD	HL,BC
0B0B93 DD2FFD              A  3478    	LD	(IX+%FFFFFFFD),HL
                           A  3479    ;  308			
                           A  3480    ;  309	    }
0B0B96                     A  3481    L_81:
                           A  3482    .LINE 309
                           A  3483    
0B0B96 DD270C              A  3484    	LD	HL,(IX+%C)
0B0B99 DD310C              A  3485    	LD	IY,(IX+%C)
0B0B9C ED33FF              A  3486    	LEA	IY,IY+%FFFFFFFF
0B0B9F DD3E0C              A  3487    	LD	(IX+%C),IY
0B0BA2 01000000            A  3488    	LD	BC,0
0B0BA6 B7                  A  3489    	OR	A,A
0B0BA7 ED42                A  3490    	SBC	HL,BC
0B0BA9 C2 C5 0A 0B         A  3491    	JR	NZ,L_82
                           A  3492    ;  310	}
                           A  3493    .LINE 310
                           A  3494    
0B0BAD DDF9                A  3495    	LD	SP,IX
0B0BAF DDE1                A  3496    	POP	IX
0B0BB1 C9                  A  3497    	RET	
                           A  3498    
                           A  3499    
                           A  3500    ;**************************** _generic8888_to_r
                           A  3501    ;Name                         Addr/Register   S
                           A  3502    ;temp76                               IX-13    
                           A  3503    ;a                                    IX-10    
                           A  3504    ;b                                     IX-9    
                           A  3505    ;g                                     IX-8    
                           A  3506    ;r                                     IX-7    
                           A  3507    ;output_ptr                            IX-6    
                           A  3508    ;input_ptr                             IX-3    
                           A  3509    ;alpha_byte                           IX+27    
                           A  3510    ;blue_byte                            IX+24    
                           A  3511    ;green_byte                           IX+21    
                           A  3512    ;red_byte                             IX+18    
                           A  3513    ;width                                IX+15    
                           A  3514    ;num_pixels                           IX+12    
                           A  3515    ;output                                IX+9    
                           A  3516    ;input                                 IX+6    
                           A  3517    
                           A  3518    
                           A  3519    ; Stack Frame Size: 43 (bytes)
                           A  3520    ;       Spill Code: -3 (instruction)
                           A  3521    
                           A  3522    
                           A  3523    .ENDFUNC "generic8888_to_rgba2222",310,"_generi
                           A  3524    ;  311	
                           A  3525    ;  312	int8_t getByte(uint32_t bitmask) {
0B0BB2                     A  3526    _getByte:
                           A  3527    .DEFINE "_getByte"
                           A  3528    
                           A  3529    .VALUE _getByte
                           A  3530    
                           A  3531    .CLASS 2
                           A  3532    
                           A  3533    .TYPE 66
                           A  3534    
                           A  3535    .ENDEF
                           A  3536    
                           A  3537    .BEGFUNC "getByte",312,"_getByte"
                           A  3538    
                           A  3539    .LINE 312
                           A  3540    
                           A  3541    .DEFINE "bitmask"
                           A  3542    
                           A  3543    .CLASS 65
                           A  3544    
                           A  3545    .VALUE 6
                           A  3546    
                           A  3547    .TYPE 15
                           A  3548    
                           A  3549    .ENDEF
                           A  3550    
0B0BB2 DDE5                A  3551    	PUSH	IX
0B0BB4 DD210000 00         A  3552    	LD	IX,0
0B0BB9 DD39                A  3553    	ADD	IX,SP
                           A  3554    ;  313	
                           A  3555    ;  314	    if (bitmask & 0xFF) {
                           A  3556    .LINE 314
                           A  3557    
0B0BBB B7ED62              A  3558    	UEXT	HL
0B0BBE DD6E06              A  3559    	LD	L,(IX+%6)
0B0BC1 5C                  A  3560    	LD	E,H
0B0BC2 01000000            A  3561    	LD	BC,0
0B0BC6 AF                  A  3562    	XOR	A,A
0B0BC7 CD 49 40 0B         A  3563    	CALL	__lcmpu
0B0BCB 28 03               A  3564    	JR	Z,L_90
                           A  3565    ;  315	        return 0;
                           A  3566    .LINE 315
                           A  3567    
0B0BCD AF                  A  3568    	XOR	A,A
0B0BCE 18 56               A  3569    	JR	L_92
                           A  3570    ;  316	    }
                           A  3571    ;  317	    else if ((bitmask >> 8) & 0xFF) {
0B0BD0                     A  3572    L_90:
                           A  3573    .LINE 317
                           A  3574    
0B0BD0 DD0707              A  3575    	LD	BC,(IX+%7)
0B0BD3 B7ED62              A  3576    	UEXT	HL
0B0BD6 69                  A  3577    	LD	L,C
0B0BD7 5C                  A  3578    	LD	E,H
0B0BD8 01000000            A  3579    	LD	BC,0
0B0BDC AF                  A  3580    	XOR	A,A
0B0BDD CD 49 40 0B         A  3581    	CALL	__lcmpu
0B0BE1 28 04               A  3582    	JR	Z,L_88
                           A  3583    ;  318	        return 1;
                           A  3584    .LINE 318
                           A  3585    
0B0BE3 3E01                A  3586    	LD	A,%1
0B0BE5 18 3F               A  3587    	JR	L_92
                           A  3588    ;  319	    }
                           A  3589    ;  320		else if ((bitmask >> 16) & 0xFF) {
0B0BE7                     A  3590    L_88:
                           A  3591    .LINE 320
                           A  3592    
0B0BE7 B7ED62              A  3593    	UEXT	HL
0B0BEA E5                  A  3594    	PUSH	HL
0B0BEB DD0707              A  3595    	LD	BC,(IX+%7)
0B0BEE C5                  A  3596    	PUSH	BC
0B0BEF 33                  A  3597    	INC	SP
0B0BF0 C1                  A  3598    	POP	BC
0B0BF1 33                  A  3599    	INC	SP
0B0BF2 33                  A  3600    	INC	SP
0B0BF3 B7ED62              A  3601    	UEXT	HL
0B0BF6 69                  A  3602    	LD	L,C
0B0BF7 5C                  A  3603    	LD	E,H
0B0BF8 01000000            A  3604    	LD	BC,0
0B0BFC AF                  A  3605    	XOR	A,A
0B0BFD CD 49 40 0B         A  3606    	CALL	__lcmpu
0B0C01 28 04               A  3607    	JR	Z,L_86
                           A  3608    ;  321	        return 2;
                           A  3609    .LINE 321
                           A  3610    
0B0C03 3E02                A  3611    	LD	A,%2
0B0C05 18 1F               A  3612    	JR	L_92
                           A  3613    ;  322	    }
                           A  3614    ;  323	    else if ((bitmask >> 24) & 0xFF) {
0B0C07                     A  3615    L_86:
                           A  3616    .LINE 323
                           A  3617    
0B0C07 DD7E09              A  3618    	LD	A,(IX+%9)
0B0C0A B7ED62              A  3619    	UEXT	HL
0B0C0D 6F                  A  3620    	LD	L,A
0B0C0E E5C1                A  3621    	LD	BC,HL
0B0C10 B7ED62              A  3622    	UEXT	HL
0B0C13 69                  A  3623    	LD	L,C
0B0C14 5C                  A  3624    	LD	E,H
0B0C15 01000000            A  3625    	LD	BC,0
0B0C19 AF                  A  3626    	XOR	A,A
0B0C1A CD 49 40 0B         A  3627    	CALL	__lcmpu
0B0C1E 28 04               A  3628    	JR	Z,L_91
                           A  3629    ;  324	        return 3;
                           A  3630    .LINE 324
                           A  3631    
0B0C20 3E03                A  3632    	LD	A,%3
0B0C22 18 02               A  3633    	JR	L_92
                           A  3634    ;  325	    }
0B0C24                     A  3635    L_91:
                           A  3636    .LINE 325
                           A  3637    
                           A  3638    ;  326	
                           A  3639    ;  327	    return -1;
                           A  3640    .LINE 327
                           A  3641    
0B0C24 3EFF                A  3642    	LD	A,%FF
                           A  3643    ;  328	}
0B0C26                     A  3644    L_92:
                           A  3645    .LINE 328
                           A  3646    
0B0C26 DDF9                A  3647    	LD	SP,IX
0B0C28 DDE1                A  3648    	POP	IX
0B0C2A C9                  A  3649    	RET	
                           A  3650    
                           A  3651    
                           A  3652    ;**************************** _getByte ********
                           A  3653    ;Name                         Addr/Register   S
                           A  3654    ;bitmask                               IX+6    
                           A  3655    
                           A  3656    
                           A  3657    ; Stack Frame Size: 12 (bytes)
                           A  3658    ;       Spill Code: -3 (instruction)
                           A  3659    
                           A  3660    
                           A  3661    .ENDFUNC "getByte",328,"_getByte"
                           A  3662    ;  329	
                           A  3663    ;  330	void print_bin(void* value, size_t size
0B0C2B                     A  3664    _print_bin:
                           A  3665    .DEFINE "_print_bin"
                           A  3666    
                           A  3667    .VALUE _print_bin
                           A  3668    
                           A  3669    .CLASS 2
                           A  3670    
                           A  3671    .TYPE 65
                           A  3672    
                           A  3673    .ENDEF
                           A  3674    
                           A  3675    .BEGFUNC "print_bin",330,"_print_bin"
                           A  3676    
                           A  3677    .LINE 330
                           A  3678    
                           A  3679    .DEFINE "value"
                           A  3680    
                           A  3681    .CLASS 65
                           A  3682    
                           A  3683    .VALUE 6
                           A  3684    
                           A  3685    .TYPE 33
                           A  3686    
                           A  3687    .ENDEF
                           A  3688    
                           A  3689    .DEFINE "size"
                           A  3690    
                           A  3691    .CLASS 65
                           A  3692    
                           A  3693    .VALUE 9
                           A  3694    
                           A  3695    .TYPE 14
                           A  3696    
                           A  3697    .ENDEF
                           A  3698    
                           A  3699    .DEFINE "i"
                           A  3700    
                           A  3701    .CLASS 65
                           A  3702    
                           A  3703    .VALUE -3
                           A  3704    
                           A  3705    .TYPE 4
                           A  3706    
                           A  3707    .ENDEF
                           A  3708    
                           A  3709    .DEFINE "j"
                           A  3710    
                           A  3711    .CLASS 65
                           A  3712    
                           A  3713    .VALUE -6
                           A  3714    
                           A  3715    .TYPE 4
                           A  3716    
                           A  3717    .ENDEF
                           A  3718    
0B0C2B DDE5                A  3719    	PUSH	IX
0B0C2D DD210000 00         A  3720    	LD	IX,0
0B0C32 DD39                A  3721    	ADD	IX,SP
0B0C34 C5                  A  3722    	PUSH	BC
0B0C35 C5                  A  3723    	PUSH	BC
                           A  3724    ;  331	    
                           A  3725    ;  332		int i, j;
                           A  3726    ;  333		unsigned char* bytes = (unsigned ch
                           A  3727    ;  334		
                           A  3728    ;  335		if (size == 0) {
                           A  3729    .LINE 335
                           A  3730    
0B0C36 01000000            A  3731    	LD	BC,0
0B0C3A DD2709              A  3732    	LD	HL,(IX+%9)
0B0C3D B7                  A  3733    	OR	A,A
0B0C3E ED42                A  3734    	SBC	HL,BC
0B0C40 20 17               A  3735    	JR	NZ,L_102
                           A  3736    ;  336	        printf("Error: Invalid size\n")
                           A  3737    .LINE 336
                           A  3738    
0B0C42 01 28 39 0B         A  3739    	LD	BC,___print_uputch
0B0C46 ED43 1B 43 0B       A  3740    	LD	(___print_xputch),BC
0B0C4B 01 21 43 0B         A  3741    	LD	BC,L__54
0B0C4F C5                  A  3742    	PUSH	BC
0B0C50 CD 70 37 0B         A  3743    	CALL	___print_sendstring
0B0C54 C1                  A  3744    	POP	BC
                           A  3745    ;  337	        return;
                           A  3746    .LINE 337
                           A  3747    
0B0C55 C3 DF 0C 0B         A  3748    	JR	L_103
                           A  3749    ;  338	    }
0B0C59                     A  3750    L_102:
                           A  3751    .LINE 338
                           A  3752    
                           A  3753    ;  339	
                           A  3754    ;  340	    for (i = size - 1; i >= 0; i--) {
                           A  3755    .LINE 340
                           A  3756    
0B0C59 DD0709              A  3757    	LD	BC,(IX+%9)
0B0C5C 0B                  A  3758    	DEC	BC
0B0C5D DD0FFD              A  3759    	LD	(IX+%FFFFFFFD),BC
0B0C60 18 65               A  3760    	JR	L_101
0B0C62                     A  3761    L_99:
                           A  3762    ;  341	        for (j = 7; j >= 0; j--) {
                           A  3763    .LINE 341
                           A  3764    
0B0C62 01070000            A  3765    	LD	BC,7
0B0C66 DD0FFA              A  3766    	LD	(IX+%FFFFFFFA),BC
0B0C69 18 3D               A  3767    	JR	L_98
0B0C6B                     A  3768    L_96:
                           A  3769    ;  342	            printf("%d", (bytes[i] >> j
                           A  3770    .LINE 342
                           A  3771    
0B0C6B 01 28 39 0B         A  3772    	LD	BC,___print_uputch
0B0C6F ED43 1B 43 0B       A  3773    	LD	(___print_xputch),BC
0B0C74 DD07FD              A  3774    	LD	BC,(IX+%FFFFFFFD)
0B0C77 DD2706              A  3775    	LD	HL,(IX+%6)
0B0C7A 09                  A  3776    	ADD	HL,BC
0B0C7B 7E                  A  3777    	LD	A,(HL)
0B0C7C B7ED62              A  3778    	UEXT	HL
0B0C7F 6F                  A  3779    	LD	L,A
0B0C80 DD07FA              A  3780    	LD	BC,(IX+%FFFFFFFA)
0B0C83 CD 3E 37 0B         A  3781    	CALL	__ishrs
0B0C87 7D                  A  3782    	LD	A,L
0B0C88 E601                A  3783    	AND	A,%1
0B0C8A B7ED62              A  3784    	UEXT	HL
0B0C8D 6F                  A  3785    	LD	L,A
0B0C8E E5C1                A  3786    	LD	BC,HL
0B0C90 CD FF 3F 0B         A  3787    	CALL	__itol
0B0C94 C5D1                A  3788    	LD	DE,BC
0B0C96 4F                  A  3789    	LD	C,A
0B0C97 0600                A  3790    	LD	B,%0
0B0C99 C5                  A  3791    	PUSH	BC
0B0C9A D5                  A  3792    	PUSH	DE
0B0C9B CD EE 39 0B         A  3793    	CALL	__u_itoa
0B0C9F C1                  A  3794    	POP	BC
0B0CA0 C1                  A  3795    	POP	BC
0B0CA1 DD07FA              A  3796    	LD	BC,(IX+%FFFFFFFA)
0B0CA4 0B                  A  3797    	DEC	BC
0B0CA5 DD0FFA              A  3798    	LD	(IX+%FFFFFFFA),BC
                           A  3799    ;  343	        }
0B0CA8                     A  3800    L_98:
                           A  3801    .LINE 343
                           A  3802    
0B0CA8 01000000            A  3803    	LD	BC,0
0B0CAC DD27FA              A  3804    	LD	HL,(IX+%FFFFFFFA)
0B0CAF B7                  A  3805    	OR	A,A
0B0CB0 ED42                A  3806    	SBC	HL,BC
0B0CB2 F2 BC 0C 0B         A  3807    	JP	P,L__57
0B0CB6 EA 6B 0C 0B         A  3808    	JP	PE,L_96
0B0CBA 18 04               A  3809    	JR	L__58
0B0CBC                     A  3810    L__57:
0B0CBC E2 6B 0C 0B         A  3811    	JP	PO,L_96
0B0CC0                     A  3812    L__58:
0B0CC0 DD07FD              A  3813    	LD	BC,(IX+%FFFFFFFD)
0B0CC3 0B                  A  3814    	DEC	BC
0B0CC4 DD0FFD              A  3815    	LD	(IX+%FFFFFFFD),BC
                           A  3816    ;  344	    }
0B0CC7                     A  3817    L_101:
                           A  3818    .LINE 344
                           A  3819    
0B0CC7 01000000            A  3820    	LD	BC,0
0B0CCB DD27FD              A  3821    	LD	HL,(IX+%FFFFFFFD)
0B0CCE B7                  A  3822    	OR	A,A
0B0CCF ED42                A  3823    	SBC	HL,BC
0B0CD1 F2 DB 0C 0B         A  3824    	JP	P,L__59
0B0CD5 EA 62 0C 0B         A  3825    	JP	PE,L_99
0B0CD9 18 04               A  3826    	JR	L__60
0B0CDB                     A  3827    L__59:
0B0CDB E2 62 0C 0B         A  3828    	JP	PO,L_99
0B0CDF                     A  3829    L__60:
                           A  3830    ;  345	}
0B0CDF                     A  3831    L_103:
                           A  3832    .LINE 345
                           A  3833    
0B0CDF DDF9                A  3834    	LD	SP,IX
0B0CE1 DDE1                A  3835    	POP	IX
0B0CE3 C9                  A  3836    	RET	
                           A  3837    
                           A  3838    
                           A  3839    ;**************************** _print_bin ******
                           A  3840    ;Name                         Addr/Register   S
                           A  3841    ;__u_itoa                            IMPORT  --
                           A  3842    ;___print_sendstring                 IMPORT  --
                           A  3843    ;___print_xputch                     IMPORT    
                           A  3844    ;___print_uputch                     IMPORT  --
                           A  3845    ;j                                     IX-6    
                           A  3846    ;i                                     IX-3    
                           A  3847    ;size                                  IX+9    
                           A  3848    ;value                                 IX+6    
                           A  3849    
                           A  3850    
                           A  3851    ; Stack Frame Size: 18 (bytes)
                           A  3852    ;       Spill Code: -3 (instruction)
                           A  3853    
                           A  3854    
                           A  3855    .ENDFUNC "print_bin",345,"_print_bin"
                           A  3856    	SEGMENT STRSECT
0B4321                     A  3857    L__54:
0B4321 4572726F 723A2049   A  3858    	DB	"Error: Invalid size"
0B4329 6E76616C 69642073 
0B4331 697A65 
0B4334 0A00                A  3859    	DB	10,0
                           A  3860    	SEGMENT CODE
                           A  3861    ;  346	
                           A  3862    ;  347	bmp_info get_info(const char * filename
0B0CE4                     A  3863    _get_info:
                           A  3864    .DEFINE "_get_info"
                           A  3865    
                           A  3866    .VALUE _get_info
                           A  3867    
                           A  3868    .CLASS 2
                           A  3869    
                           A  3870    .TAG "NONAME6"
                           A  3871    
                           A  3872    .TYPE 72
                           A  3873    
                           A  3874    .ENDEF
                           A  3875    
                           A  3876    .BEGFUNC "get_info",347,"_get_info"
                           A  3877    
                           A  3878    .LINE 347
                           A  3879    
                           A  3880    .DEFINE "filename"
                           A  3881    
                           A  3882    .CLASS 65
                           A  3883    
                           A  3884    .VALUE 9
                           A  3885    
                           A  3886    .TYPE 194
                           A  3887    
                           A  3888    .ENDEF
                           A  3889    
                           A  3890    .DEFINE "main_header"
                           A  3891    
                           A  3892    .CLASS 65
                           A  3893    
                           A  3894    .VALUE -3
                           A  3895    
                           A  3896    .TYPE 34
                           A  3897    
                           A  3898    .ENDEF
                           A  3899    
                           A  3900    .DEFINE "file"
                           A  3901    
                           A  3902    .CLASS 65
                           A  3903    
                           A  3904    .VALUE -4
                           A  3905    
                           A  3906    .TYPE 12
                           A  3907    
                           A  3908    .ENDEF
                           A  3909    
                           A  3910    .DEFINE "redmask"
                           A  3911    
                           A  3912    .CLASS 65
                           A  3913    
                           A  3914    .VALUE -6
                           A  3915    
                           A  3916    .TYPE 13
                           A  3917    
                           A  3918    .ENDEF
                           A  3919    
                           A  3920    .DEFINE "greenmask"
                           A  3921    
                           A  3922    .CLASS 65
                           A  3923    
                           A  3924    .VALUE -8
                           A  3925    
                           A  3926    .TYPE 13
                           A  3927    
                           A  3928    .ENDEF
                           A  3929    
                           A  3930    .DEFINE "bluemask"
                           A  3931    
                           A  3932    .CLASS 65
                           A  3933    
                           A  3934    .VALUE -10
                           A  3935    
                           A  3936    .TYPE 13
                           A  3937    
                           A  3938    .ENDEF
                           A  3939    
                           A  3940    .DEFINE "alphamask"
                           A  3941    
                           A  3942    .CLASS 65
                           A  3943    
                           A  3944    .VALUE -12
                           A  3945    
                           A  3946    .TYPE 13
                           A  3947    
                           A  3948    .ENDEF
                           A  3949    
                           A  3950    .DEFINE "fo"
                           A  3951    
                           A  3952    .CLASS 65
                           A  3953    
                           A  3954    .VALUE -15
                           A  3955    
                           A  3956    .TAG "NONAME5"
                           A  3957    
                           A  3958    .TYPE 40
                           A  3959    
                           A  3960    .ENDEF
                           A  3961    
                           A  3962    .DEFINE "initial_header"
                           A  3963    
                           A  3964    .CLASS 65
                           A  3965    
                           A  3966    .VALUE -33
                           A  3967    
                           A  3968    .DIM 18
                           A  3969    
                           A  3970    .TYPE 98
                           A  3971    
                           A  3972    .ENDEF
                           A  3973    
                           A  3974    .DEFINE "bmp"
                           A  3975    
                           A  3976    .CLASS 65
                           A  3977    
                           A  3978    .VALUE -1106
                           A  3979    
                           A  3980    .TAG "NONAME6"
                           A  3981    
                           A  3982    .TYPE 8
                           A  3983    
                           A  3984    .ENDEF
                           A  3985    
0B0CE4 DDE5                A  3986    	PUSH	IX
0B0CE6 DD210000 00         A  3987    	LD	IX,0
0B0CEB DD39                A  3988    	ADD	IX,SP
0B0CED 21AEFBFF            A  3989    	LD	HL,-1106
0B0CF1 39                  A  3990    	ADD	HL,SP
0B0CF2 F9                  A  3991    	LD	SP,HL
                           A  3992    ;  348	
                           A  3993    ;  349		uint8_t file;
                           A  3994    ;  350		FIL * fo;
                           A  3995    ;  351		bmp_info bmp;
                           A  3996    ;  352		char initial_header[18];
                           A  3997    ;  353		char *main_header;
                           A  3998    ;  354		
                           A  3999    ;  355		memset(&bmp, 0, sizeof(bmp));	
                           A  4000    .LINE 355
                           A  4001    
0B0CF3 01310400            A  4002    	LD	BC,1073
0B0CF7 C5                  A  4003    	PUSH	BC
0B0CF8 01000000            A  4004    	LD	BC,0
0B0CFC C5                  A  4005    	PUSH	BC
0B0CFD DDE5E1              A  4006    	LD	HL,IX
0B0D00 01AEFBFF            A  4007    	LD	BC,-1106
0B0D04 09                  A  4008    	ADD	HL,BC
0B0D05 E5C1                A  4009    	LD	BC,HL
0B0D07 C5                  A  4010    	PUSH	BC
0B0D08 CD 8F 40 0B         A  4011    	CALL	_memset
0B0D0C C1                  A  4012    	POP	BC
0B0D0D C1                  A  4013    	POP	BC
0B0D0E C1                  A  4014    	POP	BC
                           A  4015    ;  356		
                           A  4016    ;  357		file = mos_fopen(filename, fa_read)
                           A  4017    .LINE 357
                           A  4018    
0B0D0F 01010000            A  4019    	LD	BC,1
0B0D13 C5                  A  4020    	PUSH	BC
0B0D14 DD0709              A  4021    	LD	BC,(IX+%9)
0B0D17 C5                  A  4022    	PUSH	BC
0B0D18 CD 95 33 0B         A  4023    	CALL	_mos_fopen
0B0D1C C1                  A  4024    	POP	BC
0B0D1D C1                  A  4025    	POP	BC
0B0D1E DD77FC              A  4026    	LD	(IX+%FFFFFFFC),A
                           A  4027    ;  358		fo = (FIL * ) mos_getfil(file);
                           A  4028    .LINE 358
                           A  4029    
0B0D21 DD4EFC              A  4030    	LD	C,(IX+%FFFFFFFC)
0B0D24 0600                A  4031    	LD	B,%0
0B0D26 C5                  A  4032    	PUSH	BC
0B0D27 CD 1B 35 0B         A  4033    	CALL	_mos_getfil
0B0D2B C1                  A  4034    	POP	BC
0B0D2C DD2FF1              A  4035    	LD	(IX+%FFFFFFF1),HL
                           A  4036    ;  359		
                           A  4037    ;  360	    if (!file) {
                           A  4038    .LINE 360
                           A  4039    
0B0D2F DD7EFC              A  4040    	LD	A,(IX+%FFFFFFFC)
0B0D32 B7                  A  4041    	OR	A,A
0B0D33 20 40               A  4042    	JR	NZ,L_105
                           A  4043    ;  361	        printf("Error: could not open %
                           A  4044    .LINE 361
                           A  4045    
0B0D35 01 28 39 0B         A  4046    	LD	BC,___print_uputch
0B0D39 ED43 1B 43 0B       A  4047    	LD	(___print_xputch),BC
0B0D3E 01 36 43 0B         A  4048    	LD	BC,L__63
0B0D42 C5                  A  4049    	PUSH	BC
0B0D43 CD 70 37 0B         A  4050    	CALL	___print_sendstring
0B0D47 C1                  A  4051    	POP	BC
0B0D48 DD0709              A  4052    	LD	BC,(IX+%9)
0B0D4B C5                  A  4053    	PUSH	BC
0B0D4C CD 70 37 0B         A  4054    	CALL	___print_sendstring
0B0D50 C1                  A  4055    	POP	BC
0B0D51 01 4D 43 0B         A  4056    	LD	BC,L__64
0B0D55 C5                  A  4057    	PUSH	BC
0B0D56 CD 70 37 0B         A  4058    	CALL	___print_sendstring
0B0D5A C1                  A  4059    	POP	BC
                           A  4060    ;  362	        return bmp;
                           A  4061    .LINE 362
                           A  4062    
0B0D5B ED2206              A  4063    	LEA	HL,IX+%6
0B0D5E ED17                A  4064    	LD	DE,(HL)
0B0D60 DDE5E1              A  4065    	LD	HL,IX
0B0D63 01AEFBFF            A  4066    	LD	BC,-1106
0B0D67 09                  A  4067    	ADD	HL,BC
0B0D68 01310400            A  4068    	LD	BC,1073
0B0D6C EDB0                A  4069    	LDIR	
0B0D6E DD2706              A  4070    	LD	HL,(IX+%6)
0B0D71 C3 10 15 0B         A  4071    	JR	L_122
                           A  4072    ;  363	    }
0B0D75                     A  4073    L_105:
                           A  4074    .LINE 363
                           A  4075    
                           A  4076    ;  364	
                           A  4077    ;  365		mos_fread(file, initial_header, 14 
                           A  4078    .LINE 365
                           A  4079    
0B0D75 01120000            A  4080    	LD	BC,18
0B0D79 C5                  A  4081    	PUSH	BC
0B0D7A ED65DF              A  4082    	PEA	IX+%FFFFFFDF
0B0D7D DD4EFC              A  4083    	LD	C,(IX+%FFFFFFFC)
0B0D80 0600                A  4084    	LD	B,%0
0B0D82 C5                  A  4085    	PUSH	BC
0B0D83 CD C2 34 0B         A  4086    	CALL	_mos_fread
0B0D87 C1                  A  4087    	POP	BC
0B0D88 C1                  A  4088    	POP	BC
0B0D89 C1                  A  4089    	POP	BC
                           A  4090    ;  366		
                           A  4091    ;  367		bmp.pixels_offset = * (uint32_t * )
                           A  4092    .LINE 367
                           A  4093    
0B0D8A ED22E9              A  4094    	LEA	HL,IX+%FFFFFFE9
0B0D8D ED07                A  4095    	LD	BC,(HL)
0B0D8F 23                  A  4096    	INC	HL
0B0D90 23                  A  4097    	INC	HL
0B0D91 23                  A  4098    	INC	HL
0B0D92 7E                  A  4099    	LD	A,(HL)
0B0D93 FD21B3FB FF         A  4100    	LD	IY,-1101
0B0D98 DDE5D1              A  4101    	LD	DE,IX
0B0D9B FD19                A  4102    	ADD	IY,DE
0B0D9D FD0F00              A  4103    	LD	(IY),BC
0B0DA0 FD7703              A  4104    	LD	(IY+%3),A
                           A  4105    ;  368	    bmp.main_header_size = * (uint32_t 
                           A  4106    .LINE 368
                           A  4107    
0B0DA3 ED22ED              A  4108    	LEA	HL,IX+%FFFFFFED
0B0DA6 ED07                A  4109    	LD	BC,(HL)
0B0DA8 23                  A  4110    	INC	HL
0B0DA9 23                  A  4111    	INC	HL
0B0DAA 23                  A  4112    	INC	HL
0B0DAB 7E                  A  4113    	LD	A,(HL)
0B0DAC FD21BBFB FF         A  4114    	LD	IY,-1093
0B0DB1 DDE5D1              A  4115    	LD	DE,IX
0B0DB4 FD19                A  4116    	ADD	IY,DE
0B0DB6 FD0F00              A  4117    	LD	(IY),BC
0B0DB9 FD7703              A  4118    	LD	(IY+%3),A
                           A  4119    ;  369		
                           A  4120    ;  370		main_header = malloc(bmp.main_heade
                           A  4121    .LINE 370
                           A  4122    
0B0DBC 21BBFBFF            A  4123    	LD	HL,-1093
0B0DC0 DDE5C1              A  4124    	LD	BC,IX
0B0DC3 09                  A  4125    	ADD	HL,BC
0B0DC4 ED07                A  4126    	LD	BC,(HL)
0B0DC6 C5                  A  4127    	PUSH	BC
0B0DC7 CD 4B 36 0B         A  4128    	CALL	_malloc
0B0DCB C1                  A  4129    	POP	BC
0B0DCC DD2FFD              A  4130    	LD	(IX+%FFFFFFFD),HL
                           A  4131    ;  371		
                           A  4132    ;  372		mos_flseek(file, 14);
                           A  4133    .LINE 372
                           A  4134    
0B0DCF 01000000            A  4135    	LD	BC,0
0B0DD3 C5                  A  4136    	PUSH	BC
0B0DD4 010E0000            A  4137    	LD	BC,14
0B0DD8 C5                  A  4138    	PUSH	BC
0B0DD9 DD4EFC              A  4139    	LD	C,(IX+%FFFFFFFC)
0B0DDC 0600                A  4140    	LD	B,%0
0B0DDE C5                  A  4141    	PUSH	BC
0B0DDF CD FC 34 0B         A  4142    	CALL	_mos_flseek
0B0DE3 C1                  A  4143    	POP	BC
0B0DE4 C1                  A  4144    	POP	BC
0B0DE5 C1                  A  4145    	POP	BC
                           A  4146    ;  373		mos_fread(file, main_header, bmp.ma
                           A  4147    .LINE 373
                           A  4148    
0B0DE6 21BBFBFF            A  4149    	LD	HL,-1093
0B0DEA DDE5C1              A  4150    	LD	BC,IX
0B0DED 09                  A  4151    	ADD	HL,BC
0B0DEE ED07                A  4152    	LD	BC,(HL)
0B0DF0 C5                  A  4153    	PUSH	BC
0B0DF1 DD07FD              A  4154    	LD	BC,(IX+%FFFFFFFD)
0B0DF4 C5                  A  4155    	PUSH	BC
0B0DF5 DD4EFC              A  4156    	LD	C,(IX+%FFFFFFFC)
0B0DF8 0600                A  4157    	LD	B,%0
0B0DFA C5                  A  4158    	PUSH	BC
0B0DFB CD C2 34 0B         A  4159    	CALL	_mos_fread
0B0DFF C1                  A  4160    	POP	BC
0B0E00 C1                  A  4161    	POP	BC
0B0E01 C1                  A  4162    	POP	BC
                           A  4163    ;  374		
                           A  4164    ;  375		bmp.bmp_width = *(int32_t *) & main
                           A  4165    .LINE 375
                           A  4166    
0B0E02 DD31FD              A  4167    	LD	IY,(IX+%FFFFFFFD)
0B0E05 ED2304              A  4168    	LEA	HL,IY+%4
0B0E08 ED07                A  4169    	LD	BC,(HL)
0B0E0A 21AEFBFF            A  4170    	LD	HL,-1106
0B0E0E DDE5D1              A  4171    	LD	DE,IX
0B0E11 19                  A  4172    	ADD	HL,DE
0B0E12 71                  A  4173    	LD	(HL),C
0B0E13 23                  A  4174    	INC	HL
0B0E14 70                  A  4175    	LD	(HL),B
                           A  4176    ;  376		bmp.bmp_height = *(int32_t *) & mai
                           A  4177    .LINE 376
                           A  4178    
0B0E15 ED2308              A  4179    	LEA	HL,IY+%8
0B0E18 ED07                A  4180    	LD	BC,(HL)
0B0E1A 21B0FBFF            A  4181    	LD	HL,-1104
0B0E1E DDE5D1              A  4182    	LD	DE,IX
0B0E21 19                  A  4183    	ADD	HL,DE
0B0E22 71                  A  4184    	LD	(HL),C
0B0E23 23                  A  4185    	INC	HL
0B0E24 70                  A  4186    	LD	(HL),B
                           A  4187    ;  377		bmp.bmp_bitdepth = *(uint16_t *) & 
                           A  4188    .LINE 377
                           A  4189    
0B0E25 ED230E              A  4190    	LEA	HL,IY+%E
0B0E28 7E                  A  4191    	LD	A,(HL)
0B0E29 21B2FBFF            A  4192    	LD	HL,-1102
0B0E2D DDE5C1              A  4193    	LD	BC,IX
0B0E30 09                  A  4194    	ADD	HL,BC
0B0E31 77                  A  4195    	LD	(HL),A
                           A  4196    ;  378		bmp.compression = *(uint32_t *) & m
                           A  4197    .LINE 378
                           A  4198    
0B0E32 ED2310              A  4199    	LEA	HL,IY+%10
0B0E35 ED07                A  4200    	LD	BC,(HL)
0B0E37 23                  A  4201    	INC	HL
0B0E38 23                  A  4202    	INC	HL
0B0E39 23                  A  4203    	INC	HL
0B0E3A 7E                  A  4204    	LD	A,(HL)
0B0E3B FD21BFFB FF         A  4205    	LD	IY,-1089
0B0E40 DDE5D1              A  4206    	LD	DE,IX
0B0E43 FD19                A  4207    	ADD	IY,DE
0B0E45 FD0F00              A  4208    	LD	(IY),BC
0B0E48 FD7703              A  4209    	LD	(IY+%3),A
                           A  4210    ;  379		bmp.color_table_size = * (uint32_t 
                           A  4211    .LINE 379
                           A  4212    
0B0E4B DD31FD              A  4213    	LD	IY,(IX+%FFFFFFFD)
0B0E4E ED2320              A  4214    	LEA	HL,IY+%20
0B0E51 ED07                A  4215    	LD	BC,(HL)
0B0E53 23                  A  4216    	INC	HL
0B0E54 23                  A  4217    	INC	HL
0B0E55 23                  A  4218    	INC	HL
0B0E56 7E                  A  4219    	LD	A,(HL)
0B0E57 FD21D3FB FF         A  4220    	LD	IY,-1069
0B0E5C DDE5D1              A  4221    	LD	DE,IX
0B0E5F FD19                A  4222    	ADD	IY,DE
0B0E61 FD0F00              A  4223    	LD	(IY),BC
0B0E64 FD7703              A  4224    	LD	(IY+%3),A
                           A  4225    ;  380	
                           A  4226    ;  381	    if (bmp.color_table_size == 0 && bm
                           A  4227    .LINE 381
                           A  4228    
0B0E67 FD21D3FB FF         A  4229    	LD	IY,-1069
0B0E6C DDE5C1              A  4230    	LD	BC,IX
0B0E6F FD09                A  4231    	ADD	IY,BC
0B0E71 FD2700              A  4232    	LD	HL,(IY)
0B0E74 FD5E03              A  4233    	LD	E,(IY+%3)
0B0E77 01000000            A  4234    	LD	BC,0
0B0E7B AF                  A  4235    	XOR	A,A
0B0E7C CD 49 40 0B         A  4236    	CALL	__lcmpu
0B0E80 20 22               A  4237    	JR	NZ,L_109
0B0E82 21B2FBFF            A  4238    	LD	HL,-1102
0B0E86 DDE5C1              A  4239    	LD	BC,IX
0B0E89 09                  A  4240    	ADD	HL,BC
0B0E8A 7E                  A  4241    	LD	A,(HL)
0B0E8B FE08                A  4242    	CP	A,%8
0B0E8D 20 15               A  4243    	JR	NZ,L_109
                           A  4244    ;  382	        bmp.color_table_size = 256;
                           A  4245    .LINE 382
                           A  4246    
0B0E8F 01000100            A  4247    	LD	BC,256
0B0E93 FD21D3FB FF         A  4248    	LD	IY,-1069
0B0E98 DDE5D1              A  4249    	LD	DE,IX
0B0E9B FD19                A  4250    	ADD	IY,DE
0B0E9D FD0F00              A  4251    	LD	(IY),BC
0B0EA0 FD360300            A  4252    	LD	(IY+%3),%0
                           A  4253    ;  383	    }
0B0EA4                     A  4254    L_109:
                           A  4255    .LINE 383
                           A  4256    
                           A  4257    ;  384	
                           A  4258    ;  385		if (bmp.color_table_size > 0) mos_f
                           A  4259    .LINE 385
                           A  4260    
0B0EA4 FD21D3FB FF         A  4261    	LD	IY,-1069
0B0EA9 DDE5C1              A  4262    	LD	BC,IX
0B0EAC FD09                A  4263    	ADD	IY,BC
0B0EAE FD0700              A  4264    	LD	BC,(IY)
0B0EB1 FD7E03              A  4265    	LD	A,(IY+%3)
0B0EB4 B7                  A  4266    	OR	A,A
0B0EB5 ED62                A  4267    	SBC	HL,HL
0B0EB7 1E00                A  4268    	LD	E,%0
0B0EB9 CD 49 40 0B         A  4269    	CALL	__lcmpu
0B0EBD 30 25               A  4270    	JR	NC,L_110
0B0EBF 21D3FBFF            A  4271    	LD	HL,-1069
0B0EC3 DDE5C1              A  4272    	LD	BC,IX
0B0EC6 09                  A  4273    	ADD	HL,BC
0B0EC7 ED27                A  4274    	LD	HL,(HL)
0B0EC9 29                  A  4275    	ADD	HL,HL
0B0ECA 29                  A  4276    	ADD	HL,HL
0B0ECB E5                  A  4277    	PUSH	HL
0B0ECC DDE5E1              A  4278    	LD	HL,IX
0B0ECF 01D7FBFF            A  4279    	LD	BC,-1065
0B0ED3 09                  A  4280    	ADD	HL,BC
0B0ED4 E5C1                A  4281    	LD	BC,HL
0B0ED6 C5                  A  4282    	PUSH	BC
0B0ED7 DD4EFC              A  4283    	LD	C,(IX+%FFFFFFFC)
0B0EDA 0600                A  4284    	LD	B,%0
0B0EDC C5                  A  4285    	PUSH	BC
0B0EDD CD C2 34 0B         A  4286    	CALL	_mos_fread
0B0EE1 C1                  A  4287    	POP	BC
0B0EE2 C1                  A  4288    	POP	BC
0B0EE3 C1                  A  4289    	POP	BC
0B0EE4                     A  4290    L_110:
                           A  4291    ;  386		
                           A  4292    ;  387		bmp.row_padding = (4 - (bmp.bmp_wid
                           A  4293    .LINE 387
                           A  4294    
0B0EE4 21AEFBFF            A  4295    	LD	HL,-1106
0B0EE8 DDE5C1              A  4296    	LD	BC,IX
0B0EEB 09                  A  4297    	ADD	HL,BC
0B0EEC ED07                A  4298    	LD	BC,(HL)
0B0EEE CD 22 39 0B         A  4299    	CALL	__stoiu
0B0EF2 E5D1                A  4300    	LD	DE,HL
0B0EF4 21B2FBFF            A  4301    	LD	HL,-1102
0B0EF8 DDE5C1              A  4302    	LD	BC,IX
0B0EFB 09                  A  4303    	ADD	HL,BC
0B0EFC 7E                  A  4304    	LD	A,(HL)
0B0EFD B7ED62              A  4305    	UEXT	HL
0B0F00 6F                  A  4306    	LD	L,A
0B0F01 01080000            A  4307    	LD	BC,8
0B0F05 CD C6 3F 0B         A  4308    	CALL	__idivs
0B0F09 E5C1                A  4309    	LD	BC,HL
0B0F0B D5E1                A  4310    	LD	HL,DE
0B0F0D CD 8A 3F 0B         A  4311    	CALL	__imuls
0B0F11 01040000            A  4312    	LD	BC,4
0B0F15 CD FE 36 0B         A  4313    	CALL	__irems
0B0F19 E5C1                A  4314    	LD	BC,HL
0B0F1B 21040000            A  4315    	LD	HL,4
0B0F1F B7                  A  4316    	OR	A,A
0B0F20 ED42                A  4317    	SBC	HL,BC
0B0F22 01040000            A  4318    	LD	BC,4
0B0F26 CD FE 36 0B         A  4319    	CALL	__irems
0B0F2A DD75DB              A  4320    	LD	(IX+%FFFFFFDB),L
0B0F2D DD74DC              A  4321    	LD	(IX+%FFFFFFDC),H
                           A  4322    ;  388		bmp.non_pad_row = bmp.bmp_width * b
                           A  4323    .LINE 388
                           A  4324    
0B0F30 21AEFBFF            A  4325    	LD	HL,-1106
0B0F34 DDE5C1              A  4326    	LD	BC,IX
0B0F37 09                  A  4327    	ADD	HL,BC
0B0F38 ED07                A  4328    	LD	BC,(HL)
0B0F3A CD 22 39 0B         A  4329    	CALL	__stoiu
0B0F3E E5D1                A  4330    	LD	DE,HL
0B0F40 21B2FBFF            A  4331    	LD	HL,-1102
0B0F44 DDE5C1              A  4332    	LD	BC,IX
0B0F47 09                  A  4333    	ADD	HL,BC
0B0F48 7E                  A  4334    	LD	A,(HL)
0B0F49 B7ED62              A  4335    	UEXT	HL
0B0F4C 6F                  A  4336    	LD	L,A
0B0F4D E5C1                A  4337    	LD	BC,HL
0B0F4F D5E1                A  4338    	LD	HL,DE
0B0F51 CD 8A 3F 0B         A  4339    	CALL	__imuls
0B0F55 01080000            A  4340    	LD	BC,8
0B0F59 CD C6 3F 0B         A  4341    	CALL	__idivs
0B0F5D DD75DD              A  4342    	LD	(IX+%FFFFFFDD),L
0B0F60 DD74DE              A  4343    	LD	(IX+%FFFFFFDE),H
                           A  4344    ;  389		
                           A  4345    ;  390		printf("Debug: BMP is %u x %u x %u,
                           A  4346    .LINE 390
                           A  4347    
0B0F63 01 28 39 0B         A  4348    	LD	BC,___print_uputch
0B0F67 ED43 1B 43 0B       A  4349    	LD	(___print_xputch),BC
0B0F6C 01 51 43 0B         A  4350    	LD	BC,L__68
0B0F70 C5                  A  4351    	PUSH	BC
0B0F71 CD 70 37 0B         A  4352    	CALL	___print_sendstring
0B0F75 C1                  A  4353    	POP	BC
0B0F76 3E75                A  4354    	LD	A,%75
0B0F78 32 B7 45 0B         A  4355    	LD	(___print_fmt+4),A
0B0F7C 21AEFBFF            A  4356    	LD	HL,-1106
0B0F80 DDE5C1              A  4357    	LD	BC,IX
0B0F83 09                  A  4358    	ADD	HL,BC
0B0F84 ED07                A  4359    	LD	BC,(HL)
0B0F86 CD 22 39 0B         A  4360    	CALL	__stoiu
0B0F8A E5C1                A  4361    	LD	BC,HL
0B0F8C CD FF 3F 0B         A  4362    	CALL	__itol
0B0F90 C5D1                A  4363    	LD	DE,BC
0B0F92 4F                  A  4364    	LD	C,A
0B0F93 0600                A  4365    	LD	B,%0
0B0F95 C5                  A  4366    	PUSH	BC
0B0F96 D5                  A  4367    	PUSH	DE
0B0F97 CD AE 39 0B         A  4368    	CALL	__u_uitoa
0B0F9B C1                  A  4369    	POP	BC
0B0F9C C1                  A  4370    	POP	BC
0B0F9D 01 60 43 0B         A  4371    	LD	BC,L__69
0B0FA1 C5                  A  4372    	PUSH	BC
0B0FA2 CD 70 37 0B         A  4373    	CALL	___print_sendstring
0B0FA6 C1                  A  4374    	POP	BC
0B0FA7 3E75                A  4375    	LD	A,%75
0B0FA9 32 B7 45 0B         A  4376    	LD	(___print_fmt+4),A
0B0FAD 21B0FBFF            A  4377    	LD	HL,-1104
0B0FB1 DDE5C1              A  4378    	LD	BC,IX
0B0FB4 09                  A  4379    	ADD	HL,BC
0B0FB5 ED07                A  4380    	LD	BC,(HL)
0B0FB7 CD 22 39 0B         A  4381    	CALL	__stoiu
0B0FBB E5C1                A  4382    	LD	BC,HL
0B0FBD CD FF 3F 0B         A  4383    	CALL	__itol
0B0FC1 C5D1                A  4384    	LD	DE,BC
0B0FC3 4F                  A  4385    	LD	C,A
0B0FC4 0600                A  4386    	LD	B,%0
0B0FC6 C5                  A  4387    	PUSH	BC
0B0FC7 D5                  A  4388    	PUSH	DE
0B0FC8 CD AE 39 0B         A  4389    	CALL	__u_uitoa
0B0FCC C1                  A  4390    	POP	BC
0B0FCD C1                  A  4391    	POP	BC
0B0FCE 01 64 43 0B         A  4392    	LD	BC,L__70
0B0FD2 C5                  A  4393    	PUSH	BC
0B0FD3 CD 70 37 0B         A  4394    	CALL	___print_sendstring
0B0FD7 C1                  A  4395    	POP	BC
0B0FD8 3E75                A  4396    	LD	A,%75
0B0FDA 32 B7 45 0B         A  4397    	LD	(___print_fmt+4),A
0B0FDE 21B2FBFF            A  4398    	LD	HL,-1102
0B0FE2 DDE5C1              A  4399    	LD	BC,IX
0B0FE5 09                  A  4400    	ADD	HL,BC
0B0FE6 7E                  A  4401    	LD	A,(HL)
0B0FE7 B7ED62              A  4402    	UEXT	HL
0B0FEA 6F                  A  4403    	LD	L,A
0B0FEB E5C1                A  4404    	LD	BC,HL
0B0FED CD FF 3F 0B         A  4405    	CALL	__itol
0B0FF1 C5D1                A  4406    	LD	DE,BC
0B0FF3 4F                  A  4407    	LD	C,A
0B0FF4 0600                A  4408    	LD	B,%0
0B0FF6 C5                  A  4409    	PUSH	BC
0B0FF7 D5                  A  4410    	PUSH	DE
0B0FF8 CD AE 39 0B         A  4411    	CALL	__u_uitoa
0B0FFC C1                  A  4412    	POP	BC
0B0FFD C1                  A  4413    	POP	BC
0B0FFE 01 68 43 0B         A  4414    	LD	BC,L__71
0B1002 C5                  A  4415    	PUSH	BC
0B1003 CD 70 37 0B         A  4416    	CALL	___print_sendstring
0B1007 C1                  A  4417    	POP	BC
0B1008 3E75                A  4418    	LD	A,%75
0B100A 32 B7 45 0B         A  4419    	LD	(___print_fmt+4),A
0B100E FD21BFFB FF         A  4420    	LD	IY,-1089
0B1013 DDE5C1              A  4421    	LD	BC,IX
0B1016 FD09                A  4422    	ADD	IY,BC
0B1018 FD0700              A  4423    	LD	BC,(IY)
0B101B FD7E03              A  4424    	LD	A,(IY+%3)
0B101E 2600                A  4425    	LD	H,%0
0B1020 6F                  A  4426    	LD	L,A
0B1021 E5                  A  4427    	PUSH	HL
0B1022 C5                  A  4428    	PUSH	BC
0B1023 CD AE 39 0B         A  4429    	CALL	__u_uitoa
0B1027 C1                  A  4430    	POP	BC
0B1028 C1                  A  4431    	POP	BC
0B1029 01 7C 43 0B         A  4432    	LD	BC,L__72
0B102D C5                  A  4433    	PUSH	BC
0B102E CD 70 37 0B         A  4434    	CALL	___print_sendstring
0B1032 C1                  A  4435    	POP	BC
0B1033 3E75                A  4436    	LD	A,%75
0B1035 32 B7 45 0B         A  4437    	LD	(___print_fmt+4),A
0B1039 FD21BBFB FF         A  4438    	LD	IY,-1093
0B103E DDE5C1              A  4439    	LD	BC,IX
0B1041 FD09                A  4440    	ADD	IY,BC
0B1043 FD0700              A  4441    	LD	BC,(IY)
0B1046 FD7E03              A  4442    	LD	A,(IY+%3)
0B1049 2600                A  4443    	LD	H,%0
0B104B 6F                  A  4444    	LD	L,A
0B104C E5                  A  4445    	PUSH	HL
0B104D C5                  A  4446    	PUSH	BC
0B104E CD AE 39 0B         A  4447    	CALL	__u_uitoa
0B1052 C1                  A  4448    	POP	BC
0B1053 C1                  A  4449    	POP	BC
0B1054 01 8C 43 0B         A  4450    	LD	BC,L__73
0B1058 C5                  A  4451    	PUSH	BC
0B1059 CD 70 37 0B         A  4452    	CALL	___print_sendstring
0B105D C1                  A  4453    	POP	BC
                           A  4454    ;  391	
                           A  4455    ;  392		if ((bmp.compression == 3) || (bmp.
                           A  4456    .LINE 392
                           A  4457    
0B105E FD21BFFB FF         A  4458    	LD	IY,-1089
0B1063 DDE5C1              A  4459    	LD	BC,IX
0B1066 FD09                A  4460    	ADD	IY,BC
0B1068 FD2700              A  4461    	LD	HL,(IY)
0B106B FD5E03              A  4462    	LD	E,(IY+%3)
0B106E 01030000            A  4463    	LD	BC,3
0B1072 AF                  A  4464    	XOR	A,A
0B1073 CD 49 40 0B         A  4465    	CALL	__lcmpu
0B1077 28 3A               A  4466    	JR	Z,L_120
0B1079 FD21BFFB FF         A  4467    	LD	IY,-1089
0B107E DDE5C1              A  4468    	LD	BC,IX
0B1081 FD09                A  4469    	ADD	IY,BC
0B1083 FD2700              A  4470    	LD	HL,(IY)
0B1086 FD5E03              A  4471    	LD	E,(IY+%3)
0B1089 01060000            A  4472    	LD	BC,6
0B108D AF                  A  4473    	XOR	A,A
0B108E CD 49 40 0B         A  4474    	CALL	__lcmpu
0B1092 C2 EF 14 0B         A  4475    	JR	NZ,L_121
0B1096 FD21BBFB FF         A  4476    	LD	IY,-1093
0B109B DDE5C1              A  4477    	LD	BC,IX
0B109E FD09                A  4478    	ADD	IY,BC
0B10A0 FD2700              A  4479    	LD	HL,(IY)
0B10A3 FD5E03              A  4480    	LD	E,(IY+%3)
0B10A6 016C0000            A  4481    	LD	BC,108
0B10AA AF                  A  4482    	XOR	A,A
0B10AB CD 49 40 0B         A  4483    	CALL	__lcmpu
0B10AF DA EF 14 0B         A  4484    	JR	C,L_121
0B10B3                     A  4485    L_120:
                           A  4486    ;  393			
                           A  4487    ;  394			if (bmp.bmp_bitdepth == 32) {
                           A  4488    .LINE 394
                           A  4489    
0B10B3 21B2FBFF            A  4490    	LD	HL,-1102
0B10B7 DDE5C1              A  4491    	LD	BC,IX
0B10BA 09                  A  4492    	ADD	HL,BC
0B10BB 7E                  A  4493    	LD	A,(HL)
0B10BC FE20                A  4494    	CP	A,%20
0B10BE C2 6C 13 0B         A  4495    	JR	NZ,L_119
                           A  4496    ;  395								
                           A  4497    ;  396				bmp.redBitField = *(uint32_
                           A  4498    .LINE 396
                           A  4499    
0B10C2 DD31FD              A  4500    	LD	IY,(IX+%FFFFFFFD)
0B10C5 ED2328              A  4501    	LEA	HL,IY+%28
0B10C8 ED07                A  4502    	LD	BC,(HL)
0B10CA 23                  A  4503    	INC	HL
0B10CB 23                  A  4504    	INC	HL
0B10CC 23                  A  4505    	INC	HL
0B10CD 7E                  A  4506    	LD	A,(HL)
0B10CE FD21C3FB FF         A  4507    	LD	IY,-1085
0B10D3 DDE5D1              A  4508    	LD	DE,IX
0B10D6 FD19                A  4509    	ADD	IY,DE
0B10D8 FD0F00              A  4510    	LD	(IY),BC
0B10DB FD7703              A  4511    	LD	(IY+%3),A
                           A  4512    ;  397				bmp.red_pos = getByte(bmp.r
                           A  4513    .LINE 397
                           A  4514    
0B10DE FD21C3FB FF         A  4515    	LD	IY,-1085
0B10E3 DDE5C1              A  4516    	LD	BC,IX
0B10E6 FD09                A  4517    	ADD	IY,BC
0B10E8 FD0700              A  4518    	LD	BC,(IY)
0B10EB FD7E03              A  4519    	LD	A,(IY+%3)
0B10EE 2600                A  4520    	LD	H,%0
0B10F0 6F                  A  4521    	LD	L,A
0B10F1 E5                  A  4522    	PUSH	HL
0B10F2 C5                  A  4523    	PUSH	BC
0B10F3 CD B2 0B 0B         A  4524    	CALL	_getByte
0B10F7 C1                  A  4525    	POP	BC
0B10F8 C1                  A  4526    	POP	BC
0B10F9 DD77D7              A  4527    	LD	(IX+%FFFFFFD7),A
                           A  4528    ;  398				
                           A  4529    ;  399				bmp.greenBitField = *(uint3
                           A  4530    .LINE 399
                           A  4531    
0B10FC DD31FD              A  4532    	LD	IY,(IX+%FFFFFFFD)
0B10FF ED232C              A  4533    	LEA	HL,IY+%2C
0B1102 ED07                A  4534    	LD	BC,(HL)
0B1104 23                  A  4535    	INC	HL
0B1105 23                  A  4536    	INC	HL
0B1106 23                  A  4537    	INC	HL
0B1107 7E                  A  4538    	LD	A,(HL)
0B1108 FD21C7FB FF         A  4539    	LD	IY,-1081
0B110D DDE5D1              A  4540    	LD	DE,IX
0B1110 FD19                A  4541    	ADD	IY,DE
0B1112 FD0F00              A  4542    	LD	(IY),BC
0B1115 FD7703              A  4543    	LD	(IY+%3),A
                           A  4544    ;  400				bmp.green_pos = getByte(bmp
                           A  4545    .LINE 400
                           A  4546    
0B1118 FD21C7FB FF         A  4547    	LD	IY,-1081
0B111D DDE5C1              A  4548    	LD	BC,IX
0B1120 FD09                A  4549    	ADD	IY,BC
0B1122 FD0700              A  4550    	LD	BC,(IY)
0B1125 FD7E03              A  4551    	LD	A,(IY+%3)
0B1128 2600                A  4552    	LD	H,%0
0B112A 6F                  A  4553    	LD	L,A
0B112B E5                  A  4554    	PUSH	HL
0B112C C5                  A  4555    	PUSH	BC
0B112D CD B2 0B 0B         A  4556    	CALL	_getByte
0B1131 C1                  A  4557    	POP	BC
0B1132 C1                  A  4558    	POP	BC
0B1133 DD77D8              A  4559    	LD	(IX+%FFFFFFD8),A
                           A  4560    ;  401				
                           A  4561    ;  402				bmp.blueBitField = *(uint32
                           A  4562    .LINE 402
                           A  4563    
0B1136 DD31FD              A  4564    	LD	IY,(IX+%FFFFFFFD)
0B1139 ED2330              A  4565    	LEA	HL,IY+%30
0B113C ED07                A  4566    	LD	BC,(HL)
0B113E 23                  A  4567    	INC	HL
0B113F 23                  A  4568    	INC	HL
0B1140 23                  A  4569    	INC	HL
0B1141 7E                  A  4570    	LD	A,(HL)
0B1142 FD21CBFB FF         A  4571    	LD	IY,-1077
0B1147 DDE5D1              A  4572    	LD	DE,IX
0B114A FD19                A  4573    	ADD	IY,DE
0B114C FD0F00              A  4574    	LD	(IY),BC
0B114F FD7703              A  4575    	LD	(IY+%3),A
                           A  4576    ;  403				bmp.blue_pos = getByte(bmp.
                           A  4577    .LINE 403
                           A  4578    
0B1152 FD21CBFB FF         A  4579    	LD	IY,-1077
0B1157 DDE5C1              A  4580    	LD	BC,IX
0B115A FD09                A  4581    	ADD	IY,BC
0B115C FD0700              A  4582    	LD	BC,(IY)
0B115F FD7E03              A  4583    	LD	A,(IY+%3)
0B1162 2600                A  4584    	LD	H,%0
0B1164 6F                  A  4585    	LD	L,A
0B1165 E5                  A  4586    	PUSH	HL
0B1166 C5                  A  4587    	PUSH	BC
0B1167 CD B2 0B 0B         A  4588    	CALL	_getByte
0B116B C1                  A  4589    	POP	BC
0B116C C1                  A  4590    	POP	BC
0B116D DD77D9              A  4591    	LD	(IX+%FFFFFFD9),A
                           A  4592    ;  404				
                           A  4593    ;  405				bmp.alphaBitField = *(uint3
                           A  4594    .LINE 405
                           A  4595    
0B1170 DD31FD              A  4596    	LD	IY,(IX+%FFFFFFFD)
0B1173 ED2334              A  4597    	LEA	HL,IY+%34
0B1176 ED07                A  4598    	LD	BC,(HL)
0B1178 23                  A  4599    	INC	HL
0B1179 23                  A  4600    	INC	HL
0B117A 23                  A  4601    	INC	HL
0B117B 7E                  A  4602    	LD	A,(HL)
0B117C FD21CFFB FF         A  4603    	LD	IY,-1073
0B1181 DDE5D1              A  4604    	LD	DE,IX
0B1184 FD19                A  4605    	ADD	IY,DE
0B1186 FD0F00              A  4606    	LD	(IY),BC
0B1189 FD7703              A  4607    	LD	(IY+%3),A
                           A  4608    ;  406				bmp.alpha_pos = getByte(bmp
                           A  4609    .LINE 406
                           A  4610    
0B118C FD21CFFB FF         A  4611    	LD	IY,-1073
0B1191 DDE5C1              A  4612    	LD	BC,IX
0B1194 FD09                A  4613    	ADD	IY,BC
0B1196 FD0700              A  4614    	LD	BC,(IY)
0B1199 FD7E03              A  4615    	LD	A,(IY+%3)
0B119C 2600                A  4616    	LD	H,%0
0B119E 6F                  A  4617    	LD	L,A
0B119F E5                  A  4618    	PUSH	HL
0B11A0 C5                  A  4619    	PUSH	BC
0B11A1 CD B2 0B 0B         A  4620    	CALL	_getByte
0B11A5 C1                  A  4621    	POP	BC
0B11A6 C1                  A  4622    	POP	BC
0B11A7 DD77DA              A  4623    	LD	(IX+%FFFFFFDA),A
                           A  4624    ;  407				
                           A  4625    ;  408				printf("Red bitfield:   ");
                           A  4626    .LINE 408
                           A  4627    
0B11AA 01 28 39 0B         A  4628    	LD	BC,___print_uputch
0B11AE ED43 1B 43 0B       A  4629    	LD	(___print_xputch),BC
0B11B3 01 8F 43 0B         A  4630    	LD	BC,L__78
0B11B7 C5                  A  4631    	PUSH	BC
0B11B8 CD 70 37 0B         A  4632    	CALL	___print_sendstring
0B11BC C1                  A  4633    	POP	BC
0B11BD 01040000            A  4634    	LD	BC,4
0B11C1 C5                  A  4635    	PUSH	BC
0B11C2 DDE5E1              A  4636    	LD	HL,IX
0B11C5 01C3FBFF            A  4637    	LD	BC,-1085
0B11C9 09                  A  4638    	ADD	HL,BC
0B11CA E5C1                A  4639    	LD	BC,HL
0B11CC C5                  A  4640    	PUSH	BC
0B11CD CD 2B 0C 0B         A  4641    	CALL	_print_bin
0B11D1 C1                  A  4642    	POP	BC
0B11D2 C1                  A  4643    	POP	BC
0B11D3 01 28 39 0B         A  4644    	LD	BC,___print_uputch
0B11D7 ED43 1B 43 0B       A  4645    	LD	(___print_xputch),BC
0B11DC 01 A0 43 0B         A  4646    	LD	BC,L__79
0B11E0 C5                  A  4647    	PUSH	BC
0B11E1 CD 70 37 0B         A  4648    	CALL	___print_sendstring
0B11E5 C1                  A  4649    	POP	BC
0B11E6 3E75                A  4650    	LD	A,%75
0B11E8 32 B7 45 0B         A  4651    	LD	(___print_fmt+4),A
0B11EC DD7ED7              A  4652    	LD	A,(IX+%FFFFFFD7)
0B11EF 17ED62              A  4653    	SEXT	HL
0B11F2 DD6ED7              A  4654    	LD	L,(IX+%FFFFFFD7)
0B11F5 E5C1                A  4655    	LD	BC,HL
0B11F7 CD FF 3F 0B         A  4656    	CALL	__itol
0B11FB C5D1                A  4657    	LD	DE,BC
0B11FD 4F                  A  4658    	LD	C,A
0B11FE 0600                A  4659    	LD	B,%0
0B1200 C5                  A  4660    	PUSH	BC
0B1201 D5                  A  4661    	PUSH	DE
0B1202 CD AE 39 0B         A  4662    	CALL	__u_uitoa
0B1206 C1                  A  4663    	POP	BC
0B1207 C1                  A  4664    	POP	BC
0B1208 01 A8 43 0B         A  4665    	LD	BC,L__80
0B120C C5                  A  4666    	PUSH	BC
0B120D CD 70 37 0B         A  4667    	CALL	___print_sendstring
0B1211 C1                  A  4668    	POP	BC
                           A  4669    ;  409				printf("Green bitfield: ");
                           A  4670    .LINE 409
                           A  4671    
0B1212 01 28 39 0B         A  4672    	LD	BC,___print_uputch
0B1216 ED43 1B 43 0B       A  4673    	LD	(___print_xputch),BC
0B121B 01 B5 43 0B         A  4674    	LD	BC,L__81
0B121F C5                  A  4675    	PUSH	BC
0B1220 CD 70 37 0B         A  4676    	CALL	___print_sendstring
0B1224 C1                  A  4677    	POP	BC
0B1225 01040000            A  4678    	LD	BC,4
0B1229 C5                  A  4679    	PUSH	BC
0B122A DDE5E1              A  4680    	LD	HL,IX
0B122D 01C7FBFF            A  4681    	LD	BC,-1081
0B1231 09                  A  4682    	ADD	HL,BC
0B1232 E5C1                A  4683    	LD	BC,HL
0B1234 C5                  A  4684    	PUSH	BC
0B1235 CD 2B 0C 0B         A  4685    	CALL	_print_bin
0B1239 C1                  A  4686    	POP	BC
0B123A C1                  A  4687    	POP	BC
0B123B 01 28 39 0B         A  4688    	LD	BC,___print_uputch
0B123F ED43 1B 43 0B       A  4689    	LD	(___print_xputch),BC
0B1244 01 C6 43 0B         A  4690    	LD	BC,L__82
0B1248 C5                  A  4691    	PUSH	BC
0B1249 CD 70 37 0B         A  4692    	CALL	___print_sendstring
0B124D C1                  A  4693    	POP	BC
0B124E 3E75                A  4694    	LD	A,%75
0B1250 32 B7 45 0B         A  4695    	LD	(___print_fmt+4),A
0B1254 DD7ED8              A  4696    	LD	A,(IX+%FFFFFFD8)
0B1257 17ED62              A  4697    	SEXT	HL
0B125A DD6ED8              A  4698    	LD	L,(IX+%FFFFFFD8)
0B125D E5C1                A  4699    	LD	BC,HL
0B125F CD FF 3F 0B         A  4700    	CALL	__itol
0B1263 C5D1                A  4701    	LD	DE,BC
0B1265 4F                  A  4702    	LD	C,A
0B1266 0600                A  4703    	LD	B,%0
0B1268 C5                  A  4704    	PUSH	BC
0B1269 D5                  A  4705    	PUSH	DE
0B126A CD AE 39 0B         A  4706    	CALL	__u_uitoa
0B126E C1                  A  4707    	POP	BC
0B126F C1                  A  4708    	POP	BC
0B1270 01 CE 43 0B         A  4709    	LD	BC,L__83
0B1274 C5                  A  4710    	PUSH	BC
0B1275 CD 70 37 0B         A  4711    	CALL	___print_sendstring
0B1279 C1                  A  4712    	POP	BC
                           A  4713    ;  410				printf("Blue bitfield:  ");
                           A  4714    .LINE 410
                           A  4715    
0B127A 01 28 39 0B         A  4716    	LD	BC,___print_uputch
0B127E ED43 1B 43 0B       A  4717    	LD	(___print_xputch),BC
0B1283 01 DB 43 0B         A  4718    	LD	BC,L__84
0B1287 C5                  A  4719    	PUSH	BC
0B1288 CD 70 37 0B         A  4720    	CALL	___print_sendstring
0B128C C1                  A  4721    	POP	BC
0B128D 01040000            A  4722    	LD	BC,4
0B1291 C5                  A  4723    	PUSH	BC
0B1292 DDE5E1              A  4724    	LD	HL,IX
0B1295 01CBFBFF            A  4725    	LD	BC,-1077
0B1299 09                  A  4726    	ADD	HL,BC
0B129A E5C1                A  4727    	LD	BC,HL
0B129C C5                  A  4728    	PUSH	BC
0B129D CD 2B 0C 0B         A  4729    	CALL	_print_bin
0B12A1 C1                  A  4730    	POP	BC
0B12A2 C1                  A  4731    	POP	BC
0B12A3 01 28 39 0B         A  4732    	LD	BC,___print_uputch
0B12A7 ED43 1B 43 0B       A  4733    	LD	(___print_xputch),BC
0B12AC 01 EC 43 0B         A  4734    	LD	BC,L__85
0B12B0 C5                  A  4735    	PUSH	BC
0B12B1 CD 70 37 0B         A  4736    	CALL	___print_sendstring
0B12B5 C1                  A  4737    	POP	BC
0B12B6 3E75                A  4738    	LD	A,%75
0B12B8 32 B7 45 0B         A  4739    	LD	(___print_fmt+4),A
0B12BC DD7ED9              A  4740    	LD	A,(IX+%FFFFFFD9)
0B12BF 17ED62              A  4741    	SEXT	HL
0B12C2 DD6ED9              A  4742    	LD	L,(IX+%FFFFFFD9)
0B12C5 E5C1                A  4743    	LD	BC,HL
0B12C7 CD FF 3F 0B         A  4744    	CALL	__itol
0B12CB C5D1                A  4745    	LD	DE,BC
0B12CD 4F                  A  4746    	LD	C,A
0B12CE 0600                A  4747    	LD	B,%0
0B12D0 C5                  A  4748    	PUSH	BC
0B12D1 D5                  A  4749    	PUSH	DE
0B12D2 CD AE 39 0B         A  4750    	CALL	__u_uitoa
0B12D6 C1                  A  4751    	POP	BC
0B12D7 C1                  A  4752    	POP	BC
0B12D8 01 F4 43 0B         A  4753    	LD	BC,L__86
0B12DC C5                  A  4754    	PUSH	BC
0B12DD CD 70 37 0B         A  4755    	CALL	___print_sendstring
0B12E1 C1                  A  4756    	POP	BC
                           A  4757    ;  411	
                           A  4758    ;  412				if (bmp.alpha_pos == -1) pr
                           A  4759    .LINE 412
                           A  4760    
0B12E2 DD7EDA              A  4761    	LD	A,(IX+%FFFFFFDA)
0B12E5 FEFF                A  4762    	CP	A,%FFFFFFFF
0B12E7 20 17               A  4763    	JR	NZ,L_114
0B12E9 01 28 39 0B         A  4764    	LD	BC,___print_uputch
0B12ED ED43 1B 43 0B       A  4765    	LD	(___print_xputch),BC
0B12F2 01 01 44 0B         A  4766    	LD	BC,L__88
0B12F6 C5                  A  4767    	PUSH	BC
0B12F7 CD 70 37 0B         A  4768    	CALL	___print_sendstring
0B12FB C1                  A  4769    	POP	BC
                           A  4770    ;  413				else { printf("Alpha bitfie
                           A  4771    .LINE 413
                           A  4772    
0B12FC C3 EF 14 0B         A  4773    	JR	L_121
0B1300                     A  4774    L_114:
0B1300 01 28 39 0B         A  4775    	LD	BC,___print_uputch
0B1304 ED43 1B 43 0B       A  4776    	LD	(___print_xputch),BC
0B1309 01 14 44 0B         A  4777    	LD	BC,L__89
0B130D C5                  A  4778    	PUSH	BC
0B130E CD 70 37 0B         A  4779    	CALL	___print_sendstring
0B1312 C1                  A  4780    	POP	BC
0B1313 01040000            A  4781    	LD	BC,4
0B1317 C5                  A  4782    	PUSH	BC
0B1318 DDE5E1              A  4783    	LD	HL,IX
0B131B 01CFFBFF            A  4784    	LD	BC,-1073
0B131F 09                  A  4785    	ADD	HL,BC
0B1320 E5C1                A  4786    	LD	BC,HL
0B1322 C5                  A  4787    	PUSH	BC
0B1323 CD 2B 0C 0B         A  4788    	CALL	_print_bin
0B1327 C1                  A  4789    	POP	BC
0B1328 C1                  A  4790    	POP	BC
0B1329 01 28 39 0B         A  4791    	LD	BC,___print_uputch
0B132D ED43 1B 43 0B       A  4792    	LD	(___print_xputch),BC
0B1332 01 25 44 0B         A  4793    	LD	BC,L__90
0B1336 C5                  A  4794    	PUSH	BC
0B1337 CD 70 37 0B         A  4795    	CALL	___print_sendstring
0B133B C1                  A  4796    	POP	BC
0B133C 3E75                A  4797    	LD	A,%75
0B133E 32 B7 45 0B         A  4798    	LD	(___print_fmt+4),A
0B1342 DD7EDA              A  4799    	LD	A,(IX+%FFFFFFDA)
0B1345 17ED62              A  4800    	SEXT	HL
0B1348 DD6EDA              A  4801    	LD	L,(IX+%FFFFFFDA)
0B134B E5C1                A  4802    	LD	BC,HL
0B134D CD FF 3F 0B         A  4803    	CALL	__itol
0B1351 C5D1                A  4804    	LD	DE,BC
0B1353 4F                  A  4805    	LD	C,A
0B1354 0600                A  4806    	LD	B,%0
0B1356 C5                  A  4807    	PUSH	BC
0B1357 D5                  A  4808    	PUSH	DE
0B1358 CD AE 39 0B         A  4809    	CALL	__u_uitoa
0B135C C1                  A  4810    	POP	BC
0B135D C1                  A  4811    	POP	BC
0B135E 01 2D 44 0B         A  4812    	LD	BC,L__91
0B1362 C5                  A  4813    	PUSH	BC
0B1363 CD 70 37 0B         A  4814    	CALL	___print_sendstring
0B1367 C1                  A  4815    	POP	BC
                           A  4816    ;  414						
                           A  4817    ;  415			} else if (bmp.bmp_bitdepth == 
                           A  4818    .LINE 415
                           A  4819    
0B1368 C3 EF 14 0B         A  4820    	JR	L_121
0B136C                     A  4821    L_119:
0B136C 21B2FBFF            A  4822    	LD	HL,-1102
0B1370 09                  A  4823    	ADD	HL,BC
0B1371 7E                  A  4824    	LD	A,(HL)
0B1372 FE10                A  4825    	CP	A,%10
0B1374 C2 EF 14 0B         A  4826    	JR	NZ,L_121
                           A  4827    ;  416				
                           A  4828    ;  417				uint16_t redmask, greenmask
                           A  4829    ;  418				
                           A  4830    ;  419				bmp.redBitField = *(uint32_
                           A  4831    .LINE 419
                           A  4832    
0B1378 DD31FD              A  4833    	LD	IY,(IX+%FFFFFFFD)
0B137B ED2328              A  4834    	LEA	HL,IY+%28
0B137E ED07                A  4835    	LD	BC,(HL)
0B1380 23                  A  4836    	INC	HL
0B1381 23                  A  4837    	INC	HL
0B1382 23                  A  4838    	INC	HL
0B1383 7E                  A  4839    	LD	A,(HL)
0B1384 FD21C3FB FF         A  4840    	LD	IY,-1085
0B1389 DDE5D1              A  4841    	LD	DE,IX
0B138C FD19                A  4842    	ADD	IY,DE
0B138E FD0F00              A  4843    	LD	(IY),BC
0B1391 FD7703              A  4844    	LD	(IY+%3),A
                           A  4845    ;  420				redmask = (uint16_t)(bmp.re
                           A  4846    .LINE 420
                           A  4847    
0B1394 21C3FBFF            A  4848    	LD	HL,-1085
0B1398 DDE5C1              A  4849    	LD	BC,IX
0B139B 09                  A  4850    	ADD	HL,BC
0B139C ED27                A  4851    	LD	HL,(HL)
0B139E DD75FA              A  4852    	LD	(IX+%FFFFFFFA),L
0B13A1 DD74FB              A  4853    	LD	(IX+%FFFFFFFB),H
                           A  4854    ;  421				
                           A  4855    ;  422				bmp.greenBitField = *(uint3
                           A  4856    .LINE 422
                           A  4857    
0B13A4 DD31FD              A  4858    	LD	IY,(IX+%FFFFFFFD)
0B13A7 ED232C              A  4859    	LEA	HL,IY+%2C
0B13AA ED07                A  4860    	LD	BC,(HL)
0B13AC 23                  A  4861    	INC	HL
0B13AD 23                  A  4862    	INC	HL
0B13AE 23                  A  4863    	INC	HL
0B13AF 7E                  A  4864    	LD	A,(HL)
0B13B0 FD21C7FB FF         A  4865    	LD	IY,-1081
0B13B5 DDE5D1              A  4866    	LD	DE,IX
0B13B8 FD19                A  4867    	ADD	IY,DE
0B13BA FD0F00              A  4868    	LD	(IY),BC
0B13BD FD7703              A  4869    	LD	(IY+%3),A
                           A  4870    ;  423				greenmask = (uint16_t)(bmp.
                           A  4871    .LINE 423
                           A  4872    
0B13C0 21C7FBFF            A  4873    	LD	HL,-1081
0B13C4 DDE5C1              A  4874    	LD	BC,IX
0B13C7 09                  A  4875    	ADD	HL,BC
0B13C8 ED27                A  4876    	LD	HL,(HL)
0B13CA DD75F8              A  4877    	LD	(IX+%FFFFFFF8),L
0B13CD DD74F9              A  4878    	LD	(IX+%FFFFFFF9),H
                           A  4879    ;  424				
                           A  4880    ;  425				bmp.blueBitField = *(uint32
                           A  4881    .LINE 425
                           A  4882    
0B13D0 DD31FD              A  4883    	LD	IY,(IX+%FFFFFFFD)
0B13D3 ED2330              A  4884    	LEA	HL,IY+%30
0B13D6 ED07                A  4885    	LD	BC,(HL)
0B13D8 23                  A  4886    	INC	HL
0B13D9 23                  A  4887    	INC	HL
0B13DA 23                  A  4888    	INC	HL
0B13DB 7E                  A  4889    	LD	A,(HL)
0B13DC FD21CBFB FF         A  4890    	LD	IY,-1077
0B13E1 DDE5D1              A  4891    	LD	DE,IX
0B13E4 FD19                A  4892    	ADD	IY,DE
0B13E6 FD0F00              A  4893    	LD	(IY),BC
0B13E9 FD7703              A  4894    	LD	(IY+%3),A
                           A  4895    ;  426				bluemask = (uint16_t)(bmp.b
                           A  4896    .LINE 426
                           A  4897    
0B13EC 21CBFBFF            A  4898    	LD	HL,-1077
0B13F0 DDE5C1              A  4899    	LD	BC,IX
0B13F3 09                  A  4900    	ADD	HL,BC
0B13F4 ED27                A  4901    	LD	HL,(HL)
0B13F6 DD75F6              A  4902    	LD	(IX+%FFFFFFF6),L
0B13F9 DD74F7              A  4903    	LD	(IX+%FFFFFFF7),H
                           A  4904    ;  427				
                           A  4905    ;  428				bmp.alphaBitField = *(uint3
                           A  4906    .LINE 428
                           A  4907    
0B13FC DD31FD              A  4908    	LD	IY,(IX+%FFFFFFFD)
0B13FF ED2334              A  4909    	LEA	HL,IY+%34
0B1402 ED07                A  4910    	LD	BC,(HL)
0B1404 23                  A  4911    	INC	HL
0B1405 23                  A  4912    	INC	HL
0B1406 23                  A  4913    	INC	HL
0B1407 7E                  A  4914    	LD	A,(HL)
0B1408 FD21CFFB FF         A  4915    	LD	IY,-1073
0B140D DDE5D1              A  4916    	LD	DE,IX
0B1410 FD19                A  4917    	ADD	IY,DE
0B1412 FD0F00              A  4918    	LD	(IY),BC
0B1415 FD7703              A  4919    	LD	(IY+%3),A
                           A  4920    ;  429				alphamask = (uint16_t)(bmp.
                           A  4921    .LINE 429
                           A  4922    
0B1418 21CFFBFF            A  4923    	LD	HL,-1073
0B141C DDE5C1              A  4924    	LD	BC,IX
0B141F 09                  A  4925    	ADD	HL,BC
0B1420 ED27                A  4926    	LD	HL,(HL)
0B1422 DD75F4              A  4927    	LD	(IX+%FFFFFFF4),L
0B1425 DD74F5              A  4928    	LD	(IX+%FFFFFFF5),H
                           A  4929    ;  430				
                           A  4930    ;  431				printf("Red bitfield:   ");
                           A  4931    .LINE 431
                           A  4932    
0B1428 01 28 39 0B         A  4933    	LD	BC,___print_uputch
0B142C ED43 1B 43 0B       A  4934    	LD	(___print_xputch),BC
0B1431 01 3A 44 0B         A  4935    	LD	BC,L__93
0B1435 C5                  A  4936    	PUSH	BC
0B1436 CD 70 37 0B         A  4937    	CALL	___print_sendstring
0B143A C1                  A  4938    	POP	BC
0B143B 01020000            A  4939    	LD	BC,2
0B143F C5                  A  4940    	PUSH	BC
0B1440 ED65FA              A  4941    	PEA	IX+%FFFFFFFA
0B1443 CD 2B 0C 0B         A  4942    	CALL	_print_bin
0B1447 C1                  A  4943    	POP	BC
0B1448 C1                  A  4944    	POP	BC
                           A  4945    ;  432				printf("\r\nGreen bitfield:
                           A  4946    .LINE 432
                           A  4947    
0B1449 01 28 39 0B         A  4948    	LD	BC,___print_uputch
0B144D ED43 1B 43 0B       A  4949    	LD	(___print_xputch),BC
0B1452 01 4B 44 0B         A  4950    	LD	BC,L__94
0B1456 C5                  A  4951    	PUSH	BC
0B1457 CD 70 37 0B         A  4952    	CALL	___print_sendstring
0B145B C1                  A  4953    	POP	BC
0B145C 01020000            A  4954    	LD	BC,2
0B1460 C5                  A  4955    	PUSH	BC
0B1461 ED65F8              A  4956    	PEA	IX+%FFFFFFF8
0B1464 CD 2B 0C 0B         A  4957    	CALL	_print_bin
0B1468 C1                  A  4958    	POP	BC
0B1469 C1                  A  4959    	POP	BC
                           A  4960    ;  433				printf("\r\nBlue bitfield: 
                           A  4961    .LINE 433
                           A  4962    
0B146A 01 28 39 0B         A  4963    	LD	BC,___print_uputch
0B146E ED43 1B 43 0B       A  4964    	LD	(___print_xputch),BC
0B1473 01 5E 44 0B         A  4965    	LD	BC,L__95
0B1477 C5                  A  4966    	PUSH	BC
0B1478 CD 70 37 0B         A  4967    	CALL	___print_sendstring
0B147C C1                  A  4968    	POP	BC
0B147D 01020000            A  4969    	LD	BC,2
0B1481 C5                  A  4970    	PUSH	BC
0B1482 ED65F6              A  4971    	PEA	IX+%FFFFFFF6
0B1485 CD 2B 0C 0B         A  4972    	CALL	_print_bin
0B1489 C1                  A  4973    	POP	BC
0B148A C1                  A  4974    	POP	BC
                           A  4975    ;  434	
                           A  4976    ;  435				if (bmp.alphaBitField == 0)
                           A  4977    .LINE 435
                           A  4978    
0B148B FD21CFFB FF         A  4979    	LD	IY,-1073
0B1490 DDE5C1              A  4980    	LD	BC,IX
0B1493 FD09                A  4981    	ADD	IY,BC
0B1495 FD2700              A  4982    	LD	HL,(IY)
0B1498 FD5E03              A  4983    	LD	E,(IY+%3)
0B149B 01000000            A  4984    	LD	BC,0
0B149F AF                  A  4985    	XOR	A,A
0B14A0 CD 49 40 0B         A  4986    	CALL	__lcmpu
0B14A4 20 15               A  4987    	JR	NZ,L_116
0B14A6 01 28 39 0B         A  4988    	LD	BC,___print_uputch
0B14AA ED43 1B 43 0B       A  4989    	LD	(___print_xputch),BC
0B14AF 01 71 44 0B         A  4990    	LD	BC,L__97
0B14B3 C5                  A  4991    	PUSH	BC
0B14B4 CD 70 37 0B         A  4992    	CALL	___print_sendstring
0B14B8 C1                  A  4993    	POP	BC
                           A  4994    ;  436				else { printf("\r\nAlpha bi
                           A  4995    .LINE 436
                           A  4996    
0B14B9 18 34               A  4997    	JR	L_121
0B14BB                     A  4998    L_116:
0B14BB 01 28 39 0B         A  4999    	LD	BC,___print_uputch
0B14BF ED43 1B 43 0B       A  5000    	LD	(___print_xputch),BC
0B14C4 01 86 44 0B         A  5001    	LD	BC,L__98
0B14C8 C5                  A  5002    	PUSH	BC
0B14C9 CD 70 37 0B         A  5003    	CALL	___print_sendstring
0B14CD C1                  A  5004    	POP	BC
0B14CE 01020000            A  5005    	LD	BC,2
0B14D2 C5                  A  5006    	PUSH	BC
0B14D3 ED65F4              A  5007    	PEA	IX+%FFFFFFF4
0B14D6 CD 2B 0C 0B         A  5008    	CALL	_print_bin
0B14DA C1                  A  5009    	POP	BC
0B14DB C1                  A  5010    	POP	BC
0B14DC 01 28 39 0B         A  5011    	LD	BC,___print_uputch
0B14E0 ED43 1B 43 0B       A  5012    	LD	(___print_xputch),BC
0B14E5 01 99 44 0B         A  5013    	LD	BC,L__99
0B14E9 C5                  A  5014    	PUSH	BC
0B14EA CD 70 37 0B         A  5015    	CALL	___print_sendstring
0B14EE C1                  A  5016    	POP	BC
                           A  5017    ;  437				
                           A  5018    ;  438			}
                           A  5019    ;  439			
                           A  5020    ;  440			
                           A  5021    ;  441		}
0B14EF                     A  5022    L_121:
                           A  5023    .LINE 441
                           A  5024    
                           A  5025    ;  442		
                           A  5026    ;  443		mos_fclose(file);
                           A  5027    .LINE 443
                           A  5028    
0B14EF DD4EFC              A  5029    	LD	C,(IX+%FFFFFFFC)
0B14F2 0600                A  5030    	LD	B,%0
0B14F4 C5                  A  5031    	PUSH	BC
0B14F5 CD AD 33 0B         A  5032    	CALL	_mos_fclose
0B14F9 C1                  A  5033    	POP	BC
                           A  5034    ;  444		return bmp;
                           A  5035    .LINE 444
                           A  5036    
0B14FA ED2206              A  5037    	LEA	HL,IX+%6
0B14FD ED17                A  5038    	LD	DE,(HL)
0B14FF DDE5E1              A  5039    	LD	HL,IX
0B1502 01AEFBFF            A  5040    	LD	BC,-1106
0B1506 09                  A  5041    	ADD	HL,BC
0B1507 01310400            A  5042    	LD	BC,1073
0B150B EDB0                A  5043    	LDIR	
0B150D DD2706              A  5044    	LD	HL,(IX+%6)
                           A  5045    ;  445	
                           A  5046    ;  446	}
0B1510                     A  5047    L_122:
                           A  5048    .LINE 446
                           A  5049    
0B1510 DDF9                A  5050    	LD	SP,IX
0B1512 DDE1                A  5051    	POP	IX
0B1514 C9                  A  5052    	RET	
                           A  5053    
                           A  5054    
                           A  5055    ;**************************** _get_info *******
                           A  5056    ;Name                         Addr/Register   S
                           A  5057    ;_mos_fclose                         IMPORT  --
                           A  5058    ;__u_uitoa                           IMPORT  --
                           A  5059    ;___print_fmt                        IMPORT    
                           A  5060    ;_mos_flseek                         IMPORT  --
                           A  5061    ;_malloc                             IMPORT  --
                           A  5062    ;_mos_fread                          IMPORT  --
                           A  5063    ;___print_sendstring                 IMPORT  --
                           A  5064    ;___print_xputch                     IMPORT    
                           A  5065    ;___print_uputch                     IMPORT  --
                           A  5066    ;_mos_getfil                         IMPORT  --
                           A  5067    ;_mos_fopen                          IMPORT  --
                           A  5068    ;_memset                             IMPORT  --
                           A  5069    ;bmp                                IX-1106   1
                           A  5070    ;initial_header                       IX-33    
                           A  5071    ;fo                                   IX-15    
                           A  5072    ;alphamask                            IX-12    
                           A  5073    ;bluemask                             IX-10    
                           A  5074    ;greenmask                             IX-8    
                           A  5075    ;redmask                               IX-6    
                           A  5076    ;file                                  IX-4    
                           A  5077    ;main_header                           IX-3    
                           A  5078    ;filename                              IX+9    
                           A  5079    
                           A  5080    
                           A  5081    ; Stack Frame Size: 1118 (bytes)
                           A  5082    ;       Spill Code: -3 (instruction)
                           A  5083    
                           A  5084    
                           A  5085    .ENDFUNC "get_info",446,"_get_info"
                           A  5086    	SEGMENT STRSECT
0B4336                     A  5087    L__63:
0B4336 4572726F 723A2063   A  5088    	DB	"Error: could not open "
0B433E 6F756C64 206E6F74 
0B4346 206F7065 6E20 
0B434C 00                  A  5089    	DB	0
0B434D                     A  5090    L__64:
0B434D 2E                  A  5091    	DB	"."
0B434E 0D0A00              A  5092    	DB	13,10,0
0B4351                     A  5093    L__68:
0B4351 44656275 673A2042   A  5094    	DB	"Debug: BMP is "
0B4359 4D502069 7320 
0B435F 00                  A  5095    	DB	0
0B4360                     A  5096    L__69:
0B4360 207820              A  5097    	DB	" x "
0B4363 00                  A  5098    	DB	0
0B4364                     A  5099    L__70:
0B4364 207820              A  5100    	DB	" x "
0B4367 00                  A  5101    	DB	0
0B4368                     A  5102    L__71:
0B4368 2C20636F 6D707265   A  5103    	DB	", compression type "
0B4370 7373696F 6E207479 
0B4378 706520 
0B437B 00                  A  5104    	DB	0
0B437C                     A  5105    L__72:
0B437C 2C20616E 64204449   A  5106    	DB	", and DIB size "
0B4384 42207369 7A6520 
0B438B 00                  A  5107    	DB	0
0B438C                     A  5108    L__73:
0B438C 0D0A00              A  5109    	DB	13,10,0
0B438F                     A  5110    L__78:
0B438F 52656420 62697466   A  5111    	DB	"Red bitfield:   "
0B4397 69656C64 3A202020 
0B439F 00                  A  5112    	DB	0
0B43A0                     A  5113    L__79:
0B43A0 20286279 746520     A  5114    	DB	" (byte "
0B43A7 00                  A  5115    	DB	0
0B43A8                     A  5116    L__80:
0B43A8 20696E20 70697865   A  5117    	DB	" in pixel)"
0B43B0 6C29 
0B43B2 0D0A00              A  5118    	DB	13,10,0
0B43B5                     A  5119    L__81:
0B43B5 47726565 6E206269   A  5120    	DB	"Green bitfield: "
0B43BD 74666965 6C643A20 
0B43C5 00                  A  5121    	DB	0
0B43C6                     A  5122    L__82:
0B43C6 20286279 746520     A  5123    	DB	" (byte "
0B43CD 00                  A  5124    	DB	0
0B43CE                     A  5125    L__83:
0B43CE 20696E20 70697865   A  5126    	DB	" in pixel)"
0B43D6 6C29 
0B43D8 0D0A00              A  5127    	DB	13,10,0
0B43DB                     A  5128    L__84:
0B43DB 426C7565 20626974   A  5129    	DB	"Blue bitfield:  "
0B43E3 6669656C 643A2020 
0B43EB 00                  A  5130    	DB	0
0B43EC                     A  5131    L__85:
0B43EC 20286279 746520     A  5132    	DB	" (byte "
0B43F3 00                  A  5133    	DB	0
0B43F4                     A  5134    L__86:
0B43F4 20696E20 70697865   A  5135    	DB	" in pixel)"
0B43FC 6C29 
0B43FE 0D0A00              A  5136    	DB	13,10,0
0B4401                     A  5137    L__88:
0B4401 4E6F2061 6C706861   A  5138    	DB	"No alpha channel"
0B4409 20636861 6E6E656C 
0B4411 0D0A00              A  5139    	DB	13,10,0
0B4414                     A  5140    L__89:
0B4414 416C7068 61206269   A  5141    	DB	"Alpha bitfield: "
0B441C 74666965 6C643A20 
0B4424 00                  A  5142    	DB	0
0B4425                     A  5143    L__90:
0B4425 20286279 746520     A  5144    	DB	" (byte "
0B442C 00                  A  5145    	DB	0
0B442D                     A  5146    L__91:
0B442D 20696E20 70697865   A  5147    	DB	" in pixel)"
0B4435 6C29 
0B4437 0D0A00              A  5148    	DB	13,10,0
0B443A                     A  5149    L__93:
0B443A 52656420 62697466   A  5150    	DB	"Red bitfield:   "
0B4442 69656C64 3A202020 
0B444A 00                  A  5151    	DB	0
0B444B                     A  5152    L__94:
0B444B 0D0A                A  5153    	DB	13,10
0B444D 47726565 6E206269   A  5154    	DB	"Green bitfield: "
0B4455 74666965 6C643A20 
0B445D 00                  A  5155    	DB	0
0B445E                     A  5156    L__95:
0B445E 0D0A                A  5157    	DB	13,10
0B4460 426C7565 20626974   A  5158    	DB	"Blue bitfield:  "
0B4468 6669656C 643A2020 
0B4470 00                  A  5159    	DB	0
0B4471                     A  5160    L__97:
0B4471 0D0A                A  5161    	DB	13,10
0B4473 4E6F2061 6C706861   A  5162    	DB	"No alpha channel"
0B447B 20636861 6E6E656C 
0B4483 0D0A00              A  5163    	DB	13,10,0
0B4486                     A  5164    L__98:
0B4486 0D0A                A  5165    	DB	13,10
0B4488 416C7068 61206269   A  5166    	DB	"Alpha bitfield: "
0B4490 74666965 6C643A20 
0B4498 00                  A  5167    	DB	0
0B4499                     A  5168    L__99:
0B4499 0D0A00              A  5169    	DB	13,10,0
                           A  5170    	SEGMENT CODE
                           A  5171    ;  447	
                           A  5172    ;  448	bmp_info load_bmp_clean(const char * fi
0B1515                     A  5173    _load_bmp_clean:
                           A  5174    .DEFINE "_load_bmp_clean"
                           A  5175    
                           A  5176    .VALUE _load_bmp_clean
                           A  5177    
                           A  5178    .CLASS 2
                           A  5179    
                           A  5180    .TAG "NONAME6"
                           A  5181    
                           A  5182    .TYPE 72
                           A  5183    
                           A  5184    .ENDEF
                           A  5185    
                           A  5186    .BEGFUNC "load_bmp_clean",448,"_load_bmp_clean"
                           A  5187    
                           A  5188    .LINE 448
                           A  5189    
                           A  5190    .DEFINE "filename"
                           A  5191    
                           A  5192    .CLASS 65
                           A  5193    
                           A  5194    .VALUE 9
                           A  5195    
                           A  5196    .TYPE 194
                           A  5197    
                           A  5198    .ENDEF
                           A  5199    
                           A  5200    .DEFINE "slot"
                           A  5201    
                           A  5202    .CLASS 65
                           A  5203    
                           A  5204    .VALUE 12
                           A  5205    
                           A  5206    .TYPE 12
                           A  5207    
                           A  5208    .ENDEF
                           A  5209    
                           A  5210    .DEFINE "file"
                           A  5211    
                           A  5212    .CLASS 65
                           A  5213    
                           A  5214    .VALUE -1
                           A  5215    
                           A  5216    .TYPE 12
                           A  5217    
                           A  5218    .ENDEF
                           A  5219    
                           A  5220    .DEFINE "main_header"
                           A  5221    
                           A  5222    .CLASS 65
                           A  5223    
                           A  5224    .VALUE -4
                           A  5225    
                           A  5226    .TYPE 34
                           A  5227    
                           A  5228    .ENDEF
                           A  5229    
                           A  5230    .DEFINE "y"
                           A  5231    
                           A  5232    .CLASS 65
                           A  5233    
                           A  5234    .VALUE -6
                           A  5235    
                           A  5236    .TYPE 3
                           A  5237    
                           A  5238    .ENDEF
                           A  5239    
                           A  5240    .DEFINE "row_rgba2222"
                           A  5241    
                           A  5242    .CLASS 65
                           A  5243    
                           A  5244    .VALUE -9
                           A  5245    
                           A  5246    .TYPE 34
                           A  5247    
                           A  5248    .ENDEF
                           A  5249    
                           A  5250    .DEFINE "x"
                           A  5251    
                           A  5252    .CLASS 65
                           A  5253    
                           A  5254    .VALUE -11
                           A  5255    
                           A  5256    .TYPE 3
                           A  5257    
                           A  5258    .ENDEF
                           A  5259    
                           A  5260    .DEFINE "y"
                           A  5261    
                           A  5262    .CLASS 65
                           A  5263    
                           A  5264    .VALUE -13
                           A  5265    
                           A  5266    .TYPE 3
                           A  5267    
                           A  5268    .ENDEF
                           A  5269    
                           A  5270    .DEFINE "fo"
                           A  5271    
                           A  5272    .CLASS 65
                           A  5273    
                           A  5274    .VALUE -16
                           A  5275    
                           A  5276    .TAG "NONAME5"
                           A  5277    
                           A  5278    .TYPE 40
                           A  5279    
                           A  5280    .ENDEF
                           A  5281    
                           A  5282    .DEFINE "src"
                           A  5283    
                           A  5284    .CLASS 65
                           A  5285    
                           A  5286    .VALUE -19
                           A  5287    
                           A  5288    .TYPE 34
                           A  5289    
                           A  5290    .ENDEF
                           A  5291    
                           A  5292    .DEFINE "index"
                           A  5293    
                           A  5294    .CLASS 65
                           A  5295    
                           A  5296    .VALUE -20
                           A  5297    
                           A  5298    .TYPE 12
                           A  5299    
                           A  5300    .ENDEF
                           A  5301    
                           A  5302    .DEFINE "b"
                           A  5303    
                           A  5304    .CLASS 65
                           A  5305    
                           A  5306    .VALUE -21
                           A  5307    
                           A  5308    .TYPE 12
                           A  5309    
                           A  5310    .ENDEF
                           A  5311    
                           A  5312    .DEFINE "g"
                           A  5313    
                           A  5314    .CLASS 65
                           A  5315    
                           A  5316    .VALUE -22
                           A  5317    
                           A  5318    .TYPE 12
                           A  5319    
                           A  5320    .ENDEF
                           A  5321    
                           A  5322    .DEFINE "r"
                           A  5323    
                           A  5324    .CLASS 65
                           A  5325    
                           A  5326    .VALUE -23
                           A  5327    
                           A  5328    .TYPE 12
                           A  5329    
                           A  5330    .ENDEF
                           A  5331    
                           A  5332    .DEFINE "src"
                           A  5333    
                           A  5334    .CLASS 65
                           A  5335    
                           A  5336    .VALUE -26
                           A  5337    
                           A  5338    .TYPE 34
                           A  5339    
                           A  5340    .ENDEF
                           A  5341    
                           A  5342    .DEFINE "initial_header"
                           A  5343    
                           A  5344    .CLASS 65
                           A  5345    
                           A  5346    .VALUE -44
                           A  5347    
                           A  5348    .DIM 18
                           A  5349    
                           A  5350    .TYPE 98
                           A  5351    
                           A  5352    .ENDEF
                           A  5353    
                           A  5354    .DEFINE "bmp"
                           A  5355    
                           A  5356    .CLASS 65
                           A  5357    
                           A  5358    .VALUE -1117
                           A  5359    
                           A  5360    .TAG "NONAME6"
                           A  5361    
                           A  5362    .TYPE 8
                           A  5363    
                           A  5364    .ENDEF
                           A  5365    
0B1515 DDE5                A  5366    	PUSH	IX
0B1517 DD210000 00         A  5367    	LD	IX,0
0B151C DD39                A  5368    	ADD	IX,SP
0B151E 2191FBFF            A  5369    	LD	HL,-1135
0B1522 39                  A  5370    	ADD	HL,SP
0B1523 F9                  A  5371    	LD	SP,HL
                           A  5372    ;  449		
                           A  5373    ;  450		uint8_t file;
                           A  5374    ;  451		FIL * fo;
                           A  5375    ;  452		bmp_info bmp;
                           A  5376    ;  453		char initial_header[18];
                           A  5377    ;  454		char *main_header;
                           A  5378    ;  455		char * row_rgba2222;
                           A  5379    ;  456		int16_t y = 0;
                           A  5380    ;  457		
                           A  5381    ;  458		memset(&bmp, 0, sizeof(bmp));	
                           A  5382    .LINE 458
                           A  5383    
0B1524 01310400            A  5384    	LD	BC,1073
0B1528 C5                  A  5385    	PUSH	BC
0B1529 01000000            A  5386    	LD	BC,0
0B152D C5                  A  5387    	PUSH	BC
0B152E DDE5E1              A  5388    	LD	HL,IX
0B1531 01A3FBFF            A  5389    	LD	BC,-1117
0B1535 09                  A  5390    	ADD	HL,BC
0B1536 E5C1                A  5391    	LD	BC,HL
0B1538 C5                  A  5392    	PUSH	BC
0B1539 CD 8F 40 0B         A  5393    	CALL	_memset
0B153D C1                  A  5394    	POP	BC
0B153E C1                  A  5395    	POP	BC
0B153F C1                  A  5396    	POP	BC
                           A  5397    ;  459		
                           A  5398    ;  460		file = mos_fopen(filename, fa_read)
                           A  5399    .LINE 460
                           A  5400    
0B1540 01010000            A  5401    	LD	BC,1
0B1544 C5                  A  5402    	PUSH	BC
0B1545 DD0709              A  5403    	LD	BC,(IX+%9)
0B1548 C5                  A  5404    	PUSH	BC
0B1549 CD 95 33 0B         A  5405    	CALL	_mos_fopen
0B154D C1                  A  5406    	POP	BC
0B154E C1                  A  5407    	POP	BC
0B154F DD77FF              A  5408    	LD	(IX+%FFFFFFFF),A
                           A  5409    ;  461		fo = (FIL * ) mos_getfil(file);
                           A  5410    .LINE 461
                           A  5411    
0B1552 DD4EFF              A  5412    	LD	C,(IX+%FFFFFFFF)
0B1555 0600                A  5413    	LD	B,%0
0B1557 C5                  A  5414    	PUSH	BC
0B1558 CD 1B 35 0B         A  5415    	CALL	_mos_getfil
0B155C C1                  A  5416    	POP	BC
0B155D DD2FF0              A  5417    	LD	(IX+%FFFFFFF0),HL
                           A  5418    ;  462		
                           A  5419    ;  463	    if (!file) {
                           A  5420    .LINE 463
                           A  5421    
0B1560 DD7EFF              A  5422    	LD	A,(IX+%FFFFFFFF)
0B1563 B7                  A  5423    	OR	A,A
0B1564 20 40               A  5424    	JR	NZ,L_124
                           A  5425    ;  464	        printf("Error: could not open %
                           A  5426    .LINE 464
                           A  5427    
0B1566 01 28 39 0B         A  5428    	LD	BC,___print_uputch
0B156A ED43 1B 43 0B       A  5429    	LD	(___print_xputch),BC
0B156F 01 9C 44 0B         A  5430    	LD	BC,L__102
0B1573 C5                  A  5431    	PUSH	BC
0B1574 CD 70 37 0B         A  5432    	CALL	___print_sendstring
0B1578 C1                  A  5433    	POP	BC
0B1579 DD0709              A  5434    	LD	BC,(IX+%9)
0B157C C5                  A  5435    	PUSH	BC
0B157D CD 70 37 0B         A  5436    	CALL	___print_sendstring
0B1581 C1                  A  5437    	POP	BC
0B1582 01 B3 44 0B         A  5438    	LD	BC,L__103
0B1586 C5                  A  5439    	PUSH	BC
0B1587 CD 70 37 0B         A  5440    	CALL	___print_sendstring
0B158B C1                  A  5441    	POP	BC
                           A  5442    ;  465	        return bmp;
                           A  5443    .LINE 465
                           A  5444    
0B158C ED2206              A  5445    	LEA	HL,IX+%6
0B158F ED17                A  5446    	LD	DE,(HL)
0B1591 DDE5E1              A  5447    	LD	HL,IX
0B1594 01A3FBFF            A  5448    	LD	BC,-1117
0B1598 09                  A  5449    	ADD	HL,BC
0B1599 01310400            A  5450    	LD	BC,1073
0B159D EDB0                A  5451    	LDIR	
0B159F DD2706              A  5452    	LD	HL,(IX+%6)
0B15A2 C3 92 1F 0B         A  5453    	JR	L_166
                           A  5454    ;  466	    }
0B15A6                     A  5455    L_124:
                           A  5456    .LINE 466
                           A  5457    
                           A  5458    ;  467	
                           A  5459    ;  468		mos_fread(file, initial_header, 14 
                           A  5460    .LINE 468
                           A  5461    
0B15A6 01120000            A  5462    	LD	BC,18
0B15AA C5                  A  5463    	PUSH	BC
0B15AB ED65D4              A  5464    	PEA	IX+%FFFFFFD4
0B15AE DD4EFF              A  5465    	LD	C,(IX+%FFFFFFFF)
0B15B1 0600                A  5466    	LD	B,%0
0B15B3 C5                  A  5467    	PUSH	BC
0B15B4 CD C2 34 0B         A  5468    	CALL	_mos_fread
0B15B8 C1                  A  5469    	POP	BC
0B15B9 C1                  A  5470    	POP	BC
0B15BA C1                  A  5471    	POP	BC
                           A  5472    ;  469		
                           A  5473    ;  470		bmp.pixels_offset = * (uint32_t * )
                           A  5474    .LINE 470
                           A  5475    
0B15BB ED22DE              A  5476    	LEA	HL,IX+%FFFFFFDE
0B15BE ED07                A  5477    	LD	BC,(HL)
0B15C0 23                  A  5478    	INC	HL
0B15C1 23                  A  5479    	INC	HL
0B15C2 23                  A  5480    	INC	HL
0B15C3 7E                  A  5481    	LD	A,(HL)
0B15C4 FD21A8FB FF         A  5482    	LD	IY,-1112
0B15C9 DDE5D1              A  5483    	LD	DE,IX
0B15CC FD19                A  5484    	ADD	IY,DE
0B15CE FD0F00              A  5485    	LD	(IY),BC
0B15D1 FD7703              A  5486    	LD	(IY+%3),A
                           A  5487    ;  471	    bmp.main_header_size = * (uint32_t 
                           A  5488    .LINE 471
                           A  5489    
0B15D4 ED22E2              A  5490    	LEA	HL,IX+%FFFFFFE2
0B15D7 ED07                A  5491    	LD	BC,(HL)
0B15D9 23                  A  5492    	INC	HL
0B15DA 23                  A  5493    	INC	HL
0B15DB 23                  A  5494    	INC	HL
0B15DC 7E                  A  5495    	LD	A,(HL)
0B15DD FD21B0FB FF         A  5496    	LD	IY,-1104
0B15E2 DDE5D1              A  5497    	LD	DE,IX
0B15E5 FD19                A  5498    	ADD	IY,DE
0B15E7 FD0F00              A  5499    	LD	(IY),BC
0B15EA FD7703              A  5500    	LD	(IY+%3),A
                           A  5501    ;  472		
                           A  5502    ;  473		main_header = malloc(bmp.main_heade
                           A  5503    .LINE 473
                           A  5504    
0B15ED 21B0FBFF            A  5505    	LD	HL,-1104
0B15F1 DDE5C1              A  5506    	LD	BC,IX
0B15F4 09                  A  5507    	ADD	HL,BC
0B15F5 ED07                A  5508    	LD	BC,(HL)
0B15F7 C5                  A  5509    	PUSH	BC
0B15F8 CD 4B 36 0B         A  5510    	CALL	_malloc
0B15FC C1                  A  5511    	POP	BC
0B15FD DD2FFC              A  5512    	LD	(IX+%FFFFFFFC),HL
                           A  5513    ;  474		
                           A  5514    ;  475		mos_flseek(file, 14);
                           A  5515    .LINE 475
                           A  5516    
0B1600 01000000            A  5517    	LD	BC,0
0B1604 C5                  A  5518    	PUSH	BC
0B1605 010E0000            A  5519    	LD	BC,14
0B1609 C5                  A  5520    	PUSH	BC
0B160A DD4EFF              A  5521    	LD	C,(IX+%FFFFFFFF)
0B160D 0600                A  5522    	LD	B,%0
0B160F C5                  A  5523    	PUSH	BC
0B1610 CD FC 34 0B         A  5524    	CALL	_mos_flseek
0B1614 C1                  A  5525    	POP	BC
0B1615 C1                  A  5526    	POP	BC
0B1616 C1                  A  5527    	POP	BC
                           A  5528    ;  476		mos_fread(file, main_header, bmp.ma
                           A  5529    .LINE 476
                           A  5530    
0B1617 21B0FBFF            A  5531    	LD	HL,-1104
0B161B DDE5C1              A  5532    	LD	BC,IX
0B161E 09                  A  5533    	ADD	HL,BC
0B161F ED07                A  5534    	LD	BC,(HL)
0B1621 C5                  A  5535    	PUSH	BC
0B1622 DD07FC              A  5536    	LD	BC,(IX+%FFFFFFFC)
0B1625 C5                  A  5537    	PUSH	BC
0B1626 DD4EFF              A  5538    	LD	C,(IX+%FFFFFFFF)
0B1629 0600                A  5539    	LD	B,%0
0B162B C5                  A  5540    	PUSH	BC
0B162C CD C2 34 0B         A  5541    	CALL	_mos_fread
0B1630 C1                  A  5542    	POP	BC
0B1631 C1                  A  5543    	POP	BC
0B1632 C1                  A  5544    	POP	BC
                           A  5545    ;  477		
                           A  5546    ;  478		bmp.bmp_width = *(int32_t *) & main
                           A  5547    .LINE 478
                           A  5548    
0B1633 DD31FC              A  5549    	LD	IY,(IX+%FFFFFFFC)
0B1636 ED2304              A  5550    	LEA	HL,IY+%4
0B1639 ED07                A  5551    	LD	BC,(HL)
0B163B 21A3FBFF            A  5552    	LD	HL,-1117
0B163F DDE5D1              A  5553    	LD	DE,IX
0B1642 19                  A  5554    	ADD	HL,DE
0B1643 71                  A  5555    	LD	(HL),C
0B1644 23                  A  5556    	INC	HL
0B1645 70                  A  5557    	LD	(HL),B
                           A  5558    ;  479		bmp.bmp_height = *(int32_t *) & mai
                           A  5559    .LINE 479
                           A  5560    
0B1646 ED2308              A  5561    	LEA	HL,IY+%8
0B1649 ED07                A  5562    	LD	BC,(HL)
0B164B 21A5FBFF            A  5563    	LD	HL,-1115
0B164F DDE5D1              A  5564    	LD	DE,IX
0B1652 19                  A  5565    	ADD	HL,DE
0B1653 71                  A  5566    	LD	(HL),C
0B1654 23                  A  5567    	INC	HL
0B1655 70                  A  5568    	LD	(HL),B
                           A  5569    ;  480		bmp.bmp_bitdepth = *(uint16_t *) & 
                           A  5570    .LINE 480
                           A  5571    
0B1656 ED230E              A  5572    	LEA	HL,IY+%E
0B1659 7E                  A  5573    	LD	A,(HL)
0B165A 21A7FBFF            A  5574    	LD	HL,-1113
0B165E DDE5C1              A  5575    	LD	BC,IX
0B1661 09                  A  5576    	ADD	HL,BC
0B1662 77                  A  5577    	LD	(HL),A
                           A  5578    ;  481		bmp.compression = *(uint32_t *) & m
                           A  5579    .LINE 481
                           A  5580    
0B1663 ED2310              A  5581    	LEA	HL,IY+%10
0B1666 ED07                A  5582    	LD	BC,(HL)
0B1668 23                  A  5583    	INC	HL
0B1669 23                  A  5584    	INC	HL
0B166A 23                  A  5585    	INC	HL
0B166B 7E                  A  5586    	LD	A,(HL)
0B166C FD21B4FB FF         A  5587    	LD	IY,-1100
0B1671 DDE5D1              A  5588    	LD	DE,IX
0B1674 FD19                A  5589    	ADD	IY,DE
0B1676 FD0F00              A  5590    	LD	(IY),BC
0B1679 FD7703              A  5591    	LD	(IY+%3),A
                           A  5592    ;  482		bmp.color_table_size = * (uint32_t 
                           A  5593    .LINE 482
                           A  5594    
0B167C DD31FC              A  5595    	LD	IY,(IX+%FFFFFFFC)
0B167F ED2320              A  5596    	LEA	HL,IY+%20
0B1682 ED07                A  5597    	LD	BC,(HL)
0B1684 23                  A  5598    	INC	HL
0B1685 23                  A  5599    	INC	HL
0B1686 23                  A  5600    	INC	HL
0B1687 7E                  A  5601    	LD	A,(HL)
0B1688 FD21C8FB FF         A  5602    	LD	IY,-1080
0B168D DDE5D1              A  5603    	LD	DE,IX
0B1690 FD19                A  5604    	ADD	IY,DE
0B1692 FD0F00              A  5605    	LD	(IY),BC
0B1695 FD7703              A  5606    	LD	(IY+%3),A
                           A  5607    ;  483	
                           A  5608    ;  484	    if (bmp.color_table_size == 0 && bm
                           A  5609    .LINE 484
                           A  5610    
0B1698 FD21C8FB FF         A  5611    	LD	IY,-1080
0B169D DDE5C1              A  5612    	LD	BC,IX
0B16A0 FD09                A  5613    	ADD	IY,BC
0B16A2 FD2700              A  5614    	LD	HL,(IY)
0B16A5 FD5E03              A  5615    	LD	E,(IY+%3)
0B16A8 01000000            A  5616    	LD	BC,0
0B16AC AF                  A  5617    	XOR	A,A
0B16AD CD 49 40 0B         A  5618    	CALL	__lcmpu
0B16B1 20 22               A  5619    	JR	NZ,L_128
0B16B3 21A7FBFF            A  5620    	LD	HL,-1113
0B16B7 DDE5C1              A  5621    	LD	BC,IX
0B16BA 09                  A  5622    	ADD	HL,BC
0B16BB 7E                  A  5623    	LD	A,(HL)
0B16BC FE08                A  5624    	CP	A,%8
0B16BE 20 15               A  5625    	JR	NZ,L_128
                           A  5626    ;  485	        bmp.color_table_size = 256;
                           A  5627    .LINE 485
                           A  5628    
0B16C0 01000100            A  5629    	LD	BC,256
0B16C4 FD21C8FB FF         A  5630    	LD	IY,-1080
0B16C9 DDE5D1              A  5631    	LD	DE,IX
0B16CC FD19                A  5632    	ADD	IY,DE
0B16CE FD0F00              A  5633    	LD	(IY),BC
0B16D1 FD360300            A  5634    	LD	(IY+%3),%0
                           A  5635    ;  486	    }
0B16D5                     A  5636    L_128:
                           A  5637    .LINE 486
                           A  5638    
                           A  5639    ;  487	
                           A  5640    ;  488		if (bmp.color_table_size > 0) mos_f
                           A  5641    .LINE 488
                           A  5642    
0B16D5 FD21C8FB FF         A  5643    	LD	IY,-1080
0B16DA DDE5C1              A  5644    	LD	BC,IX
0B16DD FD09                A  5645    	ADD	IY,BC
0B16DF FD0700              A  5646    	LD	BC,(IY)
0B16E2 FD7E03              A  5647    	LD	A,(IY+%3)
0B16E5 B7                  A  5648    	OR	A,A
0B16E6 ED62                A  5649    	SBC	HL,HL
0B16E8 1E00                A  5650    	LD	E,%0
0B16EA CD 49 40 0B         A  5651    	CALL	__lcmpu
0B16EE 30 25               A  5652    	JR	NC,L_129
0B16F0 21C8FBFF            A  5653    	LD	HL,-1080
0B16F4 DDE5C1              A  5654    	LD	BC,IX
0B16F7 09                  A  5655    	ADD	HL,BC
0B16F8 ED27                A  5656    	LD	HL,(HL)
0B16FA 29                  A  5657    	ADD	HL,HL
0B16FB 29                  A  5658    	ADD	HL,HL
0B16FC E5                  A  5659    	PUSH	HL
0B16FD DDE5E1              A  5660    	LD	HL,IX
0B1700 01CCFBFF            A  5661    	LD	BC,-1076
0B1704 09                  A  5662    	ADD	HL,BC
0B1705 E5C1                A  5663    	LD	BC,HL
0B1707 C5                  A  5664    	PUSH	BC
0B1708 DD4EFF              A  5665    	LD	C,(IX+%FFFFFFFF)
0B170B 0600                A  5666    	LD	B,%0
0B170D C5                  A  5667    	PUSH	BC
0B170E CD C2 34 0B         A  5668    	CALL	_mos_fread
0B1712 C1                  A  5669    	POP	BC
0B1713 C1                  A  5670    	POP	BC
0B1714 C1                  A  5671    	POP	BC
0B1715                     A  5672    L_129:
                           A  5673    ;  489		
                           A  5674    ;  490		bmp.row_padding = (4 - (bmp.bmp_wid
                           A  5675    .LINE 490
                           A  5676    
0B1715 21A3FBFF            A  5677    	LD	HL,-1117
0B1719 DDE5C1              A  5678    	LD	BC,IX
0B171C 09                  A  5679    	ADD	HL,BC
0B171D ED07                A  5680    	LD	BC,(HL)
0B171F CD 22 39 0B         A  5681    	CALL	__stoiu
0B1723 E5D1                A  5682    	LD	DE,HL
0B1725 21A7FBFF            A  5683    	LD	HL,-1113
0B1729 DDE5C1              A  5684    	LD	BC,IX
0B172C 09                  A  5685    	ADD	HL,BC
0B172D 7E                  A  5686    	LD	A,(HL)
0B172E B7ED62              A  5687    	UEXT	HL
0B1731 6F                  A  5688    	LD	L,A
0B1732 01080000            A  5689    	LD	BC,8
0B1736 CD C6 3F 0B         A  5690    	CALL	__idivs
0B173A E5C1                A  5691    	LD	BC,HL
0B173C D5E1                A  5692    	LD	HL,DE
0B173E CD 8A 3F 0B         A  5693    	CALL	__imuls
0B1742 01040000            A  5694    	LD	BC,4
0B1746 CD FE 36 0B         A  5695    	CALL	__irems
0B174A E5C1                A  5696    	LD	BC,HL
0B174C 21040000            A  5697    	LD	HL,4
0B1750 B7                  A  5698    	OR	A,A
0B1751 ED42                A  5699    	SBC	HL,BC
0B1753 01040000            A  5700    	LD	BC,4
0B1757 CD FE 36 0B         A  5701    	CALL	__irems
0B175B DD75D0              A  5702    	LD	(IX+%FFFFFFD0),L
0B175E DD74D1              A  5703    	LD	(IX+%FFFFFFD1),H
                           A  5704    ;  491		bmp.non_pad_row = bmp.bmp_width * b
                           A  5705    .LINE 491
                           A  5706    
0B1761 21A3FBFF            A  5707    	LD	HL,-1117
0B1765 DDE5C1              A  5708    	LD	BC,IX
0B1768 09                  A  5709    	ADD	HL,BC
0B1769 ED07                A  5710    	LD	BC,(HL)
0B176B CD 22 39 0B         A  5711    	CALL	__stoiu
0B176F E5D1                A  5712    	LD	DE,HL
0B1771 21A7FBFF            A  5713    	LD	HL,-1113
0B1775 DDE5C1              A  5714    	LD	BC,IX
0B1778 09                  A  5715    	ADD	HL,BC
0B1779 7E                  A  5716    	LD	A,(HL)
0B177A B7ED62              A  5717    	UEXT	HL
0B177D 6F                  A  5718    	LD	L,A
0B177E E5C1                A  5719    	LD	BC,HL
0B1780 D5E1                A  5720    	LD	HL,DE
0B1782 CD 8A 3F 0B         A  5721    	CALL	__imuls
0B1786 01080000            A  5722    	LD	BC,8
0B178A CD C6 3F 0B         A  5723    	CALL	__idivs
0B178E DD75D2              A  5724    	LD	(IX+%FFFFFFD2),L
0B1791 DD74D3              A  5725    	LD	(IX+%FFFFFFD3),H
                           A  5726    ;  492		row_rgba2222 = (char * ) malloc(bmp
                           A  5727    .LINE 492
                           A  5728    
0B1794 21A3FBFF            A  5729    	LD	HL,-1117
0B1798 DDE5C1              A  5730    	LD	BC,IX
0B179B 09                  A  5731    	ADD	HL,BC
0B179C ED07                A  5732    	LD	BC,(HL)
0B179E CD 22 39 0B         A  5733    	CALL	__stoiu
0B17A2 E5                  A  5734    	PUSH	HL
0B17A3 CD 4B 36 0B         A  5735    	CALL	_malloc
0B17A7 C1                  A  5736    	POP	BC
0B17A8 DD2FF7              A  5737    	LD	(IX+%FFFFFFF7),HL
                           A  5738    ;  493		
                           A  5739    ;  494		if ((bmp.compression != 0) && (bmp.
                           A  5740    .LINE 494
                           A  5741    
0B17AB FD21B4FB FF         A  5742    	LD	IY,-1100
0B17B0 DDE5C1              A  5743    	LD	BC,IX
0B17B3 FD09                A  5744    	ADD	IY,BC
0B17B5 FD2700              A  5745    	LD	HL,(IY)
0B17B8 FD5E03              A  5746    	LD	E,(IY+%3)
0B17BB 01000000            A  5747    	LD	BC,0
0B17BF AF                  A  5748    	XOR	A,A
0B17C0 CD 49 40 0B         A  5749    	CALL	__lcmpu
0B17C4 28 48               A  5750    	JR	Z,L_164
0B17C6 FD21B4FB FF         A  5751    	LD	IY,-1100
0B17CB DDE5C1              A  5752    	LD	BC,IX
0B17CE FD09                A  5753    	ADD	IY,BC
0B17D0 FD2700              A  5754    	LD	HL,(IY)
0B17D3 FD5E03              A  5755    	LD	E,(IY+%3)
0B17D6 01030000            A  5756    	LD	BC,3
0B17DA AF                  A  5757    	XOR	A,A
0B17DB CD 49 40 0B         A  5758    	CALL	__lcmpu
0B17DF 28 2D               A  5759    	JR	Z,L_164
                           A  5760    ;  495			printf("Non standard BMP compre
                           A  5761    .LINE 495
                           A  5762    
0B17E1 01 28 39 0B         A  5763    	LD	BC,___print_uputch
0B17E5 ED43 1B 43 0B       A  5764    	LD	(___print_xputch),BC
0B17EA 01 B7 44 0B         A  5765    	LD	BC,L__109
0B17EE C5                  A  5766    	PUSH	BC
0B17EF CD 70 37 0B         A  5767    	CALL	___print_sendstring
0B17F3 C1                  A  5768    	POP	BC
                           A  5769    ;  496			return bmp;
                           A  5770    .LINE 496
                           A  5771    
0B17F4 ED2206              A  5772    	LEA	HL,IX+%6
0B17F7 ED17                A  5773    	LD	DE,(HL)
0B17F9 DDE5E1              A  5774    	LD	HL,IX
0B17FC 01A3FBFF            A  5775    	LD	BC,-1117
0B1800 09                  A  5776    	ADD	HL,BC
0B1801 01310400            A  5777    	LD	BC,1073
0B1805 EDB0                A  5778    	LDIR	
0B1807 DD2706              A  5779    	LD	HL,(IX+%6)
0B180A C3 92 1F 0B         A  5780    	JR	L_166
                           A  5781    ;  497		}
0B180E                     A  5782    L_164:
                           A  5783    .LINE 497
                           A  5784    
                           A  5785    ;  498		
                           A  5786    ;  499		if ((bmp.compression == 3) || (bmp.
                           A  5787    .LINE 499
                           A  5788    
0B180E FD21B4FB FF         A  5789    	LD	IY,-1100
0B1813 DDE5C1              A  5790    	LD	BC,IX
0B1816 FD09                A  5791    	ADD	IY,BC
0B1818 FD2700              A  5792    	LD	HL,(IY)
0B181B FD5E03              A  5793    	LD	E,(IY+%3)
0B181E 01030000            A  5794    	LD	BC,3
0B1822 AF                  A  5795    	XOR	A,A
0B1823 CD 49 40 0B         A  5796    	CALL	__lcmpu
0B1827 28 3A               A  5797    	JR	Z,L_162
0B1829 FD21B4FB FF         A  5798    	LD	IY,-1100
0B182E DDE5C1              A  5799    	LD	BC,IX
0B1831 FD09                A  5800    	ADD	IY,BC
0B1833 FD2700              A  5801    	LD	HL,(IY)
0B1836 FD5E03              A  5802    	LD	E,(IY+%3)
0B1839 01060000            A  5803    	LD	BC,6
0B183D AF                  A  5804    	XOR	A,A
0B183E CD 49 40 0B         A  5805    	CALL	__lcmpu
0B1842 C2 30 1B 0B         A  5806    	JR	NZ,L_163
0B1846 FD21B0FB FF         A  5807    	LD	IY,-1104
0B184B DDE5C1              A  5808    	LD	BC,IX
0B184E FD09                A  5809    	ADD	IY,BC
0B1850 FD2700              A  5810    	LD	HL,(IY)
0B1853 FD5E03              A  5811    	LD	E,(IY+%3)
0B1856 016C0000            A  5812    	LD	BC,108
0B185A AF                  A  5813    	XOR	A,A
0B185B CD 49 40 0B         A  5814    	CALL	__lcmpu
0B185F DA 30 1B 0B         A  5815    	JR	C,L_163
0B1863                     A  5816    L_162:
                           A  5817    ;  500			
                           A  5818    ;  501			if (bmp.bmp_bitdepth == 16) {
                           A  5819    .LINE 501
                           A  5820    
0B1863 21A7FBFF            A  5821    	LD	HL,-1113
0B1867 DDE5C1              A  5822    	LD	BC,IX
0B186A 09                  A  5823    	ADD	HL,BC
0B186B 7E                  A  5824    	LD	A,(HL)
0B186C FE10                A  5825    	CP	A,%10
0B186E 20 2D               A  5826    	JR	NZ,L_141
                           A  5827    ;  502				
                           A  5828    ;  503				printf("16-bit BMP files no
                           A  5829    .LINE 503
                           A  5830    
0B1870 01 28 39 0B         A  5831    	LD	BC,___print_uputch
0B1874 ED43 1B 43 0B       A  5832    	LD	(___print_xputch),BC
0B1879 01 E0 44 0B         A  5833    	LD	BC,L__114
0B187D C5                  A  5834    	PUSH	BC
0B187E CD 70 37 0B         A  5835    	CALL	___print_sendstring
0B1882 C1                  A  5836    	POP	BC
                           A  5837    ;  504				return bmp;
                           A  5838    .LINE 504
                           A  5839    
0B1883 ED2206              A  5840    	LEA	HL,IX+%6
0B1886 ED17                A  5841    	LD	DE,(HL)
0B1888 DDE5E1              A  5842    	LD	HL,IX
0B188B 01A3FBFF            A  5843    	LD	BC,-1117
0B188F 09                  A  5844    	ADD	HL,BC
0B1890 01310400            A  5845    	LD	BC,1073
0B1894 EDB0                A  5846    	LDIR	
0B1896 DD2706              A  5847    	LD	HL,(IX+%6)
0B1899 C3 92 1F 0B         A  5848    	JR	L_166
                           A  5849    ;  505	
                           A  5850    ;  506			} else if (bmp.bmp_bitdepth == 
0B189D                     A  5851    L_141:
                           A  5852    .LINE 506
                           A  5853    
0B189D 21A7FBFF            A  5854    	LD	HL,-1113
0B18A1 09                  A  5855    	ADD	HL,BC
0B18A2 7E                  A  5856    	LD	A,(HL)
0B18A3 FE20                A  5857    	CP	A,%20
0B18A5 C2 3F 1F 0B         A  5858    	JR	NZ,L_165
                           A  5859    ;  507						
                           A  5860    ;  508				char * src;
                           A  5861    ;  509				
                           A  5862    ;  510				bmp.redBitField = *(uint32_
                           A  5863    .LINE 510
                           A  5864    
0B18A9 DD31FC              A  5865    	LD	IY,(IX+%FFFFFFFC)
0B18AC ED2328              A  5866    	LEA	HL,IY+%28
0B18AF ED07                A  5867    	LD	BC,(HL)
0B18B1 23                  A  5868    	INC	HL
0B18B2 23                  A  5869    	INC	HL
0B18B3 23                  A  5870    	INC	HL
0B18B4 7E                  A  5871    	LD	A,(HL)
0B18B5 FD21B8FB FF         A  5872    	LD	IY,-1096
0B18BA DDE5D1              A  5873    	LD	DE,IX
0B18BD FD19                A  5874    	ADD	IY,DE
0B18BF FD0F00              A  5875    	LD	(IY),BC
0B18C2 FD7703              A  5876    	LD	(IY+%3),A
                           A  5877    ;  511				bmp.red_pos = getByte(bmp.r
                           A  5878    .LINE 511
                           A  5879    
0B18C5 FD21B8FB FF         A  5880    	LD	IY,-1096
0B18CA DDE5C1              A  5881    	LD	BC,IX
0B18CD FD09                A  5882    	ADD	IY,BC
0B18CF FD0700              A  5883    	LD	BC,(IY)
0B18D2 FD7E03              A  5884    	LD	A,(IY+%3)
0B18D5 2600                A  5885    	LD	H,%0
0B18D7 6F                  A  5886    	LD	L,A
0B18D8 E5                  A  5887    	PUSH	HL
0B18D9 C5                  A  5888    	PUSH	BC
0B18DA CD B2 0B 0B         A  5889    	CALL	_getByte
0B18DE C1                  A  5890    	POP	BC
0B18DF C1                  A  5891    	POP	BC
0B18E0 DD77CC              A  5892    	LD	(IX+%FFFFFFCC),A
                           A  5893    ;  512				bmp.greenBitField = *(uint3
                           A  5894    .LINE 512
                           A  5895    
0B18E3 DD31FC              A  5896    	LD	IY,(IX+%FFFFFFFC)
0B18E6 ED232C              A  5897    	LEA	HL,IY+%2C
0B18E9 ED07                A  5898    	LD	BC,(HL)
0B18EB 23                  A  5899    	INC	HL
0B18EC 23                  A  5900    	INC	HL
0B18ED 23                  A  5901    	INC	HL
0B18EE 7E                  A  5902    	LD	A,(HL)
0B18EF FD21BCFB FF         A  5903    	LD	IY,-1092
0B18F4 DDE5D1              A  5904    	LD	DE,IX
0B18F7 FD19                A  5905    	ADD	IY,DE
0B18F9 FD0F00              A  5906    	LD	(IY),BC
0B18FC FD7703              A  5907    	LD	(IY+%3),A
                           A  5908    ;  513				bmp.green_pos = getByte(bmp
                           A  5909    .LINE 513
                           A  5910    
0B18FF FD21BCFB FF         A  5911    	LD	IY,-1092
0B1904 DDE5C1              A  5912    	LD	BC,IX
0B1907 FD09                A  5913    	ADD	IY,BC
0B1909 FD0700              A  5914    	LD	BC,(IY)
0B190C FD7E03              A  5915    	LD	A,(IY+%3)
0B190F 2600                A  5916    	LD	H,%0
0B1911 6F                  A  5917    	LD	L,A
0B1912 E5                  A  5918    	PUSH	HL
0B1913 C5                  A  5919    	PUSH	BC
0B1914 CD B2 0B 0B         A  5920    	CALL	_getByte
0B1918 C1                  A  5921    	POP	BC
0B1919 C1                  A  5922    	POP	BC
0B191A DD77CD              A  5923    	LD	(IX+%FFFFFFCD),A
                           A  5924    ;  514				bmp.blueBitField = *(uint32
                           A  5925    .LINE 514
                           A  5926    
0B191D DD31FC              A  5927    	LD	IY,(IX+%FFFFFFFC)
0B1920 ED2330              A  5928    	LEA	HL,IY+%30
0B1923 ED07                A  5929    	LD	BC,(HL)
0B1925 23                  A  5930    	INC	HL
0B1926 23                  A  5931    	INC	HL
0B1927 23                  A  5932    	INC	HL
0B1928 7E                  A  5933    	LD	A,(HL)
0B1929 FD21C0FB FF         A  5934    	LD	IY,-1088
0B192E DDE5D1              A  5935    	LD	DE,IX
0B1931 FD19                A  5936    	ADD	IY,DE
0B1933 FD0F00              A  5937    	LD	(IY),BC
0B1936 FD7703              A  5938    	LD	(IY+%3),A
                           A  5939    ;  515				bmp.blue_pos = getByte(bmp.
                           A  5940    .LINE 515
                           A  5941    
0B1939 FD21C0FB FF         A  5942    	LD	IY,-1088
0B193E DDE5C1              A  5943    	LD	BC,IX
0B1941 FD09                A  5944    	ADD	IY,BC
0B1943 FD0700              A  5945    	LD	BC,(IY)
0B1946 FD7E03              A  5946    	LD	A,(IY+%3)
0B1949 2600                A  5947    	LD	H,%0
0B194B 6F                  A  5948    	LD	L,A
0B194C E5                  A  5949    	PUSH	HL
0B194D C5                  A  5950    	PUSH	BC
0B194E CD B2 0B 0B         A  5951    	CALL	_getByte
0B1952 C1                  A  5952    	POP	BC
0B1953 C1                  A  5953    	POP	BC
0B1954 DD77CE              A  5954    	LD	(IX+%FFFFFFCE),A
                           A  5955    ;  516				bmp.alphaBitField = *(uint3
                           A  5956    .LINE 516
                           A  5957    
0B1957 DD31FC              A  5958    	LD	IY,(IX+%FFFFFFFC)
0B195A ED2334              A  5959    	LEA	HL,IY+%34
0B195D ED07                A  5960    	LD	BC,(HL)
0B195F 23                  A  5961    	INC	HL
0B1960 23                  A  5962    	INC	HL
0B1961 23                  A  5963    	INC	HL
0B1962 7E                  A  5964    	LD	A,(HL)
0B1963 FD21C4FB FF         A  5965    	LD	IY,-1084
0B1968 DDE5D1              A  5966    	LD	DE,IX
0B196B FD19                A  5967    	ADD	IY,DE
0B196D FD0F00              A  5968    	LD	(IY),BC
0B1970 FD7703              A  5969    	LD	(IY+%3),A
                           A  5970    ;  517				bmp.alpha_pos = getByte(bmp
                           A  5971    .LINE 517
                           A  5972    
0B1973 FD21C4FB FF         A  5973    	LD	IY,-1084
0B1978 DDE5C1              A  5974    	LD	BC,IX
0B197B FD09                A  5975    	ADD	IY,BC
0B197D FD0700              A  5976    	LD	BC,(IY)
0B1980 FD7E03              A  5977    	LD	A,(IY+%3)
0B1983 2600                A  5978    	LD	H,%0
0B1985 6F                  A  5979    	LD	L,A
0B1986 E5                  A  5980    	PUSH	HL
0B1987 C5                  A  5981    	PUSH	BC
0B1988 CD B2 0B 0B         A  5982    	CALL	_getByte
0B198C C1                  A  5983    	POP	BC
0B198D C1                  A  5984    	POP	BC
0B198E DD77CF              A  5985    	LD	(IX+%FFFFFFCF),A
                           A  5986    ;  518				
                           A  5987    ;  519			    src = (char * ) malloc(bmp.
                           A  5988    .LINE 519
                           A  5989    
0B1991 21A3FBFF            A  5990    	LD	HL,-1117
0B1995 DDE5C1              A  5991    	LD	BC,IX
0B1998 09                  A  5992    	ADD	HL,BC
0B1999 ED07                A  5993    	LD	BC,(HL)
0B199B CD 22 39 0B         A  5994    	CALL	__stoiu
0B199F E5D1                A  5995    	LD	DE,HL
0B19A1 21A7FBFF            A  5996    	LD	HL,-1113
0B19A5 DDE5C1              A  5997    	LD	BC,IX
0B19A8 09                  A  5998    	ADD	HL,BC
0B19A9 7E                  A  5999    	LD	A,(HL)
0B19AA B7ED62              A  6000    	UEXT	HL
0B19AD 6F                  A  6001    	LD	L,A
0B19AE E5C1                A  6002    	LD	BC,HL
0B19B0 D5E1                A  6003    	LD	HL,DE
0B19B2 CD 8A 3F 0B         A  6004    	CALL	__imuls
0B19B6 01080000            A  6005    	LD	BC,8
0B19BA CD C6 3F 0B         A  6006    	CALL	__idivs
0B19BE E5                  A  6007    	PUSH	HL
0B19BF CD 4B 36 0B         A  6008    	CALL	_malloc
0B19C3 C1                  A  6009    	POP	BC
0B19C4 DD2FED              A  6010    	LD	(IX+%FFFFFFED),HL
                           A  6011    ;  520				mos_flseek(file, bmp.pixels
                           A  6012    .LINE 520
                           A  6013    
0B19C7 21A5FBFF            A  6014    	LD	HL,-1115
0B19CB DDE5C1              A  6015    	LD	BC,IX
0B19CE 09                  A  6016    	ADD	HL,BC
0B19CF ED07                A  6017    	LD	BC,(HL)
0B19D1 CD 22 39 0B         A  6018    	CALL	__stoiu
0B19D5 E5D1                A  6019    	LD	DE,HL
0B19D7 1B                  A  6020    	DEC	DE
0B19D8 DD07D2              A  6021    	LD	BC,(IX+%FFFFFFD2)
0B19DB CD 22 39 0B         A  6022    	CALL	__stoiu
0B19DF E5C1                A  6023    	LD	BC,HL
0B19E1 C5E1                A  6024    	LD	HL,BC
0B19E3 0191FBFF            A  6025    	LD	BC,-1135	; spill
0B19E7 CD 5B 37 0B         A  6026    	CALL	__istix
0B19EB DD07D0              A  6027    	LD	BC,(IX+%FFFFFFD0)
0B19EE CD 22 39 0B         A  6028    	CALL	__stoiu
0B19F2 0191FBFF            A  6029    	LD	BC,-1135	; unspill
0B19F6 E5                  A  6030    	PUSH	HL
0B19F7 CD 51 42 0B         A  6031    	CALL	__ildix
0B19FB E5C1                A  6032    	LD	BC,HL
0B19FD E1                  A  6033    	POP	HL
0B19FE 09                  A  6034    	ADD	HL,BC
0B19FF E5C1                A  6035    	LD	BC,HL
0B1A01 D5E1                A  6036    	LD	HL,DE
0B1A03 CD 8A 3F 0B         A  6037    	CALL	__imuls
0B1A07 E5C1                A  6038    	LD	BC,HL
0B1A09 CD FF 3F 0B         A  6039    	CALL	__itol
0B1A0D FD21A8FB FF         A  6040    	LD	IY,-1112
0B1A12 DDE5D1              A  6041    	LD	DE,IX
0B1A15 FD19                A  6042    	ADD	IY,DE
0B1A17 FD2700              A  6043    	LD	HL,(IY)
0B1A1A FD5E03              A  6044    	LD	E,(IY+%3)
0B1A1D CD 40 35 0B         A  6045    	CALL	__ladd
0B1A21 4B                  A  6046    	LD	C,E
0B1A22 0600                A  6047    	LD	B,%0
0B1A24 C5                  A  6048    	PUSH	BC
0B1A25 E5                  A  6049    	PUSH	HL
0B1A26 DD4EFF              A  6050    	LD	C,(IX+%FFFFFFFF)
0B1A29 C5                  A  6051    	PUSH	BC
0B1A2A CD FC 34 0B         A  6052    	CALL	_mos_flseek
0B1A2E C1                  A  6053    	POP	BC
0B1A2F C1                  A  6054    	POP	BC
0B1A30 C1                  A  6055    	POP	BC
                           A  6056    ;  521				clear_buffer(slot);
                           A  6057    .LINE 521
                           A  6058    
0B1A31 DD4E0C              A  6059    	LD	C,(IX+%C)
0B1A34 0600                A  6060    	LD	B,%0
0B1A36 C5                  A  6061    	PUSH	BC
0B1A37 CD 67 05 0B         A  6062    	CALL	_clear_buffer
0B1A3B C1                  A  6063    	POP	BC
                           A  6064    ;  522	
                           A  6065    ;  523				for (y = bmp.bmp_height - 1
                           A  6066    .LINE 523
                           A  6067    
0B1A3C 21A5FBFF            A  6068    	LD	HL,-1115
0B1A40 DDE5C1              A  6069    	LD	BC,IX
0B1A43 09                  A  6070    	ADD	HL,BC
0B1A44 ED27                A  6071    	LD	HL,(HL)
0B1A46 2B                  A  6072    	DEC	HL
0B1A47 DD75FA              A  6073    	LD	(IX+%FFFFFFFA),L
0B1A4A DD74FB              A  6074    	LD	(IX+%FFFFFFFB),H
0B1A4D C3 14 1B 0B         A  6075    	JR	L_137
0B1A51                     A  6076    L_135:
                           A  6077    ;  524	
                           A  6078    ;  525					//printf("Row: %u\r\n",
                           A  6079    ;  526					mos_fread(file, src, bm
                           A  6080    .LINE 526
                           A  6081    
0B1A51 DD07D2              A  6082    	LD	BC,(IX+%FFFFFFD2)
0B1A54 CD 22 39 0B         A  6083    	CALL	__stoiu
0B1A58 E5                  A  6084    	PUSH	HL
0B1A59 DD07ED              A  6085    	LD	BC,(IX+%FFFFFFED)
0B1A5C C5                  A  6086    	PUSH	BC
0B1A5D DD4EFF              A  6087    	LD	C,(IX+%FFFFFFFF)
0B1A60 0600                A  6088    	LD	B,%0
0B1A62 C5                  A  6089    	PUSH	BC
0B1A63 CD C2 34 0B         A  6090    	CALL	_mos_fread
0B1A67 C1                  A  6091    	POP	BC
0B1A68 C1                  A  6092    	POP	BC
0B1A69 C1                  A  6093    	POP	BC
                           A  6094    ;  527					generic8888_to_rgba2222
                           A  6095    .LINE 527
                           A  6096    
0B1A6A DD4ECF              A  6097    	LD	C,(IX+%FFFFFFCF)
0B1A6D 0600                A  6098    	LD	B,%0
0B1A6F C5                  A  6099    	PUSH	BC
0B1A70 DD4ECE              A  6100    	LD	C,(IX+%FFFFFFCE)
0B1A73 C5                  A  6101    	PUSH	BC
0B1A74 DD4ECD              A  6102    	LD	C,(IX+%FFFFFFCD)
0B1A77 C5                  A  6103    	PUSH	BC
0B1A78 DD4ECC              A  6104    	LD	C,(IX+%FFFFFFCC)
0B1A7B C5                  A  6105    	PUSH	BC
0B1A7C 21A7FBFF            A  6106    	LD	HL,-1113
0B1A80 DDE5C1              A  6107    	LD	BC,IX
0B1A83 09                  A  6108    	ADD	HL,BC
0B1A84 7E                  A  6109    	LD	A,(HL)
0B1A85 B7ED62              A  6110    	UEXT	HL
0B1A88 6F                  A  6111    	LD	L,A
0B1A89 01080000            A  6112    	LD	BC,8
0B1A8D CD C6 3F 0B         A  6113    	CALL	__idivs
0B1A91 4D                  A  6114    	LD	C,L
0B1A92 0600                A  6115    	LD	B,%0
0B1A94 C5                  A  6116    	PUSH	BC
0B1A95 21A3FBFF            A  6117    	LD	HL,-1117
0B1A99 DDE5C1              A  6118    	LD	BC,IX
0B1A9C 09                  A  6119    	ADD	HL,BC
0B1A9D ED07                A  6120    	LD	BC,(HL)
0B1A9F CD 22 39 0B         A  6121    	CALL	__stoiu
0B1AA3 E5                  A  6122    	PUSH	HL
0B1AA4 DD07F7              A  6123    	LD	BC,(IX+%FFFFFFF7)
0B1AA7 C5                  A  6124    	PUSH	BC
0B1AA8 DD07ED              A  6125    	LD	BC,(IX+%FFFFFFED)
0B1AAB C5                  A  6126    	PUSH	BC
0B1AAC CD A8 0A 0B         A  6127    	CALL	_generic8888_to_rgba2222
0B1AB0 FD211800 00         A  6128    	LD	IY,24
0B1AB5 FD39                A  6129    	ADD	IY,SP
0B1AB7 FDF9                A  6130    	LD	SP,IY
                           A  6131    ;  528					add_stream_to_buffer(sl
                           A  6132    .LINE 528
                           A  6133    
0B1AB9 21A3FBFF            A  6134    	LD	HL,-1117
0B1ABD DDE5C1              A  6135    	LD	BC,IX
0B1AC0 09                  A  6136    	ADD	HL,BC
0B1AC1 ED07                A  6137    	LD	BC,(HL)
0B1AC3 C5                  A  6138    	PUSH	BC
0B1AC4 DD07F7              A  6139    	LD	BC,(IX+%FFFFFFF7)
0B1AC7 C5                  A  6140    	PUSH	BC
0B1AC8 DD4E0C              A  6141    	LD	C,(IX+%C)
0B1ACB 0600                A  6142    	LD	B,%0
0B1ACD C5                  A  6143    	PUSH	BC
0B1ACE CD DB 05 0B         A  6144    	CALL	_add_stream_to_buffer
0B1AD2 C1                  A  6145    	POP	BC
0B1AD3 C1                  A  6146    	POP	BC
0B1AD4 C1                  A  6147    	POP	BC
                           A  6148    ;  529					mos_flseek(file, fo -> 
                           A  6149    .LINE 529
                           A  6150    
0B1AD5 DD07D2              A  6151    	LD	BC,(IX+%FFFFFFD2)
0B1AD8 CD 22 39 0B         A  6152    	CALL	__stoiu
0B1ADC 29                  A  6153    	ADD	HL,HL
0B1ADD E5D1                A  6154    	LD	DE,HL
0B1ADF DD07D0              A  6155    	LD	BC,(IX+%FFFFFFD0)
0B1AE2 CD 22 39 0B         A  6156    	CALL	__stoiu
0B1AE6 19                  A  6157    	ADD	HL,DE
0B1AE7 E5C1                A  6158    	LD	BC,HL
0B1AE9 CD FF 3F 0B         A  6159    	CALL	__itol
0B1AED DD31F0              A  6160    	LD	IY,(IX+%FFFFFFF0)
0B1AF0 FD2711              A  6161    	LD	HL,(IY+%11)
0B1AF3 FD5E14              A  6162    	LD	E,(IY+%14)
0B1AF6 CD 17 3D 0B         A  6163    	CALL	__lsub
0B1AFA 4B                  A  6164    	LD	C,E
0B1AFB 0600                A  6165    	LD	B,%0
0B1AFD C5                  A  6166    	PUSH	BC
0B1AFE E5                  A  6167    	PUSH	HL
0B1AFF DD4EFF              A  6168    	LD	C,(IX+%FFFFFFFF)
0B1B02 C5                  A  6169    	PUSH	BC
0B1B03 CD FC 34 0B         A  6170    	CALL	_mos_flseek
0B1B07 C1                  A  6171    	POP	BC
0B1B08 C1                  A  6172    	POP	BC
0B1B09 C1                  A  6173    	POP	BC
0B1B0A DD27FA              A  6174    	LD	HL,(IX+%FFFFFFFA)
0B1B0D 2B                  A  6175    	DEC	HL
0B1B0E DD75FA              A  6176    	LD	(IX+%FFFFFFFA),L
0B1B11 DD74FB              A  6177    	LD	(IX+%FFFFFFFB),H
                           A  6178    ;  530	
                           A  6179    ;  531				}
0B1B14                     A  6180    L_137:
                           A  6181    .LINE 531
                           A  6182    
0B1B14 49010000            A  6183    	LD.LIS	BC,0
0B1B18 DD27FA              A  6184    	LD	HL,(IX+%FFFFFFFA)
0B1B1B B7                  A  6185    	OR	A,A
0B1B1C 40ED42              A  6186    	SBC.SIS	HL,BC
0B1B1F F2 51 1A 0B         A  6187    	JP	P,L_135
                           A  6188    ;  532				free(src);
                           A  6189    .LINE 532
                           A  6190    
0B1B23 DD07ED              A  6191    	LD	BC,(IX+%FFFFFFED)
0B1B26 C5                  A  6192    	PUSH	BC
0B1B27 CD 46 35 0B         A  6193    	CALL	_free
0B1B2B C1                  A  6194    	POP	BC
                           A  6195    ;  533				
                           A  6196    ;  534			}
                           A  6197    ;  535			
                           A  6198    ;  536		} else if (bmp.compression == 0) {
                           A  6199    .LINE 536
                           A  6200    
0B1B2C C3 3F 1F 0B         A  6201    	JR	L_165
0B1B30                     A  6202    L_163:
0B1B30 FD21B4FB FF         A  6203    	LD	IY,-1100
0B1B35 DDE5C1              A  6204    	LD	BC,IX
0B1B38 FD09                A  6205    	ADD	IY,BC
0B1B3A FD2700              A  6206    	LD	HL,(IY)
0B1B3D FD5E03              A  6207    	LD	E,(IY+%3)
0B1B40 01000000            A  6208    	LD	BC,0
0B1B44 AF                  A  6209    	XOR	A,A
0B1B45 CD 49 40 0B         A  6210    	CALL	__lcmpu
0B1B49 C2 3F 1F 0B         A  6211    	JR	NZ,L_165
                           A  6212    ;  537	
                           A  6213    ;  538			if (bmp.bmp_bitdepth == 16) {
                           A  6214    .LINE 538
                           A  6215    
0B1B4D 21A7FBFF            A  6216    	LD	HL,-1113
0B1B51 DDE5C1              A  6217    	LD	BC,IX
0B1B54 09                  A  6218    	ADD	HL,BC
0B1B55 7E                  A  6219    	LD	A,(HL)
0B1B56 FE10                A  6220    	CP	A,%10
0B1B58 20 2D               A  6221    	JR	NZ,L_153
                           A  6222    ;  539				
                           A  6223    ;  540				printf("16-bit BMP files no
                           A  6224    .LINE 540
                           A  6225    
0B1B5A 01 28 39 0B         A  6226    	LD	BC,___print_uputch
0B1B5E ED43 1B 43 0B       A  6227    	LD	(___print_xputch),BC
0B1B63 01 3E 45 0B         A  6228    	LD	BC,L__119
0B1B67 C5                  A  6229    	PUSH	BC
0B1B68 CD 70 37 0B         A  6230    	CALL	___print_sendstring
0B1B6C C1                  A  6231    	POP	BC
                           A  6232    ;  541				return bmp;
                           A  6233    .LINE 541
                           A  6234    
0B1B6D ED2206              A  6235    	LEA	HL,IX+%6
0B1B70 ED17                A  6236    	LD	DE,(HL)
0B1B72 DDE5E1              A  6237    	LD	HL,IX
0B1B75 01A3FBFF            A  6238    	LD	BC,-1117
0B1B79 09                  A  6239    	ADD	HL,BC
0B1B7A 01310400            A  6240    	LD	BC,1073
0B1B7E EDB0                A  6241    	LDIR	
0B1B80 DD2706              A  6242    	LD	HL,(IX+%6)
0B1B83 C3 92 1F 0B         A  6243    	JR	L_166
                           A  6244    ;  542				
                           A  6245    ;  543			} else if (bmp.bmp_bitdepth == 
0B1B87                     A  6246    L_153:
                           A  6247    .LINE 543
                           A  6248    
0B1B87 21A7FBFF            A  6249    	LD	HL,-1113
0B1B8B 09                  A  6250    	ADD	HL,BC
0B1B8C 7E                  A  6251    	LD	A,(HL)
0B1B8D FE08                A  6252    	CP	A,%8
0B1B8F C2 8C 1D 0B         A  6253    	JR	NZ,L_160
                           A  6254    ;  544				
                           A  6255    ;  545				int16_t x,y;
                           A  6256    ;  546				uint8_t index, b, g, r;
                           A  6257    ;  547	
                           A  6258    ;  548				mos_flseek(file, bmp.pixels
                           A  6259    .LINE 548
                           A  6260    
0B1B93 21A5FBFF            A  6261    	LD	HL,-1115
0B1B97 09                  A  6262    	ADD	HL,BC
0B1B98 ED07                A  6263    	LD	BC,(HL)
0B1B9A CD 22 39 0B         A  6264    	CALL	__stoiu
0B1B9E E5D1                A  6265    	LD	DE,HL
0B1BA0 1B                  A  6266    	DEC	DE
0B1BA1 DD07D2              A  6267    	LD	BC,(IX+%FFFFFFD2)
0B1BA4 CD 22 39 0B         A  6268    	CALL	__stoiu
0B1BA8 E5C1                A  6269    	LD	BC,HL
0B1BAA C5E1                A  6270    	LD	HL,BC
0B1BAC 0194FBFF            A  6271    	LD	BC,-1132	; spill
0B1BB0 CD 5B 37 0B         A  6272    	CALL	__istix
0B1BB4 DD07D0              A  6273    	LD	BC,(IX+%FFFFFFD0)
0B1BB7 CD 22 39 0B         A  6274    	CALL	__stoiu
0B1BBB 0194FBFF            A  6275    	LD	BC,-1132	; unspill
0B1BBF E5                  A  6276    	PUSH	HL
0B1BC0 CD 51 42 0B         A  6277    	CALL	__ildix
0B1BC4 E5C1                A  6278    	LD	BC,HL
0B1BC6 E1                  A  6279    	POP	HL
0B1BC7 09                  A  6280    	ADD	HL,BC
0B1BC8 E5C1                A  6281    	LD	BC,HL
0B1BCA D5E1                A  6282    	LD	HL,DE
0B1BCC CD 8A 3F 0B         A  6283    	CALL	__imuls
0B1BD0 E5C1                A  6284    	LD	BC,HL
0B1BD2 CD FF 3F 0B         A  6285    	CALL	__itol
0B1BD6 FD21A8FB FF         A  6286    	LD	IY,-1112
0B1BDB DDE5D1              A  6287    	LD	DE,IX
0B1BDE FD19                A  6288    	ADD	IY,DE
0B1BE0 FD2700              A  6289    	LD	HL,(IY)
0B1BE3 FD5E03              A  6290    	LD	E,(IY+%3)
0B1BE6 CD 40 35 0B         A  6291    	CALL	__ladd
0B1BEA 4B                  A  6292    	LD	C,E
0B1BEB 0600                A  6293    	LD	B,%0
0B1BED C5                  A  6294    	PUSH	BC
0B1BEE E5                  A  6295    	PUSH	HL
0B1BEF DD4EFF              A  6296    	LD	C,(IX+%FFFFFFFF)
0B1BF2 C5                  A  6297    	PUSH	BC
0B1BF3 CD FC 34 0B         A  6298    	CALL	_mos_flseek
0B1BF7 C1                  A  6299    	POP	BC
0B1BF8 C1                  A  6300    	POP	BC
0B1BF9 C1                  A  6301    	POP	BC
                           A  6302    ;  549				clear_buffer(slot);
                           A  6303    .LINE 549
                           A  6304    
0B1BFA DD4E0C              A  6305    	LD	C,(IX+%C)
0B1BFD 0600                A  6306    	LD	B,%0
0B1BFF C5                  A  6307    	PUSH	BC
0B1C00 CD 67 05 0B         A  6308    	CALL	_clear_buffer
0B1C04 C1                  A  6309    	POP	BC
                           A  6310    ;  550				
                           A  6311    ;  551				for (y = bmp.bmp_height - 1
                           A  6312    .LINE 551
                           A  6313    
0B1C05 21A5FBFF            A  6314    	LD	HL,-1115
0B1C09 DDE5C1              A  6315    	LD	BC,IX
0B1C0C 09                  A  6316    	ADD	HL,BC
0B1C0D ED27                A  6317    	LD	HL,(HL)
0B1C0F 2B                  A  6318    	DEC	HL
0B1C10 DD75F3              A  6319    	LD	(IX+%FFFFFFF3),L
0B1C13 DD74F4              A  6320    	LD	(IX+%FFFFFFF4),H
0B1C16 C3 73 1D 0B         A  6321    	JR	L_150
0B1C1A                     A  6322    L_148:
                           A  6323    ;  552					for (x = 0; x < bmp.bmp
                           A  6324    .LINE 552
                           A  6325    
0B1C1A DD36F500            A  6326    	LD	(IX+%FFFFFFF5),%0
0B1C1E DD36F600            A  6327    	LD	(IX+%FFFFFFF6),%0
0B1C22 C3 F0 1C 0B         A  6328    	JR	L_146
0B1C26                     A  6329    L_144:
                           A  6330    ;  553	
                           A  6331    ;  554						index = (char) mos_
                           A  6332    .LINE 554
                           A  6333    
0B1C26 DD4EFF              A  6334    	LD	C,(IX+%FFFFFFFF)
0B1C29 0600                A  6335    	LD	B,%0
0B1C2B C5                  A  6336    	PUSH	BC
0B1C2C CD C2 33 0B         A  6337    	CALL	_mos_fgetc
0B1C30 C1                  A  6338    	POP	BC
0B1C31 DD77EC              A  6339    	LD	(IX+%FFFFFFEC),A
                           A  6340    ;  555						b = bmp.color_table
                           A  6341    .LINE 555
                           A  6342    
0B1C34 DDE5FDE1            A  6343    	LD	IY,IX
0B1C38 01CCFBFF            A  6344    	LD	BC,-1076
0B1C3C FD09                A  6345    	ADD	IY,BC
0B1C3E 219DFBFF            A  6346    	LD	HL,-1123
0B1C42 DDE5C1              A  6347    	LD	BC,IX
0B1C45 09                  A  6348    	ADD	HL,BC
0B1C46 ED3E                A  6349    	LD	(HL),IY
0B1C48 DD7EEC              A  6350    	LD	A,(IX+%FFFFFFEC)
0B1C4B B7ED62              A  6351    	UEXT	HL
0B1C4E 6F                  A  6352    	LD	L,A
0B1C4F 29                  A  6353    	ADD	HL,HL
0B1C50 29                  A  6354    	ADD	HL,HL
0B1C51 FD219DFB FF         A  6355    	LD	IY,-1123
0B1C56 DDE5C1              A  6356    	LD	BC,IX
0B1C59 FD09                A  6357    	ADD	IY,BC
0B1C5B FD0700              A  6358    	LD	BC,(IY)
0B1C5E 09                  A  6359    	ADD	HL,BC
0B1C5F FD21A0FB FF         A  6360    	LD	IY,-1120
0B1C64 DDE5C1              A  6361    	LD	BC,IX
0B1C67 FD09                A  6362    	ADD	IY,BC
0B1C69 FD2F00              A  6363    	LD	(IY),HL
0B1C6C 21A0FBFF            A  6364    	LD	HL,-1120
0B1C70 DDE5C1              A  6365    	LD	BC,IX
0B1C73 09                  A  6366    	ADD	HL,BC
0B1C74 ED27                A  6367    	LD	HL,(HL)
0B1C76 7E                  A  6368    	LD	A,(HL)
0B1C77 DD77EB              A  6369    	LD	(IX+%FFFFFFEB),A
                           A  6370    ;  556						g = bmp.color_table
                           A  6371    .LINE 556
                           A  6372    
0B1C7A 21A0FBFF            A  6373    	LD	HL,-1120
0B1C7E DDE5C1              A  6374    	LD	BC,IX
0B1C81 09                  A  6375    	ADD	HL,BC
0B1C82 ED27                A  6376    	LD	HL,(HL)
0B1C84 23                  A  6377    	INC	HL
0B1C85 7E                  A  6378    	LD	A,(HL)
0B1C86 DD77EA              A  6379    	LD	(IX+%FFFFFFEA),A
                           A  6380    ;  557						r = bmp.color_table
                           A  6381    .LINE 557
                           A  6382    
0B1C89 21A0FBFF            A  6383    	LD	HL,-1120
0B1C8D DDE5C1              A  6384    	LD	BC,IX
0B1C90 09                  A  6385    	ADD	HL,BC
0B1C91 ED31                A  6386    	LD	IY,(HL)
0B1C93 ED2302              A  6387    	LEA	HL,IY+%2
0B1C96 7E                  A  6388    	LD	A,(HL)
0B1C97 DD77E9              A  6389    	LD	(IX+%FFFFFFE9),A
                           A  6390    ;  558						
                           A  6391    ;  559						row_rgba2222[x] = 	
                           A  6392    ;  560											
                           A  6393    ;  561											
                           A  6394    ;  562											
                           A  6395    .LINE 562
                           A  6396    
0B1C9A DD7EEA              A  6397    	LD	A,(IX+%FFFFFFEA)
0B1C9D B7ED62              A  6398    	UEXT	HL
0B1CA0 6F                  A  6399    	LD	L,A
0B1CA1 3E06                A  6400    	LD	A,%6
0B1CA3 CD 36 37 0B         A  6401    	CALL	__ishrs_b
0B1CA7 7D                  A  6402    	LD	A,L
0B1CA8 E603                A  6403    	AND	A,%3
0B1CAA 87                  A  6404    	ADD	A,A
0B1CAB 87                  A  6405    	ADD	A,A
0B1CAC 47                  A  6406    	LD	B,A
0B1CAD DD7EE9              A  6407    	LD	A,(IX+%FFFFFFE9)
0B1CB0 B7ED62              A  6408    	UEXT	HL
0B1CB3 6F                  A  6409    	LD	L,A
0B1CB4 3E06                A  6410    	LD	A,%6
0B1CB6 CD 36 37 0B         A  6411    	CALL	__ishrs_b
0B1CBA 7D                  A  6412    	LD	A,L
0B1CBB E603                A  6413    	AND	A,%3
0B1CBD 4F                  A  6414    	LD	C,A
0B1CBE 78                  A  6415    	LD	A,B
0B1CBF B1                  A  6416    	OR	A,C
0B1CC0 47                  A  6417    	LD	B,A
0B1CC1 DD7EEB              A  6418    	LD	A,(IX+%FFFFFFEB)
0B1CC4 B7ED62              A  6419    	UEXT	HL
0B1CC7 6F                  A  6420    	LD	L,A
0B1CC8 3E06                A  6421    	LD	A,%6
0B1CCA CD 36 37 0B         A  6422    	CALL	__ishrs_b
0B1CCE 7D                  A  6423    	LD	A,L
0B1CCF E603                A  6424    	AND	A,%3
0B1CD1 87                  A  6425    	ADD	A,A
0B1CD2 87                  A  6426    	ADD	A,A
0B1CD3 87                  A  6427    	ADD	A,A
0B1CD4 87                  A  6428    	ADD	A,A
0B1CD5 4F                  A  6429    	LD	C,A
0B1CD6 78                  A  6430    	LD	A,B
0B1CD7 B1                  A  6431    	OR	A,C
0B1CD8 F6C0                A  6432    	OR	A,%C0
0B1CDA DD07F5              A  6433    	LD	BC,(IX+%FFFFFFF5)
0B1CDD CD 49 42 0B         A  6434    	CALL	__stoi
0B1CE1 DD07F7              A  6435    	LD	BC,(IX+%FFFFFFF7)
0B1CE4 09                  A  6436    	ADD	HL,BC
0B1CE5 77                  A  6437    	LD	(HL),A
0B1CE6 DD27F5              A  6438    	LD	HL,(IX+%FFFFFFF5)
0B1CE9 23                  A  6439    	INC	HL
0B1CEA DD75F5              A  6440    	LD	(IX+%FFFFFFF5),L
0B1CED DD74F6              A  6441    	LD	(IX+%FFFFFFF6),H
                           A  6442    ;  563						
                           A  6443    ;  564	
                           A  6444    ;  565					}
0B1CF0                     A  6445    L_146:
                           A  6446    .LINE 565
                           A  6447    
0B1CF0 21A3FBFF            A  6448    	LD	HL,-1117
0B1CF4 DDE5C1              A  6449    	LD	BC,IX
0B1CF7 09                  A  6450    	ADD	HL,BC
0B1CF8 ED07                A  6451    	LD	BC,(HL)
0B1CFA CD 22 39 0B         A  6452    	CALL	__stoiu
0B1CFE E5D1                A  6453    	LD	DE,HL
0B1D00 DD07F5              A  6454    	LD	BC,(IX+%FFFFFFF5)
0B1D03 CD 49 42 0B         A  6455    	CALL	__stoi
0B1D07 B7                  A  6456    	OR	A,A
0B1D08 ED52                A  6457    	SBC	HL,DE
0B1D0A FA 14 1D 0B         A  6458    	JP	M,L__125
0B1D0E EA 26 1C 0B         A  6459    	JP	PE,L_144
0B1D12 18 04               A  6460    	JR	L__126
0B1D14                     A  6461    L__125:
0B1D14 E2 26 1C 0B         A  6462    	JP	PO,L_144
0B1D18                     A  6463    L__126:
                           A  6464    ;  566					
                           A  6465    ;  567					add_stream_to_buffer(sl
                           A  6466    .LINE 567
                           A  6467    
0B1D18 21A3FBFF            A  6468    	LD	HL,-1117
0B1D1C DDE5C1              A  6469    	LD	BC,IX
0B1D1F 09                  A  6470    	ADD	HL,BC
0B1D20 ED07                A  6471    	LD	BC,(HL)
0B1D22 C5                  A  6472    	PUSH	BC
0B1D23 DD07F7              A  6473    	LD	BC,(IX+%FFFFFFF7)
0B1D26 C5                  A  6474    	PUSH	BC
0B1D27 DD4E0C              A  6475    	LD	C,(IX+%C)
0B1D2A 0600                A  6476    	LD	B,%0
0B1D2C C5                  A  6477    	PUSH	BC
0B1D2D CD DB 05 0B         A  6478    	CALL	_add_stream_to_buffer
0B1D31 C1                  A  6479    	POP	BC
0B1D32 C1                  A  6480    	POP	BC
0B1D33 C1                  A  6481    	POP	BC
                           A  6482    ;  568					mos_flseek(file, fo -> 
                           A  6483    .LINE 568
                           A  6484    
0B1D34 DD07D2              A  6485    	LD	BC,(IX+%FFFFFFD2)
0B1D37 CD 22 39 0B         A  6486    	CALL	__stoiu
0B1D3B 29                  A  6487    	ADD	HL,HL
0B1D3C E5D1                A  6488    	LD	DE,HL
0B1D3E DD07D0              A  6489    	LD	BC,(IX+%FFFFFFD0)
0B1D41 CD 22 39 0B         A  6490    	CALL	__stoiu
0B1D45 19                  A  6491    	ADD	HL,DE
0B1D46 E5C1                A  6492    	LD	BC,HL
0B1D48 CD FF 3F 0B         A  6493    	CALL	__itol
0B1D4C DD31F0              A  6494    	LD	IY,(IX+%FFFFFFF0)
0B1D4F FD2711              A  6495    	LD	HL,(IY+%11)
0B1D52 FD5E14              A  6496    	LD	E,(IY+%14)
0B1D55 CD 17 3D 0B         A  6497    	CALL	__lsub
0B1D59 4B                  A  6498    	LD	C,E
0B1D5A 0600                A  6499    	LD	B,%0
0B1D5C C5                  A  6500    	PUSH	BC
0B1D5D E5                  A  6501    	PUSH	HL
0B1D5E DD4EFF              A  6502    	LD	C,(IX+%FFFFFFFF)
0B1D61 C5                  A  6503    	PUSH	BC
0B1D62 CD FC 34 0B         A  6504    	CALL	_mos_flseek
0B1D66 C1                  A  6505    	POP	BC
0B1D67 C1                  A  6506    	POP	BC
0B1D68 C1                  A  6507    	POP	BC
0B1D69 DD27F3              A  6508    	LD	HL,(IX+%FFFFFFF3)
0B1D6C 2B                  A  6509    	DEC	HL
0B1D6D DD75F3              A  6510    	LD	(IX+%FFFFFFF3),L
0B1D70 DD74F4              A  6511    	LD	(IX+%FFFFFFF4),H
                           A  6512    ;  569	
                           A  6513    ;  570				}
0B1D73                     A  6514    L_150:
                           A  6515    .LINE 570
                           A  6516    
0B1D73 49010000            A  6517    	LD.LIS	BC,0
0B1D77 DD27F3              A  6518    	LD	HL,(IX+%FFFFFFF3)
0B1D7A B7                  A  6519    	OR	A,A
0B1D7B 40ED42              A  6520    	SBC.SIS	HL,BC
0B1D7E F2 88 1D 0B         A  6521    	JP	P,L__127
0B1D82 EA 1A 1C 0B         A  6522    	JP	PE,L_148
0B1D86 18 04               A  6523    	JR	L__128
0B1D88                     A  6524    L__127:
0B1D88 E2 1A 1C 0B         A  6525    	JP	PO,L_148
0B1D8C                     A  6526    L__128:
                           A  6527    ;  571	
                           A  6528    ;  572			}
0B1D8C                     A  6529    L_160:
                           A  6530    .LINE 572
                           A  6531    
                           A  6532    ;  573			
                           A  6533    ;  574			if (bmp.bmp_bitdepth == 24) {
                           A  6534    .LINE 574
                           A  6535    
0B1D8C 21A7FBFF            A  6536    	LD	HL,-1113
0B1D90 DDE5C1              A  6537    	LD	BC,IX
0B1D93 09                  A  6538    	ADD	HL,BC
0B1D94 7E                  A  6539    	LD	A,(HL)
0B1D95 FE18                A  6540    	CP	A,%18
0B1D97 C2 3F 1F 0B         A  6541    	JR	NZ,L_165
                           A  6542    ;  575			
                           A  6543    ;  576				//uint16_t new_row_size;
                           A  6544    ;  577				
                           A  6545    ;  578			    char * src = (char * ) mall
                           A  6546    .LINE 578
                           A  6547    
0B1D9B 21A3FBFF            A  6548    	LD	HL,-1117
0B1D9F 09                  A  6549    	ADD	HL,BC
0B1DA0 ED07                A  6550    	LD	BC,(HL)
0B1DA2 CD 22 39 0B         A  6551    	CALL	__stoiu
0B1DA6 E5D1                A  6552    	LD	DE,HL
0B1DA8 21A7FBFF            A  6553    	LD	HL,-1113
0B1DAC DDE5C1              A  6554    	LD	BC,IX
0B1DAF 09                  A  6555    	ADD	HL,BC
0B1DB0 7E                  A  6556    	LD	A,(HL)
0B1DB1 B7ED62              A  6557    	UEXT	HL
0B1DB4 6F                  A  6558    	LD	L,A
0B1DB5 E5C1                A  6559    	LD	BC,HL
0B1DB7 D5E1                A  6560    	LD	HL,DE
0B1DB9 CD 8A 3F 0B         A  6561    	CALL	__imuls
0B1DBD 01080000            A  6562    	LD	BC,8
0B1DC1 CD C6 3F 0B         A  6563    	CALL	__idivs
0B1DC5 E5                  A  6564    	PUSH	HL
0B1DC6 CD 4B 36 0B         A  6565    	CALL	_malloc
0B1DCA C1                  A  6566    	POP	BC
0B1DCB DD2FE6              A  6567    	LD	(IX+%FFFFFFE6),HL
                           A  6568    ;  579				mos_flseek(file, bmp.pixels
                           A  6569    .LINE 579
                           A  6570    
0B1DCE 21A5FBFF            A  6571    	LD	HL,-1115
0B1DD2 DDE5C1              A  6572    	LD	BC,IX
0B1DD5 09                  A  6573    	ADD	HL,BC
0B1DD6 ED07                A  6574    	LD	BC,(HL)
0B1DD8 CD 22 39 0B         A  6575    	CALL	__stoiu
0B1DDC E5D1                A  6576    	LD	DE,HL
0B1DDE 1B                  A  6577    	DEC	DE
0B1DDF DD07D2              A  6578    	LD	BC,(IX+%FFFFFFD2)
0B1DE2 CD 22 39 0B         A  6579    	CALL	__stoiu
0B1DE6 E5C1                A  6580    	LD	BC,HL
0B1DE8 C5E1                A  6581    	LD	HL,BC
0B1DEA 0197FBFF            A  6582    	LD	BC,-1129	; spill
0B1DEE CD 5B 37 0B         A  6583    	CALL	__istix
0B1DF2 DD07D0              A  6584    	LD	BC,(IX+%FFFFFFD0)
0B1DF5 CD 22 39 0B         A  6585    	CALL	__stoiu
0B1DF9 0197FBFF            A  6586    	LD	BC,-1129	; unspill
0B1DFD E5                  A  6587    	PUSH	HL
0B1DFE CD 51 42 0B         A  6588    	CALL	__ildix
0B1E02 E5C1                A  6589    	LD	BC,HL
0B1E04 E1                  A  6590    	POP	HL
0B1E05 09                  A  6591    	ADD	HL,BC
0B1E06 E5C1                A  6592    	LD	BC,HL
0B1E08 D5E1                A  6593    	LD	HL,DE
0B1E0A CD 8A 3F 0B         A  6594    	CALL	__imuls
0B1E0E E5C1                A  6595    	LD	BC,HL
0B1E10 CD FF 3F 0B         A  6596    	CALL	__itol
0B1E14 FD21A8FB FF         A  6597    	LD	IY,-1112
0B1E19 DDE5D1              A  6598    	LD	DE,IX
0B1E1C FD19                A  6599    	ADD	IY,DE
0B1E1E FD2700              A  6600    	LD	HL,(IY)
0B1E21 FD5E03              A  6601    	LD	E,(IY+%3)
0B1E24 CD 40 35 0B         A  6602    	CALL	__ladd
0B1E28 4B                  A  6603    	LD	C,E
0B1E29 0600                A  6604    	LD	B,%0
0B1E2B C5                  A  6605    	PUSH	BC
0B1E2C E5                  A  6606    	PUSH	HL
0B1E2D DD4EFF              A  6607    	LD	C,(IX+%FFFFFFFF)
0B1E30 C5                  A  6608    	PUSH	BC
0B1E31 CD FC 34 0B         A  6609    	CALL	_mos_flseek
0B1E35 C1                  A  6610    	POP	BC
0B1E36 C1                  A  6611    	POP	BC
0B1E37 C1                  A  6612    	POP	BC
                           A  6613    ;  580				clear_buffer(slot);
                           A  6614    .LINE 580
                           A  6615    
0B1E38 DD4E0C              A  6616    	LD	C,(IX+%C)
0B1E3B 0600                A  6617    	LD	B,%0
0B1E3D C5                  A  6618    	PUSH	BC
0B1E3E CD 67 05 0B         A  6619    	CALL	_clear_buffer
0B1E42 C1                  A  6620    	POP	BC
                           A  6621    ;  581				
                           A  6622    ;  582				for (y = bmp.bmp_height - 1
                           A  6623    .LINE 582
                           A  6624    
0B1E43 21A5FBFF            A  6625    	LD	HL,-1115
0B1E47 DDE5C1              A  6626    	LD	BC,IX
0B1E4A 09                  A  6627    	ADD	HL,BC
0B1E4B ED27                A  6628    	LD	HL,(HL)
0B1E4D 2B                  A  6629    	DEC	HL
0B1E4E DD75FA              A  6630    	LD	(IX+%FFFFFFFA),L
0B1E51 DD74FB              A  6631    	LD	(IX+%FFFFFFFB),H
0B1E54 C3 1D 1F 0B         A  6632    	JR	L_157
0B1E58                     A  6633    L_155:
                           A  6634    ;  583	
                           A  6635    ;  584					mos_fread(file, src, bm
                           A  6636    .LINE 584
                           A  6637    
0B1E58 DD07D2              A  6638    	LD	BC,(IX+%FFFFFFD2)
0B1E5B CD 22 39 0B         A  6639    	CALL	__stoiu
0B1E5F E5                  A  6640    	PUSH	HL
0B1E60 DD07E6              A  6641    	LD	BC,(IX+%FFFFFFE6)
0B1E63 C5                  A  6642    	PUSH	BC
0B1E64 DD4EFF              A  6643    	LD	C,(IX+%FFFFFFFF)
0B1E67 0600                A  6644    	LD	B,%0
0B1E69 C5                  A  6645    	PUSH	BC
0B1E6A CD C2 34 0B         A  6646    	CALL	_mos_fread
0B1E6E C1                  A  6647    	POP	BC
0B1E6F C1                  A  6648    	POP	BC
0B1E70 C1                  A  6649    	POP	BC
                           A  6650    ;  585					generic8888_to_rgba2222
                           A  6651    .LINE 585
                           A  6652    
0B1E71 01FFFFFF            A  6653    	LD	BC,16777215
0B1E75 C5                  A  6654    	PUSH	BC
0B1E76 01000000            A  6655    	LD	BC,0
0B1E7A C5                  A  6656    	PUSH	BC
0B1E7B 01010000            A  6657    	LD	BC,1
0B1E7F C5                  A  6658    	PUSH	BC
0B1E80 01020000            A  6659    	LD	BC,2
0B1E84 C5                  A  6660    	PUSH	BC
0B1E85 21A7FBFF            A  6661    	LD	HL,-1113
0B1E89 DDE5C1              A  6662    	LD	BC,IX
0B1E8C 09                  A  6663    	ADD	HL,BC
0B1E8D 7E                  A  6664    	LD	A,(HL)
0B1E8E B7ED62              A  6665    	UEXT	HL
0B1E91 6F                  A  6666    	LD	L,A
0B1E92 01080000            A  6667    	LD	BC,8
0B1E96 CD C6 3F 0B         A  6668    	CALL	__idivs
0B1E9A 4D                  A  6669    	LD	C,L
0B1E9B 0600                A  6670    	LD	B,%0
0B1E9D C5                  A  6671    	PUSH	BC
0B1E9E 21A3FBFF            A  6672    	LD	HL,-1117
0B1EA2 DDE5C1              A  6673    	LD	BC,IX
0B1EA5 09                  A  6674    	ADD	HL,BC
0B1EA6 ED07                A  6675    	LD	BC,(HL)
0B1EA8 CD 22 39 0B         A  6676    	CALL	__stoiu
0B1EAC E5                  A  6677    	PUSH	HL
0B1EAD DD07F7              A  6678    	LD	BC,(IX+%FFFFFFF7)
0B1EB0 C5                  A  6679    	PUSH	BC
0B1EB1 DD07E6              A  6680    	LD	BC,(IX+%FFFFFFE6)
0B1EB4 C5                  A  6681    	PUSH	BC
0B1EB5 CD A8 0A 0B         A  6682    	CALL	_generic8888_to_rgba2222
0B1EB9 FD211800 00         A  6683    	LD	IY,24
0B1EBE FD39                A  6684    	ADD	IY,SP
0B1EC0 FDF9                A  6685    	LD	SP,IY
                           A  6686    ;  586					add_stream_to_buffer(sl
                           A  6687    .LINE 586
                           A  6688    
0B1EC2 21A3FBFF            A  6689    	LD	HL,-1117
0B1EC6 DDE5C1              A  6690    	LD	BC,IX
0B1EC9 09                  A  6691    	ADD	HL,BC
0B1ECA ED07                A  6692    	LD	BC,(HL)
0B1ECC C5                  A  6693    	PUSH	BC
0B1ECD DD07F7              A  6694    	LD	BC,(IX+%FFFFFFF7)
0B1ED0 C5                  A  6695    	PUSH	BC
0B1ED1 DD4E0C              A  6696    	LD	C,(IX+%C)
0B1ED4 0600                A  6697    	LD	B,%0
0B1ED6 C5                  A  6698    	PUSH	BC
0B1ED7 CD DB 05 0B         A  6699    	CALL	_add_stream_to_buffer
0B1EDB C1                  A  6700    	POP	BC
0B1EDC C1                  A  6701    	POP	BC
0B1EDD C1                  A  6702    	POP	BC
                           A  6703    ;  587					mos_flseek(file, fo -> 
                           A  6704    .LINE 587
                           A  6705    
0B1EDE DD07D2              A  6706    	LD	BC,(IX+%FFFFFFD2)
0B1EE1 CD 22 39 0B         A  6707    	CALL	__stoiu
0B1EE5 29                  A  6708    	ADD	HL,HL
0B1EE6 E5D1                A  6709    	LD	DE,HL
0B1EE8 DD07D0              A  6710    	LD	BC,(IX+%FFFFFFD0)
0B1EEB CD 22 39 0B         A  6711    	CALL	__stoiu
0B1EEF 19                  A  6712    	ADD	HL,DE
0B1EF0 E5C1                A  6713    	LD	BC,HL
0B1EF2 CD FF 3F 0B         A  6714    	CALL	__itol
0B1EF6 DD31F0              A  6715    	LD	IY,(IX+%FFFFFFF0)
0B1EF9 FD2711              A  6716    	LD	HL,(IY+%11)
0B1EFC FD5E14              A  6717    	LD	E,(IY+%14)
0B1EFF CD 17 3D 0B         A  6718    	CALL	__lsub
0B1F03 4B                  A  6719    	LD	C,E
0B1F04 0600                A  6720    	LD	B,%0
0B1F06 C5                  A  6721    	PUSH	BC
0B1F07 E5                  A  6722    	PUSH	HL
0B1F08 DD4EFF              A  6723    	LD	C,(IX+%FFFFFFFF)
0B1F0B C5                  A  6724    	PUSH	BC
0B1F0C CD FC 34 0B         A  6725    	CALL	_mos_flseek
0B1F10 C1                  A  6726    	POP	BC
0B1F11 C1                  A  6727    	POP	BC
0B1F12 C1                  A  6728    	POP	BC
0B1F13 DD27FA              A  6729    	LD	HL,(IX+%FFFFFFFA)
0B1F16 2B                  A  6730    	DEC	HL
0B1F17 DD75FA              A  6731    	LD	(IX+%FFFFFFFA),L
0B1F1A DD74FB              A  6732    	LD	(IX+%FFFFFFFB),H
                           A  6733    ;  588	
                           A  6734    ;  589				}		
0B1F1D                     A  6735    L_157:
                           A  6736    .LINE 589
                           A  6737    
0B1F1D 49010000            A  6738    	LD.LIS	BC,0
0B1F21 DD27FA              A  6739    	LD	HL,(IX+%FFFFFFFA)
0B1F24 B7                  A  6740    	OR	A,A
0B1F25 40ED42              A  6741    	SBC.SIS	HL,BC
0B1F28 F2 32 1F 0B         A  6742    	JP	P,L__129
0B1F2C EA 58 1E 0B         A  6743    	JP	PE,L_155
0B1F30 18 04               A  6744    	JR	L__130
0B1F32                     A  6745    L__129:
0B1F32 E2 58 1E 0B         A  6746    	JP	PO,L_155
0B1F36                     A  6747    L__130:
                           A  6748    ;  590				free(src);
                           A  6749    .LINE 590
                           A  6750    
0B1F36 DD07E6              A  6751    	LD	BC,(IX+%FFFFFFE6)
0B1F39 C5                  A  6752    	PUSH	BC
0B1F3A CD 46 35 0B         A  6753    	CALL	_free
0B1F3E C1                  A  6754    	POP	BC
                           A  6755    ;  591			
                           A  6756    ;  592			}
                           A  6757    ;  593		}
0B1F3F                     A  6758    L_165:
                           A  6759    .LINE 593
                           A  6760    
                           A  6761    ;  594		
                           A  6762    ;  595		assign_buffer_to_bitmap(slot,1,bmp.
                           A  6763    .LINE 595
                           A  6764    
0B1F3F 21A5FBFF            A  6765    	LD	HL,-1115
0B1F43 DDE5C1              A  6766    	LD	BC,IX
0B1F46 09                  A  6767    	ADD	HL,BC
0B1F47 ED07                A  6768    	LD	BC,(HL)
0B1F49 C5                  A  6769    	PUSH	BC
0B1F4A 21A3FBFF            A  6770    	LD	HL,-1117
0B1F4E DDE5C1              A  6771    	LD	BC,IX
0B1F51 09                  A  6772    	ADD	HL,BC
0B1F52 ED07                A  6773    	LD	BC,(HL)
0B1F54 C5                  A  6774    	PUSH	BC
0B1F55 01010000            A  6775    	LD	BC,1
0B1F59 C5                  A  6776    	PUSH	BC
0B1F5A DD4E0C              A  6777    	LD	C,(IX+%C)
0B1F5D 0600                A  6778    	LD	B,%0
0B1F5F C5                  A  6779    	PUSH	BC
0B1F60 CD 70 06 0B         A  6780    	CALL	_assign_buffer_to_bitmap
0B1F64 C1                  A  6781    	POP	BC
0B1F65 C1                  A  6782    	POP	BC
0B1F66 C1                  A  6783    	POP	BC
0B1F67 C1                  A  6784    	POP	BC
                           A  6785    ;  596		free(row_rgba2222);
                           A  6786    .LINE 596
                           A  6787    
0B1F68 DD07F7              A  6788    	LD	BC,(IX+%FFFFFFF7)
0B1F6B C5                  A  6789    	PUSH	BC
0B1F6C CD 46 35 0B         A  6790    	CALL	_free
0B1F70 C1                  A  6791    	POP	BC
                           A  6792    ;  597		
                           A  6793    ;  598		mos_fclose(file);
                           A  6794    .LINE 598
                           A  6795    
0B1F71 DD4EFF              A  6796    	LD	C,(IX+%FFFFFFFF)
0B1F74 0600                A  6797    	LD	B,%0
0B1F76 C5                  A  6798    	PUSH	BC
0B1F77 CD AD 33 0B         A  6799    	CALL	_mos_fclose
0B1F7B C1                  A  6800    	POP	BC
                           A  6801    ;  599		return bmp;
                           A  6802    .LINE 599
                           A  6803    
0B1F7C ED2206              A  6804    	LEA	HL,IX+%6
0B1F7F ED17                A  6805    	LD	DE,(HL)
0B1F81 DDE5E1              A  6806    	LD	HL,IX
0B1F84 01A3FBFF            A  6807    	LD	BC,-1117
0B1F88 09                  A  6808    	ADD	HL,BC
0B1F89 01310400            A  6809    	LD	BC,1073
0B1F8D EDB0                A  6810    	LDIR	
0B1F8F DD2706              A  6811    	LD	HL,(IX+%6)
                           A  6812    ;  600		
                           A  6813    ;  601	}
0B1F92                     A  6814    L_166:
                           A  6815    .LINE 601
                           A  6816    
0B1F92 DDF9                A  6817    	LD	SP,IX
0B1F94 DDE1                A  6818    	POP	IX
0B1F96 C9                  A  6819    	RET	
                           A  6820    
                           A  6821    
                           A  6822    ;**************************** _load_bmp_clean *
                           A  6823    ;Name                         Addr/Register   S
                           A  6824    ;_mos_fclose                         IMPORT  --
                           A  6825    ;_mos_fgetc                          IMPORT  --
                           A  6826    ;_free                               IMPORT  --
                           A  6827    ;_mos_flseek                         IMPORT  --
                           A  6828    ;_malloc                             IMPORT  --
                           A  6829    ;_mos_fread                          IMPORT  --
                           A  6830    ;___print_sendstring                 IMPORT  --
                           A  6831    ;___print_xputch                     IMPORT    
                           A  6832    ;___print_uputch                     IMPORT  --
                           A  6833    ;_mos_getfil                         IMPORT  --
                           A  6834    ;_mos_fopen                          IMPORT  --
                           A  6835    ;_memset                             IMPORT  --
                           A  6836    ;bmp                                IX-1117   1
                           A  6837    ;initial_header                       IX-44    
                           A  6838    ;src                                  IX-26    
                           A  6839    ;r                                    IX-23    
                           A  6840    ;g                                    IX-22    
                           A  6841    ;b                                    IX-21    
                           A  6842    ;index                                IX-20    
                           A  6843    ;src                                  IX-19    
                           A  6844    ;fo                                   IX-16    
                           A  6845    ;y                                    IX-13    
                           A  6846    ;x                                    IX-11    
                           A  6847    ;row_rgba2222                          IX-9    
                           A  6848    ;y                                     IX-6    
                           A  6849    ;main_header                           IX-4    
                           A  6850    ;file                                  IX-1    
                           A  6851    ;slot                                 IX+12    
                           A  6852    ;filename                              IX+9    
                           A  6853    
                           A  6854    
                           A  6855    ; Stack Frame Size: 1150 (bytes)
                           A  6856    ;       Spill Code: -3 (instruction)
                           A  6857    
                           A  6858    
                           A  6859    .ENDFUNC "load_bmp_clean",601,"_load_bmp_clean"
                           A  6860    	SEGMENT STRSECT
0B449C                     A  6861    L__102:
0B449C 4572726F 723A2063   A  6862    	DB	"Error: could not open "
0B44A4 6F756C64 206E6F74 
0B44AC 206F7065 6E20 
0B44B2 00                  A  6863    	DB	0
0B44B3                     A  6864    L__103:
0B44B3 2E                  A  6865    	DB	"."
0B44B4 0D0A00              A  6866    	DB	13,10,0
0B44B7                     A  6867    L__109:
0B44B7 4E6F6E20 7374616E   A  6868    	DB	"Non standard BMP compression, exiting.
0B44BF 64617264 20424D50 
0B44C7 20636F6D 70726573 
0B44CF 73696F6E 2C206578 
0B44D7 6974696E 672E 
0B44DD 0D0A00              A  6869    	DB	13,10,0
0B44E0                     A  6870    L__114:
0B44E0 31362D62 69742042   A  6871    	DB	"16-bit BMP files not supported, use 8-
0B44E8 4D502066 696C6573 
0B44F0 206E6F74 20737570 
0B44F8 706F7274 65642C20 
0B4500 75736520 382D6269 
0B4508 74202873 6D616C6C 
0B4510 292C2032 342D6269 
0B4518 74202866 61737429 
0B4520 206F7220 33322D62 
0B4528 69742028 616C7068 
0B4530 612D656E 61626C65 
0B4538 64292E 
0B453B 0D0A00              A  6872    	DB	13,10,0
0B453E                     A  6873    L__119:
0B453E 31362D62 69742042   A  6874    	DB	"16-bit BMP files not supported, use 8-
0B4546 4D502066 696C6573 
0B454E 206E6F74 20737570 
0B4556 706F7274 65642C20 
0B455E 75736520 382D6269 
0B4566 74202873 6D616C6C 
0B456E 292C2032 342D6269 
0B4576 74202866 61737429 
0B457E 206F7220 33322D62 
0B4586 69742028 616C7068 
0B458E 612D656E 61626C65 
0B4596 64292E 
0B4599 0D0A00              A  6875    	DB	13,10,0
                           A  6876    	SEGMENT CODE
                           A  6877    ;  602	
                           A  6878    ;  603	uint16_t strtou16(const char *str) {
0B1F97                     A  6879    _strtou16:
                           A  6880    .DEFINE "_strtou16"
                           A  6881    
                           A  6882    .VALUE _strtou16
                           A  6883    
                           A  6884    .CLASS 2
                           A  6885    
                           A  6886    .TYPE 77
                           A  6887    
                           A  6888    .ENDEF
                           A  6889    
                           A  6890    .BEGFUNC "strtou16",603,"_strtou16"
                           A  6891    
                           A  6892    .LINE 603
                           A  6893    
                           A  6894    .DEFINE "str"
                           A  6895    
                           A  6896    .CLASS 65
                           A  6897    
                           A  6898    .VALUE 6
                           A  6899    
                           A  6900    .TYPE 194
                           A  6901    
                           A  6902    .ENDEF
                           A  6903    
                           A  6904    .DEFINE "result"
                           A  6905    
                           A  6906    .CLASS 65
                           A  6907    
                           A  6908    .VALUE -2
                           A  6909    
                           A  6910    .TYPE 13
                           A  6911    
                           A  6912    .ENDEF
                           A  6913    
                           A  6914    .DEFINE "digit"
                           A  6915    
                           A  6916    .CLASS 65
                           A  6917    
                           A  6918    .VALUE -4
                           A  6919    
                           A  6920    .TYPE 13
                           A  6921    
                           A  6922    .ENDEF
                           A  6923    
0B1F97 DDE5                A  6924    	PUSH	IX
0B1F99 DD210000 00         A  6925    	LD	IX,0
0B1F9E DD39                A  6926    	ADD	IX,SP
0B1FA0 C5                  A  6927    	PUSH	BC
0B1FA1 3B                  A  6928    	DEC	SP
                           A  6929    ;  604	    uint16_t result = 0;
                           A  6930    .LINE 604
                           A  6931    
0B1FA2 DD36FE00            A  6932    	LD	(IX+%FFFFFFFE),%0
0B1FA6 DD36FF00            A  6933    	LD	(IX+%FFFFFFFF),%0
                           A  6934    ;  605	    const uint16_t maxDiv10 = 6553;  //
                           A  6935    ;  606	    const uint16_t maxMod10 = 5;     //
                           A  6936    ;  607	
                           A  6937    ;  608	    while (*str == ' ' || *str == '\t' 
                           A  6938    .LINE 608
                           A  6939    
0B1FAA 18 07               A  6940    	JR	L_170
0B1FAC                     A  6941    L_171:
                           A  6942    ;  609	        str++;
                           A  6943    .LINE 609
                           A  6944    
0B1FAC DD0706              A  6945    	LD	BC,(IX+%6)
0B1FAF 03                  A  6946    	INC	BC
0B1FB0 DD0F06              A  6947    	LD	(IX+%6),BC
                           A  6948    ;  610	    }
0B1FB3                     A  6949    L_170:
                           A  6950    .LINE 610
                           A  6951    
0B1FB3 DD2706              A  6952    	LD	HL,(IX+%6)
0B1FB6 7E                  A  6953    	LD	A,(HL)
0B1FB7 47                  A  6954    	LD	B,A
0B1FB8 17ED62              A  6955    	SEXT	HL
0B1FBB 68                  A  6956    	LD	L,B
0B1FBC 01200000            A  6957    	LD	BC,32
0B1FC0 B7                  A  6958    	OR	A,A
0B1FC1 ED42                A  6959    	SBC	HL,BC
0B1FC3 28 E7               A  6960    	JR	Z,L_171
0B1FC5 DD2706              A  6961    	LD	HL,(IX+%6)
0B1FC8 7E                  A  6962    	LD	A,(HL)
0B1FC9 47                  A  6963    	LD	B,A
0B1FCA 17ED62              A  6964    	SEXT	HL
0B1FCD 68                  A  6965    	LD	L,B
0B1FCE 01090000            A  6966    	LD	BC,9
0B1FD2 B7                  A  6967    	OR	A,A
0B1FD3 ED42                A  6968    	SBC	HL,BC
0B1FD5 28 D5               A  6969    	JR	Z,L_171
0B1FD7 DD2706              A  6970    	LD	HL,(IX+%6)
0B1FDA 7E                  A  6971    	LD	A,(HL)
0B1FDB 47                  A  6972    	LD	B,A
0B1FDC 17ED62              A  6973    	SEXT	HL
0B1FDF 68                  A  6974    	LD	L,B
0B1FE0 010A0000            A  6975    	LD	BC,10
0B1FE4 B7                  A  6976    	OR	A,A
0B1FE5 ED42                A  6977    	SBC	HL,BC
0B1FE7 28 C3               A  6978    	JR	Z,L_171
                           A  6979    ;  611	
                           A  6980    ;  612	    while (*str >= '0' && *str <= '9') 
                           A  6981    .LINE 612
                           A  6982    
0B1FE9 18 5F               A  6983    	JR	L_178
0B1FEB                     A  6984    L_179:
                           A  6985    ;  613	        uint16_t digit = *str - '0';
                           A  6986    .LINE 613
                           A  6987    
0B1FEB DD2706              A  6988    	LD	HL,(IX+%6)
0B1FEE 7E                  A  6989    	LD	A,(HL)
0B1FEF 47                  A  6990    	LD	B,A
0B1FF0 17ED62              A  6991    	SEXT	HL
0B1FF3 68                  A  6992    	LD	L,B
0B1FF4 E5FDE1              A  6993    	LD	IY,HL
0B1FF7 ED23D0              A  6994    	LEA	HL,IY+%FFFFFFD0
0B1FFA DD75FC              A  6995    	LD	(IX+%FFFFFFFC),L
0B1FFD DD74FD              A  6996    	LD	(IX+%FFFFFFFD),H
                           A  6997    ;  614	        if (result > maxDiv10 || (resul
                           A  6998    .LINE 614
                           A  6999    
0B2000 DD07FE              A  7000    	LD	BC,(IX+%FFFFFFFE)
0B2003 49219919            A  7001    	LD.LIS	HL,6553
0B2007 B7                  A  7002    	OR	A,A
0B2008 40ED42              A  7003    	SBC.SIS	HL,BC
0B200B 38 1A               A  7004    	JR	C,L_175
0B200D 49019919            A  7005    	LD.LIS	BC,6553
0B2011 DD27FE              A  7006    	LD	HL,(IX+%FFFFFFFE)
0B2014 B7                  A  7007    	OR	A,A
0B2015 40ED42              A  7008    	SBC.SIS	HL,BC
0B2018 20 13               A  7009    	JR	NZ,L_176
0B201A DD07FC              A  7010    	LD	BC,(IX+%FFFFFFFC)
0B201D 49210500            A  7011    	LD.LIS	HL,5
0B2021 B7                  A  7012    	OR	A,A
0B2022 40ED42              A  7013    	SBC.SIS	HL,BC
0B2025 30 06               A  7014    	JR	NC,L_176
0B2027                     A  7015    L_175:
                           A  7016    ;  615	            return 65535;
                           A  7017    .LINE 615
                           A  7018    
0B2027 4921FFFF            A  7019    	LD.LIS	HL,65535
0B202B 18 5E               A  7020    	JR	L_182
                           A  7021    ;  616	        }
0B202D                     A  7022    L_176:
                           A  7023    .LINE 616
                           A  7024    
                           A  7025    ;  617	        result = result * 10 + digit;
                           A  7026    .LINE 617
                           A  7027    
0B202D 49210A00            A  7028    	LD.LIS	HL,10
0B2031 DD07FE              A  7029    	LD	BC,(IX+%FFFFFFFE)
0B2034 CD 5D 42 0B         A  7030    	CALL	__smulu
0B2038 DD07FC              A  7031    	LD	BC,(IX+%FFFFFFFC)
0B203B 4009                A  7032    	ADD.SIS	HL,BC
0B203D DD75FE              A  7033    	LD	(IX+%FFFFFFFE),L
0B2040 DD74FF              A  7034    	LD	(IX+%FFFFFFFF),H
                           A  7035    ;  618	        str++;
                           A  7036    .LINE 618
                           A  7037    
0B2043 DD0706              A  7038    	LD	BC,(IX+%6)
0B2046 03                  A  7039    	INC	BC
0B2047 DD0F06              A  7040    	LD	(IX+%6),BC
                           A  7041    ;  619	    }
0B204A                     A  7042    L_178:
                           A  7043    .LINE 619
                           A  7044    
0B204A DD2706              A  7045    	LD	HL,(IX+%6)
0B204D 7E                  A  7046    	LD	A,(HL)
0B204E 47                  A  7047    	LD	B,A
0B204F 17ED62              A  7048    	SEXT	HL
0B2052 68                  A  7049    	LD	L,B
0B2053 01300000            A  7050    	LD	BC,48
0B2057 B7                  A  7051    	OR	A,A
0B2058 ED42                A  7052    	SBC	HL,BC
0B205A FA 64 20 0B         A  7053    	JP	M,L__140
0B205E EA 88 20 0B         A  7054    	JP	PE,L_181
0B2062 18 04               A  7055    	JR	L__141
0B2064                     A  7056    L__140:
0B2064 E2 88 20 0B         A  7057    	JP	PO,L_181
0B2068                     A  7058    L__141:
0B2068 DD2706              A  7059    	LD	HL,(IX+%6)
0B206B 7E                  A  7060    	LD	A,(HL)
0B206C 47                  A  7061    	LD	B,A
0B206D 17ED62              A  7062    	SEXT	HL
0B2070 68                  A  7063    	LD	L,B
0B2071 E5C1                A  7064    	LD	BC,HL
0B2073 21390000            A  7065    	LD	HL,57
0B2077 B7                  A  7066    	OR	A,A
0B2078 ED42                A  7067    	SBC	HL,BC
0B207A F2 84 20 0B         A  7068    	JP	P,L__142
0B207E EA EB 1F 0B         A  7069    	JP	PE,L_179
0B2082 18 04               A  7070    	JR	L__143
0B2084                     A  7071    L__142:
0B2084 E2 EB 1F 0B         A  7072    	JP	PO,L_179
0B2088                     A  7073    L__143:
0B2088                     A  7074    L_181:
                           A  7075    ;  620	
                           A  7076    ;  621	    return result;
                           A  7077    .LINE 621
                           A  7078    
0B2088 DD27FE              A  7079    	LD	HL,(IX+%FFFFFFFE)
                           A  7080    ;  622	}
0B208B                     A  7081    L_182:
                           A  7082    .LINE 622
                           A  7083    
0B208B DDF9                A  7084    	LD	SP,IX
0B208D DDE1                A  7085    	POP	IX
0B208F C9                  A  7086    	RET	
                           A  7087    
                           A  7088    
                           A  7089    ;**************************** _strtou16 *******
                           A  7090    ;Name                         Addr/Register   S
                           A  7091    ;digit                                 IX-4    
                           A  7092    ;result                                IX-2    
                           A  7093    ;str                                   IX+6    
                           A  7094    
                           A  7095    
                           A  7096    ; Stack Frame Size: 13 (bytes)
                           A  7097    ;       Spill Code: -3 (instruction)
                           A  7098    
                           A  7099    
                           A  7100    .ENDFUNC "strtou16",622,"_strtou16"
                           A  7101    ;  623	
                           A  7102    ;  624	uint8_t strtou8(const char *str) {
0B2090                     A  7103    _strtou8:
                           A  7104    .DEFINE "_strtou8"
                           A  7105    
                           A  7106    .VALUE _strtou8
                           A  7107    
                           A  7108    .CLASS 2
                           A  7109    
                           A  7110    .TYPE 76
                           A  7111    
                           A  7112    .ENDEF
                           A  7113    
                           A  7114    .BEGFUNC "strtou8",624,"_strtou8"
                           A  7115    
                           A  7116    .LINE 624
                           A  7117    
                           A  7118    .DEFINE "str"
                           A  7119    
                           A  7120    .CLASS 65
                           A  7121    
                           A  7122    .VALUE 6
                           A  7123    
                           A  7124    .TYPE 194
                           A  7125    
                           A  7126    .ENDEF
                           A  7127    
                           A  7128    .DEFINE "result"
                           A  7129    
                           A  7130    .CLASS 65
                           A  7131    
                           A  7132    .VALUE -1
                           A  7133    
                           A  7134    .TYPE 12
                           A  7135    
                           A  7136    .ENDEF
                           A  7137    
                           A  7138    .DEFINE "digit"
                           A  7139    
                           A  7140    .CLASS 65
                           A  7141    
                           A  7142    .VALUE -2
                           A  7143    
                           A  7144    .TYPE 12
                           A  7145    
                           A  7146    .ENDEF
                           A  7147    
0B2090 DDE5                A  7148    	PUSH	IX
0B2092 DD210000 00         A  7149    	LD	IX,0
0B2097 DD39                A  7150    	ADD	IX,SP
0B2099 3B                  A  7151    	DEC	SP
0B209A 3B                  A  7152    	DEC	SP
                           A  7153    ;  625	    uint8_t result = 0;
                           A  7154    .LINE 625
                           A  7155    
0B209B DD36FF00            A  7156    	LD	(IX+%FFFFFFFF),%0
                           A  7157    ;  626	    const uint8_t maxDiv10 = 255 / 10;
                           A  7158    ;  627	    const uint8_t maxMod10 = 255 % 10;
                           A  7159    ;  628	
                           A  7160    ;  629	    while (*str == ' ' || *str == '\t' 
                           A  7161    .LINE 629
                           A  7162    
0B209F 18 07               A  7163    	JR	L_186
0B20A1                     A  7164    L_187:
                           A  7165    ;  630	        str++;
                           A  7166    .LINE 630
                           A  7167    
0B20A1 DD0706              A  7168    	LD	BC,(IX+%6)
0B20A4 03                  A  7169    	INC	BC
0B20A5 DD0F06              A  7170    	LD	(IX+%6),BC
                           A  7171    ;  631	    }
0B20A8                     A  7172    L_186:
                           A  7173    .LINE 631
                           A  7174    
0B20A8 DD2706              A  7175    	LD	HL,(IX+%6)
0B20AB 7E                  A  7176    	LD	A,(HL)
0B20AC 47                  A  7177    	LD	B,A
0B20AD 17ED62              A  7178    	SEXT	HL
0B20B0 68                  A  7179    	LD	L,B
0B20B1 01200000            A  7180    	LD	BC,32
0B20B5 B7                  A  7181    	OR	A,A
0B20B6 ED42                A  7182    	SBC	HL,BC
0B20B8 28 E7               A  7183    	JR	Z,L_187
0B20BA DD2706              A  7184    	LD	HL,(IX+%6)
0B20BD 7E                  A  7185    	LD	A,(HL)
0B20BE 47                  A  7186    	LD	B,A
0B20BF 17ED62              A  7187    	SEXT	HL
0B20C2 68                  A  7188    	LD	L,B
0B20C3 01090000            A  7189    	LD	BC,9
0B20C7 B7                  A  7190    	OR	A,A
0B20C8 ED42                A  7191    	SBC	HL,BC
0B20CA 28 D5               A  7192    	JR	Z,L_187
0B20CC DD2706              A  7193    	LD	HL,(IX+%6)
0B20CF 7E                  A  7194    	LD	A,(HL)
0B20D0 47                  A  7195    	LD	B,A
0B20D1 17ED62              A  7196    	SEXT	HL
0B20D4 68                  A  7197    	LD	L,B
0B20D5 010A0000            A  7198    	LD	BC,10
0B20D9 B7                  A  7199    	OR	A,A
0B20DA ED42                A  7200    	SBC	HL,BC
0B20DC 28 C3               A  7201    	JR	Z,L_187
                           A  7202    ;  632	
                           A  7203    ;  633	    while (*str >= '0' && *str <= '9') 
                           A  7204    .LINE 633
                           A  7205    
0B20DE 18 37               A  7206    	JR	L_194
0B20E0                     A  7207    L_195:
                           A  7208    ;  634	        uint8_t digit = *str - '0';
                           A  7209    .LINE 634
                           A  7210    
0B20E0 DD2706              A  7211    	LD	HL,(IX+%6)
0B20E3 7E                  A  7212    	LD	A,(HL)
0B20E4 D630                A  7213    	SUB	A,%30
0B20E6 DD77FE              A  7214    	LD	(IX+%FFFFFFFE),A
                           A  7215    ;  635	        if (result > maxDiv10 || (resul
                           A  7216    .LINE 635
                           A  7217    
0B20E9 3E19                A  7218    	LD	A,%19
0B20EB DDBEFF              A  7219    	CP	A,(IX+%FFFFFFFF)
0B20EE 38 0E               A  7220    	JR	C,L_191
0B20F0 DD7EFF              A  7221    	LD	A,(IX+%FFFFFFFF)
0B20F3 FE19                A  7222    	CP	A,%19
0B20F5 20 0B               A  7223    	JR	NZ,L_192
0B20F7 3E05                A  7224    	LD	A,%5
0B20F9 DDBEFE              A  7225    	CP	A,(IX+%FFFFFFFE)
0B20FC 30 04               A  7226    	JR	NC,L_192
0B20FE                     A  7227    L_191:
                           A  7228    ;  636	            return 255;
                           A  7229    .LINE 636
                           A  7230    
0B20FE 3EFF                A  7231    	LD	A,%FF
0B2100 18 56               A  7232    	JR	L_198
                           A  7233    ;  637	        }
0B2102                     A  7234    L_192:
                           A  7235    .LINE 637
                           A  7236    
                           A  7237    ;  638	        result = result * 10 + digit;
                           A  7238    .LINE 638
                           A  7239    
0B2102 060A                A  7240    	LD	B,%A
0B2104 DD4EFF              A  7241    	LD	C,(IX+%FFFFFFFF)
0B2107 ED4C                A  7242    	MLT	BC
0B2109 79                  A  7243    	LD	A,C
0B210A DD86FE              A  7244    	ADD	A,(IX+%FFFFFFFE)
0B210D DD77FF              A  7245    	LD	(IX+%FFFFFFFF),A
                           A  7246    ;  639	        str++;
                           A  7247    .LINE 639
                           A  7248    
0B2110 DD0706              A  7249    	LD	BC,(IX+%6)
0B2113 03                  A  7250    	INC	BC
0B2114 DD0F06              A  7251    	LD	(IX+%6),BC
                           A  7252    ;  640	    }
0B2117                     A  7253    L_194:
                           A  7254    .LINE 640
                           A  7255    
0B2117 DD2706              A  7256    	LD	HL,(IX+%6)
0B211A 7E                  A  7257    	LD	A,(HL)
0B211B 47                  A  7258    	LD	B,A
0B211C 17ED62              A  7259    	SEXT	HL
0B211F 68                  A  7260    	LD	L,B
0B2120 01300000            A  7261    	LD	BC,48
0B2124 B7                  A  7262    	OR	A,A
0B2125 ED42                A  7263    	SBC	HL,BC
0B2127 FA 31 21 0B         A  7264    	JP	M,L__153
0B212B EA 55 21 0B         A  7265    	JP	PE,L_197
0B212F 18 04               A  7266    	JR	L__154
0B2131                     A  7267    L__153:
0B2131 E2 55 21 0B         A  7268    	JP	PO,L_197
0B2135                     A  7269    L__154:
0B2135 DD2706              A  7270    	LD	HL,(IX+%6)
0B2138 7E                  A  7271    	LD	A,(HL)
0B2139 47                  A  7272    	LD	B,A
0B213A 17ED62              A  7273    	SEXT	HL
0B213D 68                  A  7274    	LD	L,B
0B213E E5C1                A  7275    	LD	BC,HL
0B2140 21390000            A  7276    	LD	HL,57
0B2144 B7                  A  7277    	OR	A,A
0B2145 ED42                A  7278    	SBC	HL,BC
0B2147 F2 51 21 0B         A  7279    	JP	P,L__155
0B214B EA E0 20 0B         A  7280    	JP	PE,L_195
0B214F 18 04               A  7281    	JR	L__156
0B2151                     A  7282    L__155:
0B2151 E2 E0 20 0B         A  7283    	JP	PO,L_195
0B2155                     A  7284    L__156:
0B2155                     A  7285    L_197:
                           A  7286    ;  641	
                           A  7287    ;  642	    return result;
                           A  7288    .LINE 642
                           A  7289    
0B2155 DD7EFF              A  7290    	LD	A,(IX+%FFFFFFFF)
                           A  7291    ;  643	}
0B2158                     A  7292    L_198:
                           A  7293    .LINE 643
                           A  7294    
0B2158 DDF9                A  7295    	LD	SP,IX
0B215A DDE1                A  7296    	POP	IX
0B215C C9                  A  7297    	RET	
                           A  7298    
                           A  7299    
                           A  7300    ;**************************** _strtou8 ********
                           A  7301    ;Name                         Addr/Register   S
                           A  7302    ;digit                                 IX-2    
                           A  7303    ;result                                IX-1    
                           A  7304    ;str                                   IX+6    
                           A  7305    
                           A  7306    
                           A  7307    ; Stack Frame Size: 11 (bytes)
                           A  7308    ;       Spill Code: -3 (instruction)
                           A  7309    
                           A  7310    
                           A  7311    .ENDFUNC "strtou8",643,"_strtou8"
                           A  7312    ;  644	
                           A  7313    ;  645	uint24_t strtou24(const char *str) {
0B215D                     A  7314    _strtou24:
                           A  7315    .DEFINE "_strtou24"
                           A  7316    
                           A  7317    .VALUE _strtou24
                           A  7318    
                           A  7319    .CLASS 2
                           A  7320    
                           A  7321    .TYPE 78
                           A  7322    
                           A  7323    .ENDEF
                           A  7324    
                           A  7325    .BEGFUNC "strtou24",645,"_strtou24"
                           A  7326    
                           A  7327    .LINE 645
                           A  7328    
                           A  7329    .DEFINE "str"
                           A  7330    
                           A  7331    .CLASS 65
                           A  7332    
                           A  7333    .VALUE 6
                           A  7334    
                           A  7335    .TYPE 194
                           A  7336    
                           A  7337    .ENDEF
                           A  7338    
                           A  7339    .DEFINE "result"
                           A  7340    
                           A  7341    .CLASS 65
                           A  7342    
                           A  7343    .VALUE -4
                           A  7344    
                           A  7345    .TYPE 15
                           A  7346    
                           A  7347    .ENDEF
                           A  7348    
                           A  7349    .DEFINE "digit"
                           A  7350    
                           A  7351    .CLASS 65
                           A  7352    
                           A  7353    .VALUE -8
                           A  7354    
                           A  7355    .TYPE 15
                           A  7356    
                           A  7357    .ENDEF
                           A  7358    
0B215D DDE5                A  7359    	PUSH	IX
0B215F DD210000 00         A  7360    	LD	IX,0
0B2164 DD39                A  7361    	ADD	IX,SP
0B2166 C5                  A  7362    	PUSH	BC
0B2167 C5                  A  7363    	PUSH	BC
0B2168 3B                  A  7364    	DEC	SP
0B2169 3B                  A  7365    	DEC	SP
                           A  7366    ;  646	    uint32_t result = 0;
                           A  7367    .LINE 646
                           A  7368    
0B216A 01000000            A  7369    	LD	BC,0
0B216E AF                  A  7370    	XOR	A,A
0B216F DD0FFC              A  7371    	LD	(IX+%FFFFFFFC),BC
0B2172 DD77FF              A  7372    	LD	(IX+%FFFFFFFF),A
                           A  7373    ;  647	    const uint32_t maxDiv10 = 1677721;
                           A  7374    ;  648	    const uint32_t maxMod10 = 5;
                           A  7375    ;  649	
                           A  7376    ;  650	    while (*str == ' ' || *str == '\t' 
                           A  7377    .LINE 650
                           A  7378    
0B2175 18 07               A  7379    	JR	L_202
0B2177                     A  7380    L_203:
                           A  7381    ;  651	        str++;
                           A  7382    .LINE 651
                           A  7383    
0B2177 DD0706              A  7384    	LD	BC,(IX+%6)
0B217A 03                  A  7385    	INC	BC
0B217B DD0F06              A  7386    	LD	(IX+%6),BC
                           A  7387    ;  652	    }
0B217E                     A  7388    L_202:
                           A  7389    .LINE 652
                           A  7390    
0B217E DD2706              A  7391    	LD	HL,(IX+%6)
0B2181 7E                  A  7392    	LD	A,(HL)
0B2182 47                  A  7393    	LD	B,A
0B2183 17ED62              A  7394    	SEXT	HL
0B2186 68                  A  7395    	LD	L,B
0B2187 01200000            A  7396    	LD	BC,32
0B218B B7                  A  7397    	OR	A,A
0B218C ED42                A  7398    	SBC	HL,BC
0B218E 28 E7               A  7399    	JR	Z,L_203
0B2190 DD2706              A  7400    	LD	HL,(IX+%6)
0B2193 7E                  A  7401    	LD	A,(HL)
0B2194 47                  A  7402    	LD	B,A
0B2195 17ED62              A  7403    	SEXT	HL
0B2198 68                  A  7404    	LD	L,B
0B2199 01090000            A  7405    	LD	BC,9
0B219D B7                  A  7406    	OR	A,A
0B219E ED42                A  7407    	SBC	HL,BC
0B21A0 28 D5               A  7408    	JR	Z,L_203
0B21A2 DD2706              A  7409    	LD	HL,(IX+%6)
0B21A5 7E                  A  7410    	LD	A,(HL)
0B21A6 47                  A  7411    	LD	B,A
0B21A7 17ED62              A  7412    	SEXT	HL
0B21AA 68                  A  7413    	LD	L,B
0B21AB 010A0000            A  7414    	LD	BC,10
0B21AF B7                  A  7415    	OR	A,A
0B21B0 ED42                A  7416    	SBC	HL,BC
0B21B2 28 C3               A  7417    	JR	Z,L_203
                           A  7418    ;  653		
                           A  7419    ;  654	    while (*str >= '0' && *str <= '9') 
                           A  7420    .LINE 654
                           A  7421    
0B21B4 18 7A               A  7422    	JR	L_210
0B21B6                     A  7423    L_211:
                           A  7424    ;  655	        uint32_t digit = *str - '0';
                           A  7425    .LINE 655
                           A  7426    
0B21B6 DD2706              A  7427    	LD	HL,(IX+%6)
0B21B9 7E                  A  7428    	LD	A,(HL)
0B21BA 47                  A  7429    	LD	B,A
0B21BB 17ED62              A  7430    	SEXT	HL
0B21BE 68                  A  7431    	LD	L,B
0B21BF 5C                  A  7432    	LD	E,H
0B21C0 01300000            A  7433    	LD	BC,48
0B21C4 AF                  A  7434    	XOR	A,A
0B21C5 CD 17 3D 0B         A  7435    	CALL	__lsub
0B21C9 DD2FF8              A  7436    	LD	(IX+%FFFFFFF8),HL
0B21CC DD73FB              A  7437    	LD	(IX+%FFFFFFFB),E
                           A  7438    ;  656	        if (result > maxDiv10 || (resul
                           A  7439    .LINE 656
                           A  7440    
0B21CF 21999919            A  7441    	LD	HL,1677721
0B21D3 1E00                A  7442    	LD	E,%0
0B21D5 DD07FC              A  7443    	LD	BC,(IX+%FFFFFFFC)
0B21D8 DD7EFF              A  7444    	LD	A,(IX+%FFFFFFFF)
0B21DB CD 49 40 0B         A  7445    	CALL	__lcmpu
0B21DF 38 23               A  7446    	JR	C,L_207
0B21E1 DD27FC              A  7447    	LD	HL,(IX+%FFFFFFFC)
0B21E4 DD5EFF              A  7448    	LD	E,(IX+%FFFFFFFF)
0B21E7 01999919            A  7449    	LD	BC,1677721
0B21EB AF                  A  7450    	XOR	A,A
0B21EC CD 49 40 0B         A  7451    	CALL	__lcmpu
0B21F0 20 18               A  7452    	JR	NZ,L_208
0B21F2 21050000            A  7453    	LD	HL,5
0B21F6 1E00                A  7454    	LD	E,%0
0B21F8 DD07F8              A  7455    	LD	BC,(IX+%FFFFFFF8)
0B21FB DD7EFB              A  7456    	LD	A,(IX+%FFFFFFFB)
0B21FE CD 49 40 0B         A  7457    	CALL	__lcmpu
0B2202 30 06               A  7458    	JR	NC,L_208
0B2204                     A  7459    L_207:
                           A  7460    ;  657	            return 16777215;
                           A  7461    .LINE 657
                           A  7462    
0B2204 21FFFFFF            A  7463    	LD	HL,16777215
0B2208 18 67               A  7464    	JR	L_214
                           A  7465    ;  658	        }
0B220A                     A  7466    L_208:
                           A  7467    .LINE 658
                           A  7468    
                           A  7469    ;  659	        result = result * 10 + digit;
                           A  7470    .LINE 659
                           A  7471    
0B220A DD27FC              A  7472    	LD	HL,(IX+%FFFFFFFC)
0B220D DD5EFF              A  7473    	LD	E,(IX+%FFFFFFFF)
0B2210 010A0000            A  7474    	LD	BC,10
0B2214 AF                  A  7475    	XOR	A,A
0B2215 CD 72 42 0B         A  7476    	CALL	__lmulu
0B2219 DD07F8              A  7477    	LD	BC,(IX+%FFFFFFF8)
0B221C DD7EFB              A  7478    	LD	A,(IX+%FFFFFFFB)
0B221F CD 40 35 0B         A  7479    	CALL	__ladd
0B2223 DD2FFC              A  7480    	LD	(IX+%FFFFFFFC),HL
0B2226 DD73FF              A  7481    	LD	(IX+%FFFFFFFF),E
                           A  7482    ;  660	        str++;
                           A  7483    .LINE 660
                           A  7484    
0B2229 DD0706              A  7485    	LD	BC,(IX+%6)
0B222C 03                  A  7486    	INC	BC
0B222D DD0F06              A  7487    	LD	(IX+%6),BC
                           A  7488    ;  661	    }
0B2230                     A  7489    L_210:
                           A  7490    .LINE 661
                           A  7491    
0B2230 DD2706              A  7492    	LD	HL,(IX+%6)
0B2233 7E                  A  7493    	LD	A,(HL)
0B2234 47                  A  7494    	LD	B,A
0B2235 17ED62              A  7495    	SEXT	HL
0B2238 68                  A  7496    	LD	L,B
0B2239 01300000            A  7497    	LD	BC,48
0B223D B7                  A  7498    	OR	A,A
0B223E ED42                A  7499    	SBC	HL,BC
0B2240 FA 4A 22 0B         A  7500    	JP	M,L__166
0B2244 EA 6E 22 0B         A  7501    	JP	PE,L_213
0B2248 18 04               A  7502    	JR	L__167
0B224A                     A  7503    L__166:
0B224A E2 6E 22 0B         A  7504    	JP	PO,L_213
0B224E                     A  7505    L__167:
0B224E DD2706              A  7506    	LD	HL,(IX+%6)
0B2251 7E                  A  7507    	LD	A,(HL)
0B2252 47                  A  7508    	LD	B,A
0B2253 17ED62              A  7509    	SEXT	HL
0B2256 68                  A  7510    	LD	L,B
0B2257 E5C1                A  7511    	LD	BC,HL
0B2259 21390000            A  7512    	LD	HL,57
0B225D B7                  A  7513    	OR	A,A
0B225E ED42                A  7514    	SBC	HL,BC
0B2260 F2 6A 22 0B         A  7515    	JP	P,L__168
0B2264 EA B6 21 0B         A  7516    	JP	PE,L_211
0B2268 18 04               A  7517    	JR	L__169
0B226A                     A  7518    L__168:
0B226A E2 B6 21 0B         A  7519    	JP	PO,L_211
0B226E                     A  7520    L__169:
0B226E                     A  7521    L_213:
                           A  7522    ;  662	
                           A  7523    ;  663	    return result;
                           A  7524    .LINE 663
                           A  7525    
0B226E DD27FC              A  7526    	LD	HL,(IX+%FFFFFFFC)
                           A  7527    ;  664	}
0B2271                     A  7528    L_214:
                           A  7529    .LINE 664
                           A  7530    
0B2271 DDF9                A  7531    	LD	SP,IX
0B2273 DDE1                A  7532    	POP	IX
0B2275 C9                  A  7533    	RET	
                           A  7534    
                           A  7535    
                           A  7536    ;**************************** _strtou24 *******
                           A  7537    ;Name                         Addr/Register   S
                           A  7538    ;digit                                 IX-8    
                           A  7539    ;result                                IX-4    
                           A  7540    ;str                                   IX+6    
                           A  7541    
                           A  7542    
                           A  7543    ; Stack Frame Size: 17 (bytes)
                           A  7544    ;       Spill Code: -3 (instruction)
                           A  7545    
                           A  7546    
                           A  7547    .ENDFUNC "strtou24",664,"_strtou24"
                           A  7548    ;  665	
                           A  7549    ;  666	int main(int argc, char * argv[]) {
0B2276                     A  7550    _main:
                           A  7551    .DEFINE "_main"
                           A  7552    
                           A  7553    .VALUE _main
                           A  7554    
                           A  7555    .CLASS 2
                           A  7556    
                           A  7557    .TYPE 68
                           A  7558    
                           A  7559    .ENDEF
                           A  7560    
                           A  7561    .BEGFUNC "main",666,"_main"
                           A  7562    
                           A  7563    .LINE 666
                           A  7564    
                           A  7565    .DEFINE "argc"
                           A  7566    
                           A  7567    .CLASS 65
                           A  7568    
                           A  7569    .VALUE 6
                           A  7570    
                           A  7571    .TYPE 4
                           A  7572    
                           A  7573    .ENDEF
                           A  7574    
                           A  7575    .DEFINE "argv"
                           A  7576    
                           A  7577    .CLASS 65
                           A  7578    
                           A  7579    .VALUE 9
                           A  7580    
                           A  7581    .TYPE 290
                           A  7582    
                           A  7583    .ENDEF
                           A  7584    
                           A  7585    .DEFINE "bitmap_slot"
                           A  7586    
                           A  7587    .CLASS 65
                           A  7588    
                           A  7589    .VALUE -1
                           A  7590    
                           A  7591    .TYPE 12
                           A  7592    
                           A  7593    .ENDEF
                           A  7594    
                           A  7595    .DEFINE "x"
                           A  7596    
                           A  7597    .CLASS 65
                           A  7598    
                           A  7599    .VALUE -7
                           A  7600    
                           A  7601    .TYPE 14
                           A  7602    
                           A  7603    .ENDEF
                           A  7604    
                           A  7605    .DEFINE "y"
                           A  7606    
                           A  7607    .CLASS 65
                           A  7608    
                           A  7609    .VALUE -13
                           A  7610    
                           A  7611    .TYPE 14
                           A  7612    
                           A  7613    .ENDEF
                           A  7614    
                           A  7615    .DEFINE "bmp"
                           A  7616    
                           A  7617    .CLASS 65
                           A  7618    
                           A  7619    .VALUE -1086
                           A  7620    
                           A  7621    .TAG "NONAME6"
                           A  7622    
                           A  7623    .TYPE 8
                           A  7624    
                           A  7625    .ENDEF
                           A  7626    
0B2276 DDE5                A  7627    	PUSH	IX
0B2278 DD210000 00         A  7628    	LD	IX,0
0B227D DD39                A  7629    	ADD	IX,SP
0B227F 21CCE6FF            A  7630    	LD	HL,-6452
0B2283 39                  A  7631    	ADD	HL,SP
0B2284 F9                  A  7632    	LD	SP,HL
                           A  7633    ;  667	
                           A  7634    ;  668	    uint24_t x, y;
                           A  7635    ;  669		uint8_t bitmap_slot = 0;
                           A  7636    .LINE 669
                           A  7637    
0B2285 DD36FF00            A  7638    	LD	(IX+%FFFFFFFF),%0
                           A  7639    ;  670		bmp_info bmp;
                           A  7640    ;  671		
                           A  7641    ;  672		//Args = 0:binary name, 1:filname, 
                           A  7642    ;  673		
                           A  7643    ;  674		if ((argc < 2) || (argc == 4) || (a
                           A  7644    .LINE 674
                           A  7645    
0B2289 01020000            A  7646    	LD	BC,2
0B228D DD2706              A  7647    	LD	HL,(IX+%6)
0B2290 B7                  A  7648    	OR	A,A
0B2291 ED42                A  7649    	SBC	HL,BC
0B2293 FA 9D 22 0B         A  7650    	JP	M,L__184
0B2297 EA C5 22 0B         A  7651    	JP	PE,L_217
0B229B 18 04               A  7652    	JR	L__185
0B229D                     A  7653    L__184:
0B229D E2 C5 22 0B         A  7654    	JP	PO,L_217
0B22A1                     A  7655    L__185:
0B22A1 01040000            A  7656    	LD	BC,4
0B22A5 DD2706              A  7657    	LD	HL,(IX+%6)
0B22A8 B7                  A  7658    	OR	A,A
0B22A9 ED42                A  7659    	SBC	HL,BC
0B22AB 28 18               A  7660    	JR	Z,L_217
0B22AD DD0706              A  7661    	LD	BC,(IX+%6)
0B22B0 21050000            A  7662    	LD	HL,5
0B22B4 B7                  A  7663    	OR	A,A
0B22B5 ED42                A  7664    	SBC	HL,BC
0B22B7 F2 C1 22 0B         A  7665    	JP	P,L__186
0B22BB EA F8 22 0B         A  7666    	JP	PE,L_219
0B22BF 18 04               A  7667    	JR	L__187
0B22C1                     A  7668    L__186:
0B22C1 E2 F8 22 0B         A  7669    	JP	PO,L_219
0B22C5                     A  7670    L__187:
0B22C5                     A  7671    L_217:
                           A  7672    ;  675	        // printf("Usage is %s <filenam
                           A  7673    ;  676	        // return 0;
                           A  7674    ;  677			bmp = load_bmp_clean(argv[1], 0
                           A  7675    .LINE 677
                           A  7676    
0B22C5 01000000            A  7677    	LD	BC,0
0B22C9 C5                  A  7678    	PUSH	BC
0B22CA DD3109              A  7679    	LD	IY,(IX+%9)
0B22CD ED2303              A  7680    	LEA	HL,IY+%3
0B22D0 ED07                A  7681    	LD	BC,(HL)
0B22D2 C5                  A  7682    	PUSH	BC
0B22D3 DDE5E1              A  7683    	LD	HL,IX
0B22D6 0191F7FF            A  7684    	LD	BC,-2159
0B22DA 09                  A  7685    	ADD	HL,BC
0B22DB E5C1                A  7686    	LD	BC,HL
0B22DD C5                  A  7687    	PUSH	BC
0B22DE CD 15 15 0B         A  7688    	CALL	_load_bmp_clean
0B22E2 C1                  A  7689    	POP	BC
0B22E3 C1                  A  7690    	POP	BC
0B22E4 C1                  A  7691    	POP	BC
0B22E5 DDE5FDE1            A  7692    	LD	IY,IX
0B22E9 01C2FBFF            A  7693    	LD	BC,-1086
0B22ED FD09                A  7694    	ADD	IY,BC
0B22EF FDE5D1              A  7695    	LD	DE,IY
0B22F2 01310400            A  7696    	LD	BC,1073
0B22F6 EDB0                A  7697    	LDIR	
                           A  7698    ;  678	    }
0B22F8                     A  7699    L_219:
                           A  7700    .LINE 678
                           A  7701    
                           A  7702    ;  679		
                           A  7703    ;  680		if (argc > 2) bitmap_slot = strtou8
                           A  7704    .LINE 680
                           A  7705    
0B22F8 DD0706              A  7706    	LD	BC,(IX+%6)
0B22FB 21020000            A  7707    	LD	HL,2
0B22FF B7                  A  7708    	OR	A,A
0B2300 ED42                A  7709    	SBC	HL,BC
0B2302 F2 0C 23 0B         A  7710    	JP	P,L__188
0B2306 EA 21 23 0B         A  7711    	JP	PE,L_235
0B230A 18 04               A  7712    	JR	L__189
0B230C                     A  7713    L__188:
0B230C E2 21 23 0B         A  7714    	JP	PO,L_235
0B2310                     A  7715    L__189:
0B2310 DD3109              A  7716    	LD	IY,(IX+%9)
0B2313 ED2306              A  7717    	LEA	HL,IY+%6
0B2316 ED07                A  7718    	LD	BC,(HL)
0B2318 C5                  A  7719    	PUSH	BC
0B2319 CD 90 20 0B         A  7720    	CALL	_strtou8
0B231D C1                  A  7721    	POP	BC
0B231E DD77FF              A  7722    	LD	(IX+%FFFFFFFF),A
0B2321                     A  7723    L_235:
                           A  7724    ;  681		
                           A  7725    ;  682	    //vdp_mode(8);
                           A  7726    ;  683		
                           A  7727    ;  684		if (argc == 2) {
                           A  7728    .LINE 684
                           A  7729    
0B2321 01020000            A  7730    	LD	BC,2
0B2325 DD2706              A  7731    	LD	HL,(IX+%6)
0B2328 B7                  A  7732    	OR	A,A
0B2329 ED42                A  7733    	SBC	HL,BC
0B232B 20 37               A  7734    	JR	NZ,L_234
                           A  7735    ;  685			
                           A  7736    ;  686			bmp = load_bmp_clean(argv[1], 0
                           A  7737    .LINE 686
                           A  7738    
0B232D 01000000            A  7739    	LD	BC,0
0B2331 C5                  A  7740    	PUSH	BC
0B2332 DD3109              A  7741    	LD	IY,(IX+%9)
0B2335 ED2303              A  7742    	LEA	HL,IY+%3
0B2338 ED07                A  7743    	LD	BC,(HL)
0B233A C5                  A  7744    	PUSH	BC
0B233B DDE5E1              A  7745    	LD	HL,IX
0B233E 0160F3FF            A  7746    	LD	BC,-3232
0B2342 09                  A  7747    	ADD	HL,BC
0B2343 E5C1                A  7748    	LD	BC,HL
0B2345 C5                  A  7749    	PUSH	BC
0B2346 CD 15 15 0B         A  7750    	CALL	_load_bmp_clean
0B234A C1                  A  7751    	POP	BC
0B234B C1                  A  7752    	POP	BC
0B234C C1                  A  7753    	POP	BC
0B234D DDE5FDE1            A  7754    	LD	IY,IX
0B2351 01C2FBFF            A  7755    	LD	BC,-1086
0B2355 FD09                A  7756    	ADD	IY,BC
0B2357 FDE5D1              A  7757    	LD	DE,IY
0B235A 01310400            A  7758    	LD	BC,1073
0B235E EDB0                A  7759    	LDIR	
                           A  7760    ;  687			
                           A  7761    ;  688		} else if (argc == 3) {
                           A  7762    .LINE 688
                           A  7763    
0B2360 C3 73 25 0B         A  7764    	JR	L_236
0B2364                     A  7765    L_234:
0B2364 01030000            A  7766    	LD	BC,3
0B2368 DD2706              A  7767    	LD	HL,(IX+%6)
0B236B B7                  A  7768    	OR	A,A
0B236C ED42                A  7769    	SBC	HL,BC
0B236E 20 73               A  7770    	JR	NZ,L_232
                           A  7771    ;  689			
                           A  7772    ;  690			if (strcmp(argv[2], "/i") == 0)
                           A  7773    .LINE 690
                           A  7774    
0B2370 01 9C 45 0B         A  7775    	LD	BC,L__177
0B2374 C5                  A  7776    	PUSH	BC
0B2375 DD3109              A  7777    	LD	IY,(IX+%9)
0B2378 ED2306              A  7778    	LEA	HL,IY+%6
0B237B ED07                A  7779    	LD	BC,(HL)
0B237D C5                  A  7780    	PUSH	BC
0B237E CD EA 38 0B         A  7781    	CALL	_strcmp
0B2382 C1                  A  7782    	POP	BC
0B2383 C1                  A  7783    	POP	BC
0B2384 01000000            A  7784    	LD	BC,0
0B2388 B7                  A  7785    	OR	A,A
0B2389 ED42                A  7786    	SBC	HL,BC
0B238B 20 1E               A  7787    	JR	NZ,L_221
0B238D DD3109              A  7788    	LD	IY,(IX+%9)
0B2390 ED2303              A  7789    	LEA	HL,IY+%3
0B2393 ED07                A  7790    	LD	BC,(HL)
0B2395 C5                  A  7791    	PUSH	BC
0B2396 DDE5E1              A  7792    	LD	HL,IX
0B2399 012FEFFF            A  7793    	LD	BC,-4305
0B239D 09                  A  7794    	ADD	HL,BC
0B239E E5C1                A  7795    	LD	BC,HL
0B23A0 C5                  A  7796    	PUSH	BC
0B23A1 CD E4 0C 0B         A  7797    	CALL	_get_info
0B23A5 C1                  A  7798    	POP	BC
0B23A6 C1                  A  7799    	POP	BC
                           A  7800    ;  691			else bmp = load_bmp_clean(argv[
                           A  7801    .LINE 691
                           A  7802    
0B23A7 C3 73 25 0B         A  7803    	JR	L_236
0B23AB                     A  7804    L_221:
0B23AB DD4EFF              A  7805    	LD	C,(IX+%FFFFFFFF)
0B23AE 0600                A  7806    	LD	B,%0
0B23B0 C5                  A  7807    	PUSH	BC
0B23B1 DD3109              A  7808    	LD	IY,(IX+%9)
0B23B4 ED2303              A  7809    	LEA	HL,IY+%3
0B23B7 ED07                A  7810    	LD	BC,(HL)
0B23B9 C5                  A  7811    	PUSH	BC
0B23BA DDE5E1              A  7812    	LD	HL,IX
0B23BD 01FEEAFF            A  7813    	LD	BC,-5378
0B23C1 09                  A  7814    	ADD	HL,BC
0B23C2 E5C1                A  7815    	LD	BC,HL
0B23C4 C5                  A  7816    	PUSH	BC
0B23C5 CD 15 15 0B         A  7817    	CALL	_load_bmp_clean
0B23C9 C1                  A  7818    	POP	BC
0B23CA C1                  A  7819    	POP	BC
0B23CB C1                  A  7820    	POP	BC
0B23CC DDE5FDE1            A  7821    	LD	IY,IX
0B23D0 01C2FBFF            A  7822    	LD	BC,-1086
0B23D4 FD09                A  7823    	ADD	IY,BC
0B23D6 FDE5D1              A  7824    	LD	DE,IY
0B23D9 01310400            A  7825    	LD	BC,1073
0B23DD EDB0                A  7826    	LDIR	
                           A  7827    ;  692			
                           A  7828    ;  693		} else if (argc == 5) {
                           A  7829    .LINE 693
                           A  7830    
0B23DF C3 73 25 0B         A  7831    	JR	L_236
0B23E3                     A  7832    L_232:
0B23E3 01050000            A  7833    	LD	BC,5
0B23E7 DD2706              A  7834    	LD	HL,(IX+%6)
0B23EA B7                  A  7835    	OR	A,A
0B23EB ED42                A  7836    	SBC	HL,BC
0B23ED C2 73 25 0B         A  7837    	JR	NZ,L_236
                           A  7838    ;  694		
                           A  7839    ;  695			bmp = load_bmp_clean(argv[1], b
                           A  7840    .LINE 695
                           A  7841    
0B23F1 DD4EFF              A  7842    	LD	C,(IX+%FFFFFFFF)
0B23F4 0600                A  7843    	LD	B,%0
0B23F6 C5                  A  7844    	PUSH	BC
0B23F7 DD3109              A  7845    	LD	IY,(IX+%9)
0B23FA ED2303              A  7846    	LEA	HL,IY+%3
0B23FD ED07                A  7847    	LD	BC,(HL)
0B23FF C5                  A  7848    	PUSH	BC
0B2400 DDE5E1              A  7849    	LD	HL,IX
0B2403 01CDE6FF            A  7850    	LD	BC,-6451
0B2407 09                  A  7851    	ADD	HL,BC
0B2408 E5C1                A  7852    	LD	BC,HL
0B240A C5                  A  7853    	PUSH	BC
0B240B CD 15 15 0B         A  7854    	CALL	_load_bmp_clean
0B240F C1                  A  7855    	POP	BC
0B2410 C1                  A  7856    	POP	BC
0B2411 C1                  A  7857    	POP	BC
0B2412 DDE5FDE1            A  7858    	LD	IY,IX
0B2416 01C2FBFF            A  7859    	LD	BC,-1086
0B241A FD09                A  7860    	ADD	IY,BC
0B241C FDE5D1              A  7861    	LD	DE,IY
0B241F 01310400            A  7862    	LD	BC,1073
0B2423 EDB0                A  7863    	LDIR	
                           A  7864    ;  696			
                           A  7865    ;  697			if (argv[3][0] == 'C' || argv[3
                           A  7866    .LINE 697
                           A  7867    
0B2425 DD3109              A  7868    	LD	IY,(IX+%9)
0B2428 ED3309              A  7869    	LEA	IY,IY+%9
0B242B DD3EF6              A  7870    	LD	(IX+%FFFFFFF6),IY
0B242E DD27F6              A  7871    	LD	HL,(IX+%FFFFFFF6)
0B2431 ED27                A  7872    	LD	HL,(HL)
0B2433 7E                  A  7873    	LD	A,(HL)
0B2434 47                  A  7874    	LD	B,A
0B2435 17ED62              A  7875    	SEXT	HL
0B2438 68                  A  7876    	LD	L,B
0B2439 01430000            A  7877    	LD	BC,67
0B243D B7                  A  7878    	OR	A,A
0B243E ED42                A  7879    	SBC	HL,BC
0B2440 28 14               A  7880    	JR	Z,L_223
0B2442 DD27F6              A  7881    	LD	HL,(IX+%FFFFFFF6)
0B2445 ED27                A  7882    	LD	HL,(HL)
0B2447 7E                  A  7883    	LD	A,(HL)
0B2448 47                  A  7884    	LD	B,A
0B2449 17ED62              A  7885    	SEXT	HL
0B244C 68                  A  7886    	LD	L,B
0B244D 01630000            A  7887    	LD	BC,99
0B2451 B7                  A  7888    	OR	A,A
0B2452 ED42                A  7889    	SBC	HL,BC
0B2454 20 54               A  7890    	JR	NZ,L_224
0B2456                     A  7891    L_223:
0B2456 FDE5                A  7892    	PUSH	IY
0B2458 C5                  A  7893    	PUSH	BC
0B2459 FD21CCE6 FF         A  7894    	LD	IY,-6452
0B245E DDE5C1              A  7895    	LD	BC,IX
0B2461 FD09                A  7896    	ADD	IY,BC
0B2463 FD7700              A  7897    	LD	(IY),A
0B2466 C1                  A  7898    	POP	BC
0B2467 FDE1                A  7899    	POP	IY
0B2469 CD F6 31 0B         A  7900    	CALL	_getsysvar_scrwidth
0B246D FDE5                A  7901    	PUSH	IY
0B246F C5                  A  7902    	PUSH	BC
0B2470 FD21CCE6 FF         A  7903    	LD	IY,-6452
0B2475 DDE5C1              A  7904    	LD	BC,IX
0B2478 FD09                A  7905    	ADD	IY,BC
0B247A FD7E00              A  7906    	LD	A,(IY)
0B247D C1                  A  7907    	POP	BC
0B247E FDE1                A  7908    	POP	IY
0B2480 E5C1                A  7909    	LD	BC,HL
0B2482 CD 22 39 0B         A  7910    	CALL	__stoiu
0B2486 E5D1                A  7911    	LD	DE,HL
0B2488 21C2FBFF            A  7912    	LD	HL,-1086
0B248C DDE5C1              A  7913    	LD	BC,IX
0B248F 09                  A  7914    	ADD	HL,BC
0B2490 ED07                A  7915    	LD	BC,(HL)
0B2492 CD 22 39 0B         A  7916    	CALL	__stoiu
0B2496 E5C1                A  7917    	LD	BC,HL
0B2498 D5E1                A  7918    	LD	HL,DE
0B249A B7                  A  7919    	OR	A,A
0B249B ED42                A  7920    	SBC	HL,BC
0B249D 01020000            A  7921    	LD	BC,2
0B24A1 CD C6 3F 0B         A  7922    	CALL	__idivs
0B24A5 DD2FF9              A  7923    	LD	(IX+%FFFFFFF9),HL
                           A  7924    ;  698			else x = strtou16(argv[4]);
                           A  7925    .LINE 698
                           A  7926    
0B24A8 18 17               A  7927    	JR	L_228
0B24AA                     A  7928    L_224:
0B24AA DD3109              A  7929    	LD	IY,(IX+%9)
0B24AD ED230C              A  7930    	LEA	HL,IY+%C
0B24B0 ED07                A  7931    	LD	BC,(HL)
0B24B2 C5                  A  7932    	PUSH	BC
0B24B3 CD 97 1F 0B         A  7933    	CALL	_strtou16
0B24B7 C1                  A  7934    	POP	BC
0B24B8 E5C1                A  7935    	LD	BC,HL
0B24BA CD 22 39 0B         A  7936    	CALL	__stoiu
0B24BE DD2FF9              A  7937    	LD	(IX+%FFFFFFF9),HL
0B24C1                     A  7938    L_228:
                           A  7939    ;  699			
                           A  7940    ;  700			if (argv[4][0] == 'C' || argv[4
                           A  7941    .LINE 700
                           A  7942    
0B24C1 DD3109              A  7943    	LD	IY,(IX+%9)
0B24C4 ED330C              A  7944    	LEA	IY,IY+%C
0B24C7 DD3EFC              A  7945    	LD	(IX+%FFFFFFFC),IY
0B24CA DD27FC              A  7946    	LD	HL,(IX+%FFFFFFFC)
0B24CD ED27                A  7947    	LD	HL,(HL)
0B24CF 7E                  A  7948    	LD	A,(HL)
0B24D0 47                  A  7949    	LD	B,A
0B24D1 17ED62              A  7950    	SEXT	HL
0B24D4 68                  A  7951    	LD	L,B
0B24D5 01430000            A  7952    	LD	BC,67
0B24D9 B7                  A  7953    	OR	A,A
0B24DA ED42                A  7954    	SBC	HL,BC
0B24DC 28 14               A  7955    	JR	Z,L_226
0B24DE DD27FC              A  7956    	LD	HL,(IX+%FFFFFFFC)
0B24E1 ED27                A  7957    	LD	HL,(HL)
0B24E3 7E                  A  7958    	LD	A,(HL)
0B24E4 47                  A  7959    	LD	B,A
0B24E5 17ED62              A  7960    	SEXT	HL
0B24E8 68                  A  7961    	LD	L,B
0B24E9 01630000            A  7962    	LD	BC,99
0B24ED B7                  A  7963    	OR	A,A
0B24EE ED42                A  7964    	SBC	HL,BC
0B24F0 20 54               A  7965    	JR	NZ,L_227
0B24F2                     A  7966    L_226:
0B24F2 FDE5                A  7967    	PUSH	IY
0B24F4 C5                  A  7968    	PUSH	BC
0B24F5 FD21CCE6 FF         A  7969    	LD	IY,-6452
0B24FA DDE5C1              A  7970    	LD	BC,IX
0B24FD FD09                A  7971    	ADD	IY,BC
0B24FF FD7700              A  7972    	LD	(IY),A
0B2502 C1                  A  7973    	POP	BC
0B2503 FDE1                A  7974    	POP	IY
0B2505 CD 09 32 0B         A  7975    	CALL	_getsysvar_scrheight
0B2509 FDE5                A  7976    	PUSH	IY
0B250B C5                  A  7977    	PUSH	BC
0B250C FD21CCE6 FF         A  7978    	LD	IY,-6452
0B2511 DDE5C1              A  7979    	LD	BC,IX
0B2514 FD09                A  7980    	ADD	IY,BC
0B2516 FD7E00              A  7981    	LD	A,(IY)
0B2519 C1                  A  7982    	POP	BC
0B251A FDE1                A  7983    	POP	IY
0B251C E5C1                A  7984    	LD	BC,HL
0B251E CD 22 39 0B         A  7985    	CALL	__stoiu
0B2522 E5D1                A  7986    	LD	DE,HL
0B2524 21C4FBFF            A  7987    	LD	HL,-1084
0B2528 DDE5C1              A  7988    	LD	BC,IX
0B252B 09                  A  7989    	ADD	HL,BC
0B252C ED07                A  7990    	LD	BC,(HL)
0B252E CD 22 39 0B         A  7991    	CALL	__stoiu
0B2532 E5C1                A  7992    	LD	BC,HL
0B2534 D5E1                A  7993    	LD	HL,DE
0B2536 B7                  A  7994    	OR	A,A
0B2537 ED42                A  7995    	SBC	HL,BC
0B2539 01020000            A  7996    	LD	BC,2
0B253D CD C6 3F 0B         A  7997    	CALL	__idivs
0B2541 DD2FF3              A  7998    	LD	(IX+%FFFFFFF3),HL
                           A  7999    ;  701			else y = strtou16(argv[4]);
                           A  8000    .LINE 701
                           A  8001    
0B2544 18 14               A  8002    	JR	L_229
0B2546                     A  8003    L_227:
0B2546 DD27FC              A  8004    	LD	HL,(IX+%FFFFFFFC)
0B2549 ED07                A  8005    	LD	BC,(HL)
0B254B C5                  A  8006    	PUSH	BC
0B254C CD 97 1F 0B         A  8007    	CALL	_strtou16
0B2550 C1                  A  8008    	POP	BC
0B2551 E5C1                A  8009    	LD	BC,HL
0B2553 CD 22 39 0B         A  8010    	CALL	__stoiu
0B2557 DD2FF3              A  8011    	LD	(IX+%FFFFFFF3),HL
0B255A                     A  8012    L_229:
                           A  8013    ;  702			
                           A  8014    ;  703			vdp_extended_select(bitmap_slot
                           A  8015    .LINE 703
                           A  8016    
0B255A DD4EFF              A  8017    	LD	C,(IX+%FFFFFFFF)
0B255D 0600                A  8018    	LD	B,%0
0B255F C5                  A  8019    	PUSH	BC
0B2560 CD 3B 06 0B         A  8020    	CALL	_vdp_extended_select
0B2564 C1                  A  8021    	POP	BC
                           A  8022    ;  704			vdp_bitmapDrawSelected(x,y);
                           A  8023    .LINE 704
                           A  8024    
0B2565 DD07F3              A  8025    	LD	BC,(IX+%FFFFFFF3)
0B2568 C5                  A  8026    	PUSH	BC
0B2569 DD07F9              A  8027    	LD	BC,(IX+%FFFFFFF9)
0B256C C5                  A  8028    	PUSH	BC
0B256D CD E8 2A 0B         A  8029    	CALL	_vdp_bitmapDrawSelected
0B2571 C1                  A  8030    	POP	BC
0B2572 C1                  A  8031    	POP	BC
                           A  8032    ;  705			
                           A  8033    ;  706		}
0B2573                     A  8034    L_236:
                           A  8035    .LINE 706
                           A  8036    
                           A  8037    ;  707	
                           A  8038    ;  708	    return 0;
                           A  8039    .LINE 708
                           A  8040    
0B2573 B7                  A  8041    	OR	A,A
0B2574 ED62                A  8042    	SBC	HL,HL
                           A  8043    .LINE 709
                           A  8044    
0B2576 DDF9                A  8045    	LD	SP,IX
0B2578 DDE1                A  8046    	POP	IX
0B257A C9                  A  8047    	RET	
                           A  8048    
                           A  8049    
                           A  8050    ;**************************** _main ***********
                           A  8051    ;Name                         Addr/Register   S
                           A  8052    ;_vdp_bitmapDrawSelected             IMPORT  --
                           A  8053    ;_getsysvar_scrheight                IMPORT  --
                           A  8054    ;_getsysvar_scrwidth                 IMPORT  --
                           A  8055    ;_strcmp                             IMPORT  --
                           A  8056    ;bmp                                IX-1086   1
                           A  8057    ;y                                    IX-13    
                           A  8058    ;G_1                                  IX-10    
                           A  8059    ;x                                     IX-7    
                           A  8060    ;G_2                                   IX-4    
                           A  8061    ;bitmap_slot                           IX-1    
                           A  8062    ;argv                                  IX+9    
                           A  8063    ;argc                                  IX+6    
                           A  8064    
                           A  8065    
                           A  8066    ; Stack Frame Size: 6464 (bytes)
                           A  8067    ;       Spill Code: -3 (instruction)
                           A  8068    
                           A  8069    
                           A  8070    .ENDFUNC "main",709,"_main"
                           A  8071    	SEGMENT STRSECT
0B459C                     A  8072    L__177:
0B459C 2F69                A  8073    	DB	"/i"
0B459E 00                  A  8074    	DB	0
                           A  8075    	XREF _write16bit:ROM
                           A  8076    	XREF _vdp_bitmapDrawSelected:ROM
                           A  8077    	XREF _mos_getfil:ROM
                           A  8078    	XREF _mos_flseek:ROM
                           A  8079    	XREF _mos_fread:ROM
                           A  8080    	XREF _mos_fgetc:ROM
                           A  8081    	XREF _mos_fclose:ROM
                           A  8082    	XREF _mos_fopen:ROM
                           A  8083    	XREF _getsysvar_scrheight:ROM
                           A  8084    	XREF _getsysvar_scrwidth:ROM
                           A  8085    	XREF _mos_puts:ROM
                           A  8086    	XREF _waitvblank:ROM
                           A  8087    	XREF _putch:ROM
                           A  8088    	XREF _strcmp:ROM
                           A  8089    	XREF _memset:ROM
                           A  8090    	XREF _memcpy:ROM
                           A  8091    	XREF _malloc:ROM
                           A  8092    	XREF _free:ROM
                           A  8093    	XREF __u_uitoa:ROM
                           A  8094    	XREF __u_itoa:ROM
                           A  8095    	XREF ___print_sendstring:ROM
                           A  8096    	XREF ___print_xputch:ROM
                           A  8097    	XREF ___print_uputch:ROM
                           A  8098    	XREF ___print_fmt:ROM
                           A  8099    	XREF __lcmpu:ROM
                           A  8100    	XREF __ladd:ROM
                           A  8101    	XREF __lsub:ROM
                           A  8102    	XREF __idivs:ROM
                           A  8103    	XREF __imuls:ROM
                           A  8104    	XREF __lmulu:ROM
                           A  8105    	XREF __smulu:ROM
                           A  8106    	XREF __bshl:ROM
                           A  8107    	XREF __irems:ROM
                           A  8108    	XREF __ishrs:ROM
                           A  8109    	XREF __stoi:ROM
                           A  8110    	XREF __stoiu:ROM
                           A  8111    	XREF __itol:ROM
                           A  8112    	XREF __ildix:ROM
                           A  8113    	XREF __istix:ROM
                           A  8114    	XREF __ladd_b:ROM
                           A  8115    	XREF __ishrs_b:ROM
                           A  8116    	XDEF _main
                           A  8117    	XDEF _strtou24
                           A  8118    	XDEF _strtou8
                           A  8119    	XDEF _strtou16
                           A  8120    	XDEF _load_bmp_clean
                           A  8121    	XDEF _get_info
                           A  8122    	XDEF _print_bin
                           A  8123    	XDEF _getByte
                           A  8124    	XDEF _generic8888_to_rgba2222
                           A  8125    	XDEF _bgra8888_to_rgba2222
                           A  8126    	XDEF _bgr888_to_rgba2222
                           A  8127    	XDEF _reorder_and_insert
                           A  8128    	XDEF _reorder
                           A  8129    	XDEF _assign_buffer_to_bitmap
                           A  8130    	XDEF _vdp_extended_select
                           A  8131    	XDEF _add_stream_to_buffer
                           A  8132    	XDEF _select_buffer
                           A  8133    	XDEF _clear_buffer
                           A  8134    	XDEF _rgba8888_to_rgba2222
                           A  8135    	XDEF _twiddle_buffer
                           A  8136    	XDEF _flip
                           A  8137    	XDEF _max
                           A  8138    	XDEF _min
                           A  8139    	XDEF _delay_secs
                           A  8140    	END


Errors: 0
Warnings: 0
Lines Assembled: 8141
