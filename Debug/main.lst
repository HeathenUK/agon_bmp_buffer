Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED14-Oct-23     15:40:26     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optspeed -noreduceopt -nopadbranc
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    .BEGREC "NONAME3",8
                           A   144    .DEFINE "baudRate"
                           A   145    .VALUE 0
                           A   146    .CLASS 8
                           A   147    .TYPE 4
                           A   148    .ENDEF
                           A   149    .DEFINE "dataBits"
                           A   150    .VALUE 3
                           A   151    .CLASS 8
                           A   152    .TYPE 12
                           A   153    .ENDEF
                           A   154    .DEFINE "stopBits"
                           A   155    .VALUE 4
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "parity"
                           A   160    .VALUE 5
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "flowcontrol"
                           A   165    .VALUE 6
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "eir"
                           A   170    .VALUE 7
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .ENDREC "NONAME3"
                           A   175    .BEGREC "NONAME4",15
                           A   176    .DEFINE "fs"
                           A   177    .VALUE 0
                           A   178    .CLASS 8
                           A   179    .TYPE 46
                           A   180    .ENDEF
                           A   181    .DEFINE "id"
                           A   182    .VALUE 3
                           A   183    .CLASS 8
                           A   184    .TYPE 13
                           A   185    .ENDEF
                           A   186    .DEFINE "attr"
                           A   187    .VALUE 5
                           A   188    .CLASS 8
                           A   189    .TYPE 12
                           A   190    .ENDEF
                           A   191    .DEFINE "stat"
                           A   192    .VALUE 6
                           A   193    .CLASS 8
                           A   194    .TYPE 12
                           A   195    .ENDEF
                           A   196    .DEFINE "sclust"
                           A   197    .VALUE 7
                           A   198    .CLASS 8
                           A   199    .TYPE 15
                           A   200    .ENDEF
                           A   201    .DEFINE "objsize"
                           A   202    .VALUE 11
                           A   203    .CLASS 8
                           A   204    .TYPE 15
                           A   205    .ENDEF
                           A   206    .ENDREC "NONAME4"
                           A   207    .BEGREC "NONAME5",36
                           A   208    .DEFINE "obj"
                           A   209    .VALUE 0
                           A   210    .CLASS 8
                           A   211    .TAG "NONAME4"
                           A   212    .TYPE 8
                           A   213    .ENDEF
                           A   214    .DEFINE "flag"
                           A   215    .VALUE 15
                           A   216    .CLASS 8
                           A   217    .TYPE 12
                           A   218    .ENDEF
                           A   219    .DEFINE "err"
                           A   220    .VALUE 16
                           A   221    .CLASS 8
                           A   222    .TYPE 12
                           A   223    .ENDEF
                           A   224    .DEFINE "fptr"
                           A   225    .VALUE 17
                           A   226    .CLASS 8
                           A   227    .TYPE 15
                           A   228    .ENDEF
                           A   229    .DEFINE "clust"
                           A   230    .VALUE 21
                           A   231    .CLASS 8
                           A   232    .TYPE 15
                           A   233    .ENDEF
                           A   234    .DEFINE "sect"
                           A   235    .VALUE 25
                           A   236    .CLASS 8
                           A   237    .TYPE 15
                           A   238    .ENDEF
                           A   239    .DEFINE "dir_sect"
                           A   240    .VALUE 29
                           A   241    .CLASS 8
                           A   242    .TYPE 15
                           A   243    .ENDEF
                           A   244    .DEFINE "dir_ptr"
                           A   245    .VALUE 33
                           A   246    .CLASS 8
                           A   247    .TYPE 46
                           A   248    .ENDEF
                           A   249    .ENDREC "NONAME5"
                           A   250    ;    1	//Copyright HeathenUK 2023, others' cop
                           A   251    ;    2	
                           A   252    ;    3	#include <stdio.h>
                           A   253    ;    4	#include <stdlib.h>
                           A   254    ;    5	#include <ctype.h>
                           A   255    ;    6	#include <stdint.h>
                           A   256    ;    7	#include <string.h>
                           A   257    ;    8	#include <eZ80.h>
                           A   258    ;    9	#include <defines.h>
                           A   259    ;   10	#include "mos-interface.h"
                           A   260    ;   11	#include "vdp.h"
                           A   261    ;   12	
                           A   262    ;   13	typedef struct {
                           A   263    ;   14		
                           A   264    ;   15		uint16_t bmp_width;
                           A   265    ;   16		uint16_t bmp_height;
                           A   266    ;   17		uint8_t  bmp_bitdepth;
                           A   267    ;   18		
                           A   268    ;   19		uint32_t pixels_offset;
                           A   269    ;   20		uint32_t bmp_size;
                           A   270    ;   21		uint32_t main_header_size;
                           A   271    ;   22		
                           A   272    ;   23		uint32_t compression;
                           A   273    ;   24		
                           A   274    ;   25		uint32_t redBitField;
                           A   275    ;   26		uint32_t greenBitField;
                           A   276    ;   27		uint32_t blueBitField;
                           A   277    ;   28		uint32_t alphaBitField;
                           A   278    ;   29		
                           A   279    ;   30		uint32_t color_table_size;
                           A   280    ;   31		char color_table[1024];
                           A   281    ;   32		
                           A   282    ;   33		int8_t red_pos;
                           A   283    ;   34		int8_t green_pos;
                           A   284    ;   35		int8_t blue_pos;
                           A   285    ;   36		int8_t alpha_pos;
                           A   286    ;   37		
                           A   287    ;   38		uint16_t row_padding;
                           A   288    ;   39		uint16_t non_pad_row;
                           A   289    ;   40		
                           A   290    ;   41	} bmp_info;
                           A   291    .BEGREC "NONAME6",1073
                           A   292    .DEFINE "bmp_width"
                           A   293    .VALUE 0
                           A   294    .CLASS 8
                           A   295    .TYPE 13
                           A   296    .ENDEF
                           A   297    .DEFINE "bmp_height"
                           A   298    .VALUE 2
                           A   299    .CLASS 8
                           A   300    .TYPE 13
                           A   301    .ENDEF
                           A   302    .DEFINE "bmp_bitdepth"
                           A   303    .VALUE 4
                           A   304    .CLASS 8
                           A   305    .TYPE 12
                           A   306    .ENDEF
                           A   307    .DEFINE "pixels_offset"
                           A   308    .VALUE 5
                           A   309    .CLASS 8
                           A   310    .TYPE 15
                           A   311    .ENDEF
                           A   312    .DEFINE "bmp_size"
                           A   313    .VALUE 9
                           A   314    .CLASS 8
                           A   315    .TYPE 15
                           A   316    .ENDEF
                           A   317    .DEFINE "main_header_size"
                           A   318    .VALUE 13
                           A   319    .CLASS 8
                           A   320    .TYPE 15
                           A   321    .ENDEF
                           A   322    .DEFINE "compression"
                           A   323    .VALUE 17
                           A   324    .CLASS 8
                           A   325    .TYPE 15
                           A   326    .ENDEF
                           A   327    .DEFINE "redBitField"
                           A   328    .VALUE 21
                           A   329    .CLASS 8
                           A   330    .TYPE 15
                           A   331    .ENDEF
                           A   332    .DEFINE "greenBitField"
                           A   333    .VALUE 25
                           A   334    .CLASS 8
                           A   335    .TYPE 15
                           A   336    .ENDEF
                           A   337    .DEFINE "blueBitField"
                           A   338    .VALUE 29
                           A   339    .CLASS 8
                           A   340    .TYPE 15
                           A   341    .ENDEF
                           A   342    .DEFINE "alphaBitField"
                           A   343    .VALUE 33
                           A   344    .CLASS 8
                           A   345    .TYPE 15
                           A   346    .ENDEF
                           A   347    .DEFINE "color_table_size"
                           A   348    .VALUE 37
                           A   349    .CLASS 8
                           A   350    .TYPE 15
                           A   351    .ENDEF
                           A   352    .DEFINE "color_table"
                           A   353    .VALUE 41
                           A   354    .CLASS 8
                           A   355    .DIM 1024
                           A   356    .TYPE 98
                           A   357    .ENDEF
                           A   358    .DEFINE "red_pos"
                           A   359    .VALUE 1065
                           A   360    .CLASS 8
                           A   361    .TYPE 2
                           A   362    .ENDEF
                           A   363    .DEFINE "green_pos"
                           A   364    .VALUE 1066
                           A   365    .CLASS 8
                           A   366    .TYPE 2
                           A   367    .ENDEF
                           A   368    .DEFINE "blue_pos"
                           A   369    .VALUE 1067
                           A   370    .CLASS 8
                           A   371    .TYPE 2
                           A   372    .ENDEF
                           A   373    .DEFINE "alpha_pos"
                           A   374    .VALUE 1068
                           A   375    .CLASS 8
                           A   376    .TYPE 2
                           A   377    .ENDEF
                           A   378    .DEFINE "row_padding"
                           A   379    .VALUE 1069
                           A   380    .CLASS 8
                           A   381    .TYPE 13
                           A   382    .ENDEF
                           A   383    .DEFINE "non_pad_row"
                           A   384    .VALUE 1071
                           A   385    .CLASS 8
                           A   386    .TYPE 13
                           A   387    .ENDEF
                           A   388    .ENDREC "NONAME6"
                           A   389    ;   42	
                           A   390    ;   43	extern void write16bit(uint16_t w);
                           A   391    ;   44	extern void write24bit(uint24_t w);
                           A   392    ;   45	extern void write32bit(uint32_t w);
                           A   393    ;   46	
                           A   394    ;   47	void delay_secs(UINT16 ticks_end) { //1
0B00E5                     A   395    _delay_secs:
                           A   396    .DEFINE "_delay_secs"
                           A   397    
                           A   398    .VALUE _delay_secs
                           A   399    
                           A   400    .CLASS 2
                           A   401    
                           A   402    .TYPE 65
                           A   403    
                           A   404    .ENDEF
                           A   405    
                           A   406    .BEGFUNC "delay_secs",47,"_delay_secs"
                           A   407    
                           A   408    .LINE 47
                           A   409    
                           A   410    .DEFINE "ticks_end"
                           A   411    
                           A   412    .CLASS 65
                           A   413    
                           A   414    .VALUE 6
                           A   415    
                           A   416    .TYPE 13
                           A   417    
                           A   418    .ENDEF
                           A   419    
                           A   420    .DEFINE "ticks"
                           A   421    
                           A   422    .CLASS 65
                           A   423    
                           A   424    .VALUE -4
                           A   425    
                           A   426    .TYPE 15
                           A   427    
                           A   428    .ENDEF
                           A   429    
0B00E5 DDE5                A   430    	PUSH	IX
0B00E7 DD210000 00         A   431    	LD	IX,0
0B00EC DD39                A   432    	ADD	IX,SP
0B00EE C5                  A   433    	PUSH	BC
0B00EF 3B                  A   434    	DEC	SP
                           A   435    ;   48		
                           A   436    ;   49		UINT32 ticks = 0;
                           A   437    .LINE 49
                           A   438    
0B00F0 01000000            A   439    	LD	BC,0
0B00F4 AF                  A   440    	XOR	A,A
0B00F5 DD0FFC              A   441    	LD	(IX+%FFFFFFFC),BC
0B00F8 DD77FF              A   442    	LD	(IX+%FFFFFFFF),A
                           A   443    ;   50		ticks_end *= 60;
                           A   444    .LINE 50
                           A   445    
0B00FB 49213C00            A   446    	LD.LIS	HL,60
0B00FF DD0706              A   447    	LD	BC,(IX+%6)
0B0102 CD 7E 43 0B         A   448    	CALL	__smulu
0B0106 DD7506              A   449    	LD	(IX+%6),L
0B0109 DD7407              A   450    	LD	(IX+%7),H
                           A   451    ;   51		while(true) {
0B010C                     A   452    L_3:
                           A   453    .LINE 51
                           A   454    
                           A   455    ;   52			
                           A   456    ;   53			waitvblank();
                           A   457    .LINE 53
                           A   458    
0B010C CD 73 32 0B         A   459    	CALL	_waitvblank
                           A   460    ;   54			ticks++;
                           A   461    .LINE 54
                           A   462    
0B0110 DD27FC              A   463    	LD	HL,(IX+%FFFFFFFC)
0B0113 DD5EFF              A   464    	LD	E,(IX+%FFFFFFFF)
0B0116 3E01                A   465    	LD	A,%1
0B0118 CD 2D 36 0B         A   466    	CALL	__ladd_b
0B011C DD2FFC              A   467    	LD	(IX+%FFFFFFFC),HL
0B011F DD73FF              A   468    	LD	(IX+%FFFFFFFF),E
                           A   469    ;   55			if(ticks >= ticks_end) break;
                           A   470    .LINE 55
                           A   471    
0B0122 DD0706              A   472    	LD	BC,(IX+%6)
0B0125 CD 1E 3A 0B         A   473    	CALL	__stoiu
0B0129 E5C1                A   474    	LD	BC,HL
0B012B AF                  A   475    	XOR	A,A
0B012C DD27FC              A   476    	LD	HL,(IX+%FFFFFFFC)
0B012F DD5EFF              A   477    	LD	E,(IX+%FFFFFFFF)
0B0132 CD 6A 41 0B         A   478    	CALL	__lcmpu
0B0136 38 D4               A   479    	JR	C,L_3
                           A   480    ;   56			
                           A   481    ;   57		}
                           A   482    ;   58		
                           A   483    ;   59	}
                           A   484    .LINE 59
                           A   485    
0B0138 DDF9                A   486    	LD	SP,IX
0B013A DDE1                A   487    	POP	IX
0B013C C9                  A   488    	RET	
                           A   489    
                           A   490    
                           A   491    ;**************************** _delay_secs *****
                           A   492    ;Name                         Addr/Register   S
                           A   493    ;_waitvblank                         IMPORT  --
                           A   494    ;ticks                                 IX-4    
                           A   495    ;ticks_end                             IX+6    
                           A   496    
                           A   497    
                           A   498    ; Stack Frame Size: 13 (bytes)
                           A   499    ;       Spill Code: 0 (instruction)
                           A   500    
                           A   501    
                           A   502    .ENDFUNC "delay_secs",59,"_delay_secs"
                           A   503    ;   60	
                           A   504    ;   61	int min(int a, int b) {
0B013D                     A   505    _min:
                           A   506    .DEFINE "_min"
                           A   507    
                           A   508    .VALUE _min
                           A   509    
                           A   510    .CLASS 2
                           A   511    
                           A   512    .TYPE 68
                           A   513    
                           A   514    .ENDEF
                           A   515    
                           A   516    .BEGFUNC "min",61,"_min"
                           A   517    
                           A   518    .LINE 61
                           A   519    
                           A   520    .DEFINE "a"
                           A   521    
                           A   522    .CLASS 65
                           A   523    
                           A   524    .VALUE 6
                           A   525    
                           A   526    .TYPE 4
                           A   527    
                           A   528    .ENDEF
                           A   529    
                           A   530    .DEFINE "b"
                           A   531    
                           A   532    .CLASS 65
                           A   533    
                           A   534    .VALUE 9
                           A   535    
                           A   536    .TYPE 4
                           A   537    
                           A   538    .ENDEF
                           A   539    
0B013D DDE5                A   540    	PUSH	IX
0B013F DD210000 00         A   541    	LD	IX,0
0B0144 DD39                A   542    	ADD	IX,SP
                           A   543    ;   62	    if (a > b)
                           A   544    .LINE 62
                           A   545    
0B0146 DD0706              A   546    	LD	BC,(IX+%6)
0B0149 DD2709              A   547    	LD	HL,(IX+%9)
0B014C B7                  A   548    	OR	A,A
0B014D ED42                A   549    	SBC	HL,BC
0B014F F2 59 01 0B         A   550    	JP	P,L__3
0B0153 EA 62 01 0B         A   551    	JP	PE,L_6
0B0157 18 04               A   552    	JR	L__4
0B0159                     A   553    L__3:
0B0159 E2 62 01 0B         A   554    	JP	PO,L_6
0B015D                     A   555    L__4:
                           A   556    ;   63	        return b;
                           A   557    .LINE 63
                           A   558    
0B015D DD2709              A   559    	LD	HL,(IX+%9)
0B0160 18 03               A   560    	JR	L_7
0B0162                     A   561    L_6:
                           A   562    ;   64	    return a;
                           A   563    .LINE 64
                           A   564    
0B0162 DD2706              A   565    	LD	HL,(IX+%6)
                           A   566    ;   65	}
0B0165                     A   567    L_7:
                           A   568    .LINE 65
                           A   569    
0B0165 DDF9                A   570    	LD	SP,IX
0B0167 DDE1                A   571    	POP	IX
0B0169 C9                  A   572    	RET	
                           A   573    
                           A   574    
                           A   575    ;**************************** _min ************
                           A   576    ;Name                         Addr/Register   S
                           A   577    ;b                                     IX+9    
                           A   578    ;a                                     IX+6    
                           A   579    
                           A   580    
                           A   581    ; Stack Frame Size: 12 (bytes)
                           A   582    ;       Spill Code: 0 (instruction)
                           A   583    
                           A   584    
                           A   585    .ENDFUNC "min",65,"_min"
                           A   586    ;   66	
                           A   587    ;   67	int max(int a, int b) {
0B016A                     A   588    _max:
                           A   589    .DEFINE "_max"
                           A   590    
                           A   591    .VALUE _max
                           A   592    
                           A   593    .CLASS 2
                           A   594    
                           A   595    .TYPE 68
                           A   596    
                           A   597    .ENDEF
                           A   598    
                           A   599    .BEGFUNC "max",67,"_max"
                           A   600    
                           A   601    .LINE 67
                           A   602    
                           A   603    .DEFINE "a"
                           A   604    
                           A   605    .CLASS 65
                           A   606    
                           A   607    .VALUE 6
                           A   608    
                           A   609    .TYPE 4
                           A   610    
                           A   611    .ENDEF
                           A   612    
                           A   613    .DEFINE "b"
                           A   614    
                           A   615    .CLASS 65
                           A   616    
                           A   617    .VALUE 9
                           A   618    
                           A   619    .TYPE 4
                           A   620    
                           A   621    .ENDEF
                           A   622    
0B016A DDE5                A   623    	PUSH	IX
0B016C DD210000 00         A   624    	LD	IX,0
0B0171 DD39                A   625    	ADD	IX,SP
                           A   626    ;   68	    if (a > b)
                           A   627    .LINE 68
                           A   628    
0B0173 DD0706              A   629    	LD	BC,(IX+%6)
0B0176 DD2709              A   630    	LD	HL,(IX+%9)
0B0179 B7                  A   631    	OR	A,A
0B017A ED42                A   632    	SBC	HL,BC
0B017C F2 86 01 0B         A   633    	JP	P,L__7
0B0180 EA 8F 01 0B         A   634    	JP	PE,L_9
0B0184 18 04               A   635    	JR	L__8
0B0186                     A   636    L__7:
0B0186 E2 8F 01 0B         A   637    	JP	PO,L_9
0B018A                     A   638    L__8:
                           A   639    ;   69	        return a;
                           A   640    .LINE 69
                           A   641    
0B018A DD2706              A   642    	LD	HL,(IX+%6)
0B018D 18 03               A   643    	JR	L_10
0B018F                     A   644    L_9:
                           A   645    ;   70	    return b;
                           A   646    .LINE 70
                           A   647    
0B018F DD2709              A   648    	LD	HL,(IX+%9)
                           A   649    ;   71	}
0B0192                     A   650    L_10:
                           A   651    .LINE 71
                           A   652    
0B0192 DDF9                A   653    	LD	SP,IX
0B0194 DDE1                A   654    	POP	IX
0B0196 C9                  A   655    	RET	
                           A   656    
                           A   657    
                           A   658    ;**************************** _max ************
                           A   659    ;Name                         Addr/Register   S
                           A   660    ;b                                     IX+9    
                           A   661    ;a                                     IX+6    
                           A   662    
                           A   663    
                           A   664    ; Stack Frame Size: 12 (bytes)
                           A   665    ;       Spill Code: 0 (instruction)
                           A   666    
                           A   667    
                           A   668    .ENDFUNC "max",71,"_max"
                           A   669    ;   72	
                           A   670    ;   73	void flip(uint32_t * framebuffer, int w
0B0197                     A   671    _flip:
                           A   672    .DEFINE "_flip"
                           A   673    
                           A   674    .VALUE _flip
                           A   675    
                           A   676    .CLASS 2
                           A   677    
                           A   678    .TYPE 65
                           A   679    
                           A   680    .ENDEF
                           A   681    
                           A   682    .BEGFUNC "flip",73,"_flip"
                           A   683    
                           A   684    .LINE 73
                           A   685    
                           A   686    .DEFINE "framebuffer"
                           A   687    
                           A   688    .CLASS 65
                           A   689    
                           A   690    .VALUE 6
                           A   691    
                           A   692    .TYPE 47
                           A   693    
                           A   694    .ENDEF
                           A   695    
                           A   696    .DEFINE "width"
                           A   697    
                           A   698    .CLASS 65
                           A   699    
                           A   700    .VALUE 9
                           A   701    
                           A   702    .TYPE 4
                           A   703    
                           A   704    .ENDEF
                           A   705    
                           A   706    .DEFINE "height"
                           A   707    
                           A   708    .CLASS 65
                           A   709    
                           A   710    .VALUE 12
                           A   711    
                           A   712    .TYPE 4
                           A   713    
                           A   714    .ENDEF
                           A   715    
                           A   716    .DEFINE "y"
                           A   717    
                           A   718    .CLASS 65
                           A   719    
                           A   720    .VALUE -2
                           A   721    
                           A   722    .TYPE 13
                           A   723    
                           A   724    .ENDEF
                           A   725    
                           A   726    .DEFINE "row_buffer"
                           A   727    
                           A   728    .CLASS 65
                           A   729    
                           A   730    .VALUE -5
                           A   731    
                           A   732    .TYPE 47
                           A   733    
                           A   734    .ENDEF
                           A   735    
                           A   736    .DEFINE "row_size"
                           A   737    
                           A   738    .CLASS 65
                           A   739    
                           A   740    .VALUE -8
                           A   741    
                           A   742    .TYPE 4
                           A   743    
                           A   744    .ENDEF
                           A   745    
                           A   746    .DEFINE "top_row"
                           A   747    
                           A   748    .CLASS 65
                           A   749    
                           A   750    .VALUE -11
                           A   751    
                           A   752    .TYPE 47
                           A   753    
                           A   754    .ENDEF
                           A   755    
                           A   756    .DEFINE "bottom_row"
                           A   757    
                           A   758    .CLASS 65
                           A   759    
                           A   760    .VALUE -14
                           A   761    
                           A   762    .TYPE 47
                           A   763    
                           A   764    .ENDEF
                           A   765    
0B0197 DDE5                A   766    	PUSH	IX
0B0199 DD210000 00         A   767    	LD	IX,0
0B019E DD39                A   768    	ADD	IX,SP
0B01A0 ED22F1              A   769    	LEA	HL,IX+%FFFFFFF1
0B01A3 F9                  A   770    	LD	SP,HL
                           A   771    ;   74	    uint16_t y;
                           A   772    ;   75	    uint32_t * row_buffer = (uint32_t *
                           A   773    .LINE 75
                           A   774    
0B01A4 DD2709              A   775    	LD	HL,(IX+%9)
0B01A7 29                  A   776    	ADD	HL,HL
0B01A8 29                  A   777    	ADD	HL,HL
0B01A9 E5                  A   778    	PUSH	HL
0B01AA DD77F1              A   779    	LD	(IX+%FFFFFFF1),A
0B01AD CD 47 37 0B         A   780    	CALL	_malloc
0B01B1 DD7EF1              A   781    	LD	A,(IX+%FFFFFFF1)
0B01B4 C1                  A   782    	POP	BC
0B01B5 DD2FFB              A   783    	LD	(IX+%FFFFFFFB),HL
                           A   784    ;   76	    int row_size = width * sizeof(uint3
                           A   785    .LINE 76
                           A   786    
0B01B8 DD2709              A   787    	LD	HL,(IX+%9)
0B01BB 29                  A   788    	ADD	HL,HL
0B01BC 29                  A   789    	ADD	HL,HL
0B01BD DD2FF8              A   790    	LD	(IX+%FFFFFFF8),HL
                           A   791    ;   77	
                           A   792    ;   78	    for (y = 0; y < height / 2; y++) {
                           A   793    .LINE 78
                           A   794    
0B01C0 DD36FE00            A   795    	LD	(IX+%FFFFFFFE),%0
0B01C4 DD36FF00            A   796    	LD	(IX+%FFFFFFFF),%0
0B01C8 C3 58 02 0B         A   797    	JR	L_14
0B01CC                     A   798    L_12:
                           A   799    ;   79	        uint32_t * top_row = framebuffe
                           A   800    .LINE 79
                           A   801    
0B01CC DD07FE              A   802    	LD	BC,(IX+%FFFFFFFE)
0B01CF CD 1E 3A 0B         A   803    	CALL	__stoiu
0B01D3 DD0709              A   804    	LD	BC,(IX+%9)
0B01D6 CD 86 40 0B         A   805    	CALL	__imuls
0B01DA 29                  A   806    	ADD	HL,HL
0B01DB 29                  A   807    	ADD	HL,HL
0B01DC DD0706              A   808    	LD	BC,(IX+%6)
0B01DF 09                  A   809    	ADD	HL,BC
0B01E0 DD2FF5              A   810    	LD	(IX+%FFFFFFF5),HL
                           A   811    ;   80	        uint32_t * bottom_row = framebu
                           A   812    .LINE 80
                           A   813    
0B01E3 DD07FE              A   814    	LD	BC,(IX+%FFFFFFFE)
0B01E6 CD 1E 3A 0B         A   815    	CALL	__stoiu
0B01EA E5C1                A   816    	LD	BC,HL
0B01EC DD270C              A   817    	LD	HL,(IX+%C)
0B01EF B7                  A   818    	OR	A,A
0B01F0 ED42                A   819    	SBC	HL,BC
0B01F2 2B                  A   820    	DEC	HL
0B01F3 DD0709              A   821    	LD	BC,(IX+%9)
0B01F6 CD 86 40 0B         A   822    	CALL	__imuls
0B01FA 29                  A   823    	ADD	HL,HL
0B01FB 29                  A   824    	ADD	HL,HL
0B01FC DD0706              A   825    	LD	BC,(IX+%6)
0B01FF 09                  A   826    	ADD	HL,BC
0B0200 DD2FF2              A   827    	LD	(IX+%FFFFFFF2),HL
                           A   828    ;   81	
                           A   829    ;   82	        memcpy(row_buffer, top_row, row
                           A   830    .LINE 82
                           A   831    
0B0203 DD07F8              A   832    	LD	BC,(IX+%FFFFFFF8)
0B0206 C5                  A   833    	PUSH	BC
0B0207 DD07F5              A   834    	LD	BC,(IX+%FFFFFFF5)
0B020A C5                  A   835    	PUSH	BC
0B020B DD07FB              A   836    	LD	BC,(IX+%FFFFFFFB)
0B020E C5                  A   837    	PUSH	BC
0B020F DD77F1              A   838    	LD	(IX+%FFFFFFF1),A
0B0212 CD F7 3D 0B         A   839    	CALL	_memcpy
0B0216 DD7EF1              A   840    	LD	A,(IX+%FFFFFFF1)
0B0219 C1                  A   841    	POP	BC
0B021A C1                  A   842    	POP	BC
0B021B C1                  A   843    	POP	BC
                           A   844    ;   83	        memcpy(top_row, bottom_row, row
                           A   845    .LINE 83
                           A   846    
0B021C DD07F8              A   847    	LD	BC,(IX+%FFFFFFF8)
0B021F C5                  A   848    	PUSH	BC
0B0220 DD07F2              A   849    	LD	BC,(IX+%FFFFFFF2)
0B0223 C5                  A   850    	PUSH	BC
0B0224 DD07F5              A   851    	LD	BC,(IX+%FFFFFFF5)
0B0227 C5                  A   852    	PUSH	BC
0B0228 DD77F1              A   853    	LD	(IX+%FFFFFFF1),A
0B022B CD F7 3D 0B         A   854    	CALL	_memcpy
0B022F DD7EF1              A   855    	LD	A,(IX+%FFFFFFF1)
0B0232 C1                  A   856    	POP	BC
0B0233 C1                  A   857    	POP	BC
0B0234 C1                  A   858    	POP	BC
                           A   859    ;   84	        memcpy(bottom_row, row_buffer, 
                           A   860    .LINE 84
                           A   861    
0B0235 DD07F8              A   862    	LD	BC,(IX+%FFFFFFF8)
0B0238 C5                  A   863    	PUSH	BC
0B0239 DD07FB              A   864    	LD	BC,(IX+%FFFFFFFB)
0B023C C5                  A   865    	PUSH	BC
0B023D DD07F2              A   866    	LD	BC,(IX+%FFFFFFF2)
0B0240 C5                  A   867    	PUSH	BC
0B0241 DD77F1              A   868    	LD	(IX+%FFFFFFF1),A
0B0244 CD F7 3D 0B         A   869    	CALL	_memcpy
0B0248 DD7EF1              A   870    	LD	A,(IX+%FFFFFFF1)
0B024B C1                  A   871    	POP	BC
0B024C C1                  A   872    	POP	BC
0B024D C1                  A   873    	POP	BC
0B024E DD27FE              A   874    	LD	HL,(IX+%FFFFFFFE)
0B0251 23                  A   875    	INC	HL
0B0252 DD75FE              A   876    	LD	(IX+%FFFFFFFE),L
0B0255 DD74FF              A   877    	LD	(IX+%FFFFFFFF),H
                           A   878    ;   85	    }
0B0258                     A   879    L_14:
                           A   880    .LINE 85
                           A   881    
0B0258 01020000            A   882    	LD	BC,2
0B025C DD270C              A   883    	LD	HL,(IX+%C)
0B025F CD E7 40 0B         A   884    	CALL	__idivs
0B0263 E5D1                A   885    	LD	DE,HL
0B0265 DD07FE              A   886    	LD	BC,(IX+%FFFFFFFE)
0B0268 CD 1E 3A 0B         A   887    	CALL	__stoiu
0B026C B7                  A   888    	OR	A,A
0B026D ED52                A   889    	SBC	HL,DE
0B026F FA 79 02 0B         A   890    	JP	M,L__11
0B0273 EA CC 01 0B         A   891    	JP	PE,L_12
0B0277 18 04               A   892    	JR	L__12
0B0279                     A   893    L__11:
0B0279 E2 CC 01 0B         A   894    	JP	PO,L_12
0B027D                     A   895    L__12:
                           A   896    ;   86	
                           A   897    ;   87	    free(row_buffer);
                           A   898    .LINE 87
                           A   899    
0B027D DD07FB              A   900    	LD	BC,(IX+%FFFFFFFB)
0B0280 C5                  A   901    	PUSH	BC
0B0281 CD 42 36 0B         A   902    	CALL	_free
0B0285 C1                  A   903    	POP	BC
                           A   904    ;   88	}
                           A   905    .LINE 88
                           A   906    
0B0286 DDF9                A   907    	LD	SP,IX
0B0288 DDE1                A   908    	POP	IX
0B028A C9                  A   909    	RET	
                           A   910    
                           A   911    
                           A   912    ;**************************** _flip ***********
                           A   913    ;Name                         Addr/Register   S
                           A   914    ;_free                               IMPORT  --
                           A   915    ;_memcpy                             IMPORT  --
                           A   916    ;_malloc                             IMPORT  --
                           A   917    ;bottom_row                           IX-14    
                           A   918    ;top_row                              IX-11    
                           A   919    ;row_size                              IX-8    
                           A   920    ;row_buffer                            IX-5    
                           A   921    ;y                                     IX-2    
                           A   922    ;height                               IX+12    
                           A   923    ;width                                 IX+9    
                           A   924    ;framebuffer                           IX+6    
                           A   925    
                           A   926    
                           A   927    ; Stack Frame Size: 30 (bytes)
                           A   928    ;       Spill Code: 0 (instruction)
                           A   929    
                           A   930    
                           A   931    .ENDFUNC "flip",88,"_flip"
                           A   932    ;   89	
                           A   933    ;   90	void twiddle_buffer(char* buffer, int w
0B028B                     A   934    _twiddle_buffer:
                           A   935    .DEFINE "_twiddle_buffer"
                           A   936    
                           A   937    .VALUE _twiddle_buffer
                           A   938    
                           A   939    .CLASS 2
                           A   940    
                           A   941    .TYPE 65
                           A   942    
                           A   943    .ENDEF
                           A   944    
                           A   945    .BEGFUNC "twiddle_buffer",90,"_twiddle_buffer"
                           A   946    
                           A   947    .LINE 90
                           A   948    
                           A   949    .DEFINE "buffer"
                           A   950    
                           A   951    .CLASS 65
                           A   952    
                           A   953    .VALUE 6
                           A   954    
                           A   955    .TYPE 34
                           A   956    
                           A   957    .ENDEF
                           A   958    
                           A   959    .DEFINE "width"
                           A   960    
                           A   961    .CLASS 65
                           A   962    
                           A   963    .VALUE 9
                           A   964    
                           A   965    .TYPE 4
                           A   966    
                           A   967    .ENDEF
                           A   968    
                           A   969    .DEFINE "height"
                           A   970    
                           A   971    .CLASS 65
                           A   972    
                           A   973    .VALUE 12
                           A   974    
                           A   975    .TYPE 4
                           A   976    
                           A   977    .ENDEF
                           A   978    
                           A   979    .DEFINE "col"
                           A   980    
                           A   981    .CLASS 65
                           A   982    
                           A   983    .VALUE -3
                           A   984    
                           A   985    .TYPE 4
                           A   986    
                           A   987    .ENDEF
                           A   988    
                           A   989    .DEFINE "tempRow"
                           A   990    
                           A   991    .CLASS 65
                           A   992    
                           A   993    .VALUE -6
                           A   994    
                           A   995    .TYPE 34
                           A   996    
                           A   997    .ENDEF
                           A   998    
                           A   999    .DEFINE "oppositeRowPtr"
                           A  1000    
                           A  1001    .CLASS 65
                           A  1002    
                           A  1003    .VALUE -9
                           A  1004    
                           A  1005    .TYPE 34
                           A  1006    
                           A  1007    .ENDEF
                           A  1008    
                           A  1009    .DEFINE "rowPtr"
                           A  1010    
                           A  1011    .CLASS 65
                           A  1012    
                           A  1013    .VALUE -12
                           A  1014    
                           A  1015    .TYPE 34
                           A  1016    
                           A  1017    .ENDEF
                           A  1018    
                           A  1019    .DEFINE "row"
                           A  1020    
                           A  1021    .CLASS 65
                           A  1022    
                           A  1023    .VALUE -15
                           A  1024    
                           A  1025    .TYPE 4
                           A  1026    
                           A  1027    .ENDEF
                           A  1028    
0B028B DDE5                A  1029    	PUSH	IX
0B028D DD210000 00         A  1030    	LD	IX,0
0B0292 DD39                A  1031    	ADD	IX,SP
0B0294 ED22E4              A  1032    	LEA	HL,IX+%FFFFFFE4
0B0297 F9                  A  1033    	LD	SP,HL
                           A  1034    ;   91	    int row, col;
                           A  1035    ;   92	    char* rowPtr;
                           A  1036    ;   93		char* oppositeRowPtr;
                           A  1037    ;   94		char* tempRow = (char*)malloc(width
                           A  1038    .LINE 94
                           A  1039    
0B0298 DD2709              A  1040    	LD	HL,(IX+%9)
0B029B 29                  A  1041    	ADD	HL,HL
0B029C 29                  A  1042    	ADD	HL,HL
0B029D E5                  A  1043    	PUSH	HL
0B029E DD77E4              A  1044    	LD	(IX+%FFFFFFE4),A
0B02A1 CD 47 37 0B         A  1045    	CALL	_malloc
0B02A5 DD7EE4              A  1046    	LD	A,(IX+%FFFFFFE4)
0B02A8 C1                  A  1047    	POP	BC
0B02A9 DD2FFA              A  1048    	LD	(IX+%FFFFFFFA),HL
                           A  1049    ;   95	
                           A  1050    ;   96	    //Iterate over each row
                           A  1051    ;   97	    for (row = 0; row < height / 2; row
                           A  1052    .LINE 97
                           A  1053    
0B02AC 01000000            A  1054    	LD	BC,0
0B02B0 DD0FF1              A  1055    	LD	(IX+%FFFFFFF1),BC
0B02B3 C3 6B 04 0B         A  1056    	JR	L_24
0B02B7                     A  1057    L_22:
                           A  1058    ;   98	        rowPtr = buffer + row * width *
                           A  1059    .LINE 98
                           A  1060    
0B02B7 DD27F1              A  1061    	LD	HL,(IX+%FFFFFFF1)
0B02BA DD0709              A  1062    	LD	BC,(IX+%9)
0B02BD CD 86 40 0B         A  1063    	CALL	__imuls
0B02C1 29                  A  1064    	ADD	HL,HL
0B02C2 29                  A  1065    	ADD	HL,HL
0B02C3 DD0706              A  1066    	LD	BC,(IX+%6)
0B02C6 09                  A  1067    	ADD	HL,BC
0B02C7 DD2FF4              A  1068    	LD	(IX+%FFFFFFF4),HL
                           A  1069    ;   99	        oppositeRowPtr = buffer + (heig
                           A  1070    .LINE 99
                           A  1071    
0B02CA DD07F1              A  1072    	LD	BC,(IX+%FFFFFFF1)
0B02CD DD270C              A  1073    	LD	HL,(IX+%C)
0B02D0 B7                  A  1074    	OR	A,A
0B02D1 ED42                A  1075    	SBC	HL,BC
0B02D3 2B                  A  1076    	DEC	HL
0B02D4 DD0709              A  1077    	LD	BC,(IX+%9)
0B02D7 CD 86 40 0B         A  1078    	CALL	__imuls
0B02DB 29                  A  1079    	ADD	HL,HL
0B02DC 29                  A  1080    	ADD	HL,HL
0B02DD DD0706              A  1081    	LD	BC,(IX+%6)
0B02E0 09                  A  1082    	ADD	HL,BC
0B02E1 DD2FF7              A  1083    	LD	(IX+%FFFFFFF7),HL
                           A  1084    ;  100	
                           A  1085    ;  101	        //Swap bytes within each row (B
                           A  1086    ;  102	        for (col = 0; col < width; col+
                           A  1087    .LINE 102
                           A  1088    
0B02E4 01000000            A  1089    	LD	BC,0
0B02E8 DD0FFD              A  1090    	LD	(IX+%FFFFFFFD),BC
0B02EB C3 4D 04 0B         A  1091    	JR	L_21
0B02EF                     A  1092    L_19:
                           A  1093    ;  103	            tempRow[col * 4] = opposite
                           A  1094    .LINE 103
                           A  1095    
0B02EF DD27FD              A  1096    	LD	HL,(IX+%FFFFFFFD)
0B02F2 29                  A  1097    	ADD	HL,HL
0B02F3 29                  A  1098    	ADD	HL,HL
0B02F4 E5C1                A  1099    	LD	BC,HL
0B02F6 DD27FD              A  1100    	LD	HL,(IX+%FFFFFFFD)
0B02F9 29                  A  1101    	ADD	HL,HL
0B02FA 29                  A  1102    	ADD	HL,HL
0B02FB DD17F7              A  1103    	LD	DE,(IX+%FFFFFFF7)
0B02FE 19                  A  1104    	ADD	HL,DE
0B02FF E5FDE1              A  1105    	LD	IY,HL
0B0302 C5D1                A  1106    	LD	DE,BC
0B0304 DD27FA              A  1107    	LD	HL,(IX+%FFFFFFFA)
0B0307 19                  A  1108    	ADD	HL,DE
0B0308 FD7E02              A  1109    	LD	A,(IY+%2)
0B030B 77                  A  1110    	LD	(HL),A
                           A  1111    ;  104	            tempRow[col * 4 + 1] = oppo
                           A  1112    .LINE 104
                           A  1113    
0B030C DD27FD              A  1114    	LD	HL,(IX+%FFFFFFFD)
0B030F 29                  A  1115    	ADD	HL,HL
0B0310 29                  A  1116    	ADD	HL,HL
0B0311 E5D1                A  1117    	LD	DE,HL
0B0313 DD27F7              A  1118    	LD	HL,(IX+%FFFFFFF7)
0B0316 09                  A  1119    	ADD	HL,BC
0B0317 E5FDE1              A  1120    	LD	IY,HL
0B031A D5C1                A  1121    	LD	BC,DE
0B031C DD27FA              A  1122    	LD	HL,(IX+%FFFFFFFA)
0B031F 09                  A  1123    	ADD	HL,BC
0B0320 23                  A  1124    	INC	HL
0B0321 FD7E01              A  1125    	LD	A,(IY+%1)
0B0324 77                  A  1126    	LD	(HL),A
                           A  1127    ;  105	            tempRow[col * 4 + 2] = oppo
                           A  1128    .LINE 105
                           A  1129    
0B0325 DD27FD              A  1130    	LD	HL,(IX+%FFFFFFFD)
0B0328 29                  A  1131    	ADD	HL,HL
0B0329 29                  A  1132    	ADD	HL,HL
0B032A E5C1                A  1133    	LD	BC,HL
0B032C DD27F7              A  1134    	LD	HL,(IX+%FFFFFFF7)
0B032F 19                  A  1135    	ADD	HL,DE
0B0330 E5FDE1              A  1136    	LD	IY,HL
0B0333 C5D1                A  1137    	LD	DE,BC
0B0335 DD27FA              A  1138    	LD	HL,(IX+%FFFFFFFA)
0B0338 19                  A  1139    	ADD	HL,DE
0B0339 23                  A  1140    	INC	HL
0B033A 23                  A  1141    	INC	HL
0B033B FD7E00              A  1142    	LD	A,(IY)
0B033E 77                  A  1143    	LD	(HL),A
                           A  1144    ;  106	            tempRow[col * 4 + 3] = oppo
                           A  1145    .LINE 106
                           A  1146    
0B033F DD27FD              A  1147    	LD	HL,(IX+%FFFFFFFD)
0B0342 29                  A  1148    	ADD	HL,HL
0B0343 29                  A  1149    	ADD	HL,HL
0B0344 E5D1                A  1150    	LD	DE,HL
0B0346 DD27F7              A  1151    	LD	HL,(IX+%FFFFFFF7)
0B0349 09                  A  1152    	ADD	HL,BC
0B034A E5FDE1              A  1153    	LD	IY,HL
0B034D DD2FEE              A  1154    	LD	(IX+%FFFFFFEE),HL	; spill
0B0350 ED2303              A  1155    	LEA	HL,IY+%3
0B0353 DD2FEB              A  1156    	LD	(IX+%FFFFFFEB),HL	; spill
0B0356 D5C1                A  1157    	LD	BC,DE
0B0358 DD27FA              A  1158    	LD	HL,(IX+%FFFFFFFA)
0B035B 09                  A  1159    	ADD	HL,BC
0B035C E5FDE1              A  1160    	LD	IY,HL
0B035F DD27EB              A  1161    	LD	HL,(IX+%FFFFFFEB)	; unspill
0B0362 7E                  A  1162    	LD	A,(HL)
0B0363 FD7703              A  1163    	LD	(IY+%3),A
                           A  1164    ;  107	
                           A  1165    ;  108	            oppositeRowPtr[col * 4] = r
                           A  1166    .LINE 108
                           A  1167    
0B0366 DD27FD              A  1168    	LD	HL,(IX+%FFFFFFFD)
0B0369 29                  A  1169    	ADD	HL,HL
0B036A 29                  A  1170    	ADD	HL,HL
0B036B E5C1                A  1171    	LD	BC,HL
0B036D DD27F4              A  1172    	LD	HL,(IX+%FFFFFFF4)
0B0370 19                  A  1173    	ADD	HL,DE
0B0371 E5FDE1              A  1174    	LD	IY,HL
0B0374 C5D1                A  1175    	LD	DE,BC
0B0376 DD27F7              A  1176    	LD	HL,(IX+%FFFFFFF7)
0B0379 19                  A  1177    	ADD	HL,DE
0B037A FD7E02              A  1178    	LD	A,(IY+%2)
0B037D 77                  A  1179    	LD	(HL),A
                           A  1180    ;  109	            oppositeRowPtr[col * 4 + 1]
                           A  1181    .LINE 109
                           A  1182    
0B037E DD27FD              A  1183    	LD	HL,(IX+%FFFFFFFD)
0B0381 29                  A  1184    	ADD	HL,HL
0B0382 29                  A  1185    	ADD	HL,HL
0B0383 E5D1                A  1186    	LD	DE,HL
0B0385 DD27F4              A  1187    	LD	HL,(IX+%FFFFFFF4)
0B0388 09                  A  1188    	ADD	HL,BC
0B0389 E5FDE1              A  1189    	LD	IY,HL
0B038C D5C1                A  1190    	LD	BC,DE
0B038E DD27F7              A  1191    	LD	HL,(IX+%FFFFFFF7)
0B0391 09                  A  1192    	ADD	HL,BC
0B0392 23                  A  1193    	INC	HL
0B0393 FD7E01              A  1194    	LD	A,(IY+%1)
0B0396 77                  A  1195    	LD	(HL),A
                           A  1196    ;  110	            oppositeRowPtr[col * 4 + 2]
                           A  1197    .LINE 110
                           A  1198    
0B0397 DD27FD              A  1199    	LD	HL,(IX+%FFFFFFFD)
0B039A 29                  A  1200    	ADD	HL,HL
0B039B 29                  A  1201    	ADD	HL,HL
0B039C E5C1                A  1202    	LD	BC,HL
0B039E DD27F4              A  1203    	LD	HL,(IX+%FFFFFFF4)
0B03A1 19                  A  1204    	ADD	HL,DE
0B03A2 E5FDE1              A  1205    	LD	IY,HL
0B03A5 C5D1                A  1206    	LD	DE,BC
0B03A7 DD27F7              A  1207    	LD	HL,(IX+%FFFFFFF7)
0B03AA 19                  A  1208    	ADD	HL,DE
0B03AB 23                  A  1209    	INC	HL
0B03AC 23                  A  1210    	INC	HL
0B03AD FD7E00              A  1211    	LD	A,(IY)
0B03B0 77                  A  1212    	LD	(HL),A
                           A  1213    ;  111	            oppositeRowPtr[col * 4 + 3]
                           A  1214    .LINE 111
                           A  1215    
0B03B1 DD27FD              A  1216    	LD	HL,(IX+%FFFFFFFD)
0B03B4 29                  A  1217    	ADD	HL,HL
0B03B5 29                  A  1218    	ADD	HL,HL
0B03B6 E5D1                A  1219    	LD	DE,HL
0B03B8 DD27F4              A  1220    	LD	HL,(IX+%FFFFFFF4)
0B03BB 09                  A  1221    	ADD	HL,BC
0B03BC E5FDE1              A  1222    	LD	IY,HL
0B03BF DD2FEE              A  1223    	LD	(IX+%FFFFFFEE),HL	; spill
0B03C2 ED2303              A  1224    	LEA	HL,IY+%3
0B03C5 DD2FE8              A  1225    	LD	(IX+%FFFFFFE8),HL	; spill
0B03C8 D5C1                A  1226    	LD	BC,DE
0B03CA DD27F7              A  1227    	LD	HL,(IX+%FFFFFFF7)
0B03CD 09                  A  1228    	ADD	HL,BC
0B03CE E5FDE1              A  1229    	LD	IY,HL
0B03D1 DD27E8              A  1230    	LD	HL,(IX+%FFFFFFE8)	; unspill
0B03D4 7E                  A  1231    	LD	A,(HL)
0B03D5 FD7703              A  1232    	LD	(IY+%3),A
                           A  1233    ;  112	
                           A  1234    ;  113	            rowPtr[col * 4] = tempRow[c
                           A  1235    .LINE 113
                           A  1236    
0B03D8 DD27FD              A  1237    	LD	HL,(IX+%FFFFFFFD)
0B03DB 29                  A  1238    	ADD	HL,HL
0B03DC 29                  A  1239    	ADD	HL,HL
0B03DD E5C1                A  1240    	LD	BC,HL
0B03DF DD27FA              A  1241    	LD	HL,(IX+%FFFFFFFA)
0B03E2 19                  A  1242    	ADD	HL,DE
0B03E3 E5FDE1              A  1243    	LD	IY,HL
0B03E6 C5D1                A  1244    	LD	DE,BC
0B03E8 DD27F4              A  1245    	LD	HL,(IX+%FFFFFFF4)
0B03EB 19                  A  1246    	ADD	HL,DE
0B03EC FD7E00              A  1247    	LD	A,(IY)
0B03EF 77                  A  1248    	LD	(HL),A
                           A  1249    ;  114	            rowPtr[col * 4 + 1] = tempR
                           A  1250    .LINE 114
                           A  1251    
0B03F0 DD27FD              A  1252    	LD	HL,(IX+%FFFFFFFD)
0B03F3 29                  A  1253    	ADD	HL,HL
0B03F4 29                  A  1254    	ADD	HL,HL
0B03F5 E5D1                A  1255    	LD	DE,HL
0B03F7 DD27FA              A  1256    	LD	HL,(IX+%FFFFFFFA)
0B03FA 09                  A  1257    	ADD	HL,BC
0B03FB E5FDE1              A  1258    	LD	IY,HL
0B03FE D5C1                A  1259    	LD	BC,DE
0B0400 DD27F4              A  1260    	LD	HL,(IX+%FFFFFFF4)
0B0403 09                  A  1261    	ADD	HL,BC
0B0404 23                  A  1262    	INC	HL
0B0405 FD7E01              A  1263    	LD	A,(IY+%1)
0B0408 77                  A  1264    	LD	(HL),A
                           A  1265    ;  115	            rowPtr[col * 4 + 2] = tempR
                           A  1266    .LINE 115
                           A  1267    
0B0409 DD27FD              A  1268    	LD	HL,(IX+%FFFFFFFD)
0B040C 29                  A  1269    	ADD	HL,HL
0B040D 29                  A  1270    	ADD	HL,HL
0B040E E5C1                A  1271    	LD	BC,HL
0B0410 DD27FA              A  1272    	LD	HL,(IX+%FFFFFFFA)
0B0413 19                  A  1273    	ADD	HL,DE
0B0414 E5FDE1              A  1274    	LD	IY,HL
0B0417 C5D1                A  1275    	LD	DE,BC
0B0419 DD27F4              A  1276    	LD	HL,(IX+%FFFFFFF4)
0B041C 19                  A  1277    	ADD	HL,DE
0B041D 23                  A  1278    	INC	HL
0B041E 23                  A  1279    	INC	HL
0B041F FD7E02              A  1280    	LD	A,(IY+%2)
0B0422 77                  A  1281    	LD	(HL),A
                           A  1282    ;  116	            rowPtr[col * 4 + 3] = tempR
                           A  1283    .LINE 116
                           A  1284    
0B0423 DD27FA              A  1285    	LD	HL,(IX+%FFFFFFFA)
0B0426 09                  A  1286    	ADD	HL,BC
0B0427 E5FDE1              A  1287    	LD	IY,HL
0B042A DD2FEE              A  1288    	LD	(IX+%FFFFFFEE),HL	; spill
0B042D ED2303              A  1289    	LEA	HL,IY+%3
0B0430 DD2FE5              A  1290    	LD	(IX+%FFFFFFE5),HL	; spill
0B0433 DD27FD              A  1291    	LD	HL,(IX+%FFFFFFFD)
0B0436 29                  A  1292    	ADD	HL,HL
0B0437 29                  A  1293    	ADD	HL,HL
0B0438 DD07F4              A  1294    	LD	BC,(IX+%FFFFFFF4)
0B043B 09                  A  1295    	ADD	HL,BC
0B043C E5FDE1              A  1296    	LD	IY,HL
0B043F DD27E5              A  1297    	LD	HL,(IX+%FFFFFFE5)	; unspill
0B0442 7E                  A  1298    	LD	A,(HL)
0B0443 FD7703              A  1299    	LD	(IY+%3),A
0B0446 DD07FD              A  1300    	LD	BC,(IX+%FFFFFFFD)
0B0449 03                  A  1301    	INC	BC
0B044A DD0FFD              A  1302    	LD	(IX+%FFFFFFFD),BC
                           A  1303    ;  117	        }
0B044D                     A  1304    L_21:
                           A  1305    .LINE 117
                           A  1306    
0B044D DD0709              A  1307    	LD	BC,(IX+%9)
0B0450 DD27FD              A  1308    	LD	HL,(IX+%FFFFFFFD)
0B0453 B7                  A  1309    	OR	A,A
0B0454 ED42                A  1310    	SBC	HL,BC
0B0456 FA 60 04 0B         A  1311    	JP	M,L__16
0B045A EA EF 02 0B         A  1312    	JP	PE,L_19
0B045E 18 04               A  1313    	JR	L__17
0B0460                     A  1314    L__16:
0B0460 E2 EF 02 0B         A  1315    	JP	PO,L_19
0B0464                     A  1316    L__17:
0B0464 DD07F1              A  1317    	LD	BC,(IX+%FFFFFFF1)
0B0467 03                  A  1318    	INC	BC
0B0468 DD0FF1              A  1319    	LD	(IX+%FFFFFFF1),BC
                           A  1320    ;  118	    }
0B046B                     A  1321    L_24:
                           A  1322    .LINE 118
                           A  1323    
0B046B 01020000            A  1324    	LD	BC,2
0B046F DD270C              A  1325    	LD	HL,(IX+%C)
0B0472 CD E7 40 0B         A  1326    	CALL	__idivs
0B0476 E5C1                A  1327    	LD	BC,HL
0B0478 DD27F1              A  1328    	LD	HL,(IX+%FFFFFFF1)
0B047B B7                  A  1329    	OR	A,A
0B047C ED42                A  1330    	SBC	HL,BC
0B047E FA 88 04 0B         A  1331    	JP	M,L__18
0B0482 EA B7 02 0B         A  1332    	JP	PE,L_22
0B0486 18 04               A  1333    	JR	L__19
0B0488                     A  1334    L__18:
0B0488 E2 B7 02 0B         A  1335    	JP	PO,L_22
0B048C                     A  1336    L__19:
                           A  1337    ;  119		free(tempRow);
                           A  1338    .LINE 119
                           A  1339    
0B048C DD07FA              A  1340    	LD	BC,(IX+%FFFFFFFA)
0B048F C5                  A  1341    	PUSH	BC
0B0490 CD 42 36 0B         A  1342    	CALL	_free
0B0494 C1                  A  1343    	POP	BC
                           A  1344    ;  120	}
                           A  1345    .LINE 120
                           A  1346    
0B0495 DDF9                A  1347    	LD	SP,IX
0B0497 DDE1                A  1348    	POP	IX
0B0499 C9                  A  1349    	RET	
                           A  1350    
                           A  1351    
                           A  1352    ;**************************** _twiddle_buffer *
                           A  1353    ;Name                         Addr/Register   S
                           A  1354    ;_free                               IMPORT  --
                           A  1355    ;_malloc                             IMPORT  --
                           A  1356    ;row                                  IX-15    
                           A  1357    ;rowPtr                               IX-12    
                           A  1358    ;oppositeRowPtr                        IX-9    
                           A  1359    ;tempRow                               IX-6    
                           A  1360    ;col                                   IX-3    
                           A  1361    ;height                               IX+12    
                           A  1362    ;width                                 IX+9    
                           A  1363    ;buffer                                IX+6    
                           A  1364    
                           A  1365    
                           A  1366    ; Stack Frame Size: 43 (bytes)
                           A  1367    ;       Spill Code: -3 (instruction)
                           A  1368    
                           A  1369    
                           A  1370    .ENDFUNC "twiddle_buffer",120,"_twiddle_buffer"
                           A  1371    ;  121	
                           A  1372    ;  122	// void bgra8888_to_rgba2222(char *inpu
                           A  1373    ;  123	    // 
                           A  1374    ;  124		// char *input_ptr = input;
                           A  1375    ;  125	    // char *output_ptr = output;
                           A  1376    ;  126	
                           A  1377    ;  127	    // while (num_pixels--) {
                           A  1378    ;  128	
                           A  1379    ;  129	        // *output_ptr = CONVR64[input[
                           A  1380    ;  130	
                           A  1381    ;  131	        // input_ptr += 4;
                           A  1382    ;  132	        // output_ptr++;
                           A  1383    ;  133			// 
                           A  1384    ;  134	    // }
                           A  1385    ;  135	// }
                           A  1386    ;  136	
                           A  1387    ;  137	void rgba8888_to_rgba2222(char *input, 
0B049A                     A  1388    _rgba8888_to_rgba2222:
                           A  1389    .DEFINE "_rgba8888_to_rgba2222"
                           A  1390    
                           A  1391    .VALUE _rgba8888_to_rgba2222
                           A  1392    
                           A  1393    .CLASS 2
                           A  1394    
                           A  1395    .TYPE 65
                           A  1396    
                           A  1397    .ENDEF
                           A  1398    
                           A  1399    .BEGFUNC "rgba8888_to_rgba2222",137,"_rgba8888_
                           A  1400    
                           A  1401    .LINE 137
                           A  1402    
                           A  1403    .DEFINE "input"
                           A  1404    
                           A  1405    .CLASS 65
                           A  1406    
                           A  1407    .VALUE 6
                           A  1408    
                           A  1409    .TYPE 34
                           A  1410    
                           A  1411    .ENDEF
                           A  1412    
                           A  1413    .DEFINE "output"
                           A  1414    
                           A  1415    .CLASS 65
                           A  1416    
                           A  1417    .VALUE 9
                           A  1418    
                           A  1419    .TYPE 34
                           A  1420    
                           A  1421    .ENDEF
                           A  1422    
                           A  1423    .DEFINE "num_pixels"
                           A  1424    
                           A  1425    .CLASS 65
                           A  1426    
                           A  1427    .VALUE 12
                           A  1428    
                           A  1429    .TYPE 14
                           A  1430    
                           A  1431    .ENDEF
                           A  1432    
                           A  1433    .DEFINE "input_ptr"
                           A  1434    
                           A  1435    .CLASS 65
                           A  1436    
                           A  1437    .VALUE -3
                           A  1438    
                           A  1439    .TYPE 34
                           A  1440    
                           A  1441    .ENDEF
                           A  1442    
                           A  1443    .DEFINE "output_ptr"
                           A  1444    
                           A  1445    .CLASS 65
                           A  1446    
                           A  1447    .VALUE -6
                           A  1448    
                           A  1449    .TYPE 34
                           A  1450    
                           A  1451    .ENDEF
                           A  1452    
                           A  1453    .DEFINE "r"
                           A  1454    
                           A  1455    .CLASS 65
                           A  1456    
                           A  1457    .VALUE -7
                           A  1458    
                           A  1459    .TYPE 12
                           A  1460    
                           A  1461    .ENDEF
                           A  1462    
                           A  1463    .DEFINE "g"
                           A  1464    
                           A  1465    .CLASS 65
                           A  1466    
                           A  1467    .VALUE -8
                           A  1468    
                           A  1469    .TYPE 12
                           A  1470    
                           A  1471    .ENDEF
                           A  1472    
                           A  1473    .DEFINE "b"
                           A  1474    
                           A  1475    .CLASS 65
                           A  1476    
                           A  1477    .VALUE -9
                           A  1478    
                           A  1479    .TYPE 12
                           A  1480    
                           A  1481    .ENDEF
                           A  1482    
                           A  1483    .DEFINE "a"
                           A  1484    
                           A  1485    .CLASS 65
                           A  1486    
                           A  1487    .VALUE -10
                           A  1488    
                           A  1489    .TYPE 12
                           A  1490    
                           A  1491    .ENDEF
                           A  1492    
0B049A DDE5                A  1493    	PUSH	IX
0B049C DD210000 00         A  1494    	LD	IX,0
0B04A1 DD39                A  1495    	ADD	IX,SP
0B04A3 ED22E7              A  1496    	LEA	HL,IX+%FFFFFFE7
0B04A6 F9                  A  1497    	LD	SP,HL
                           A  1498    ;  138	    char *input_ptr = input;
                           A  1499    .LINE 138
                           A  1500    
0B04A7 DD0706              A  1501    	LD	BC,(IX+%6)
0B04AA DD0FFD              A  1502    	LD	(IX+%FFFFFFFD),BC
                           A  1503    ;  139	    char *output_ptr = output;
                           A  1504    .LINE 139
                           A  1505    
0B04AD DD0709              A  1506    	LD	BC,(IX+%9)
0B04B0 DD0FFA              A  1507    	LD	(IX+%FFFFFFFA),BC
                           A  1508    ;  140	
                           A  1509    ;  141	    while (num_pixels--) {
                           A  1510    .LINE 141
                           A  1511    
0B04B3 C3 4B 05 0B         A  1512    	JR	L_33
0B04B7                     A  1513    L_34:
                           A  1514    ;  142	        uint8_t r = *input_ptr++;
                           A  1515    .LINE 142
                           A  1516    
0B04B7 DD07FD              A  1517    	LD	BC,(IX+%FFFFFFFD)
0B04BA DD0FF3              A  1518    	LD	(IX+%FFFFFFF3),BC
0B04BD DD07FD              A  1519    	LD	BC,(IX+%FFFFFFFD)
0B04C0 03                  A  1520    	INC	BC
0B04C1 DD0FFD              A  1521    	LD	(IX+%FFFFFFFD),BC
0B04C4 DD27F3              A  1522    	LD	HL,(IX+%FFFFFFF3)
0B04C7 7E                  A  1523    	LD	A,(HL)
0B04C8 DD77F9              A  1524    	LD	(IX+%FFFFFFF9),A
                           A  1525    ;  143			uint8_t g = *input_ptr++;
                           A  1526    .LINE 143
                           A  1527    
0B04CB DD07FD              A  1528    	LD	BC,(IX+%FFFFFFFD)
0B04CE DD0FF0              A  1529    	LD	(IX+%FFFFFFF0),BC
0B04D1 DD07FD              A  1530    	LD	BC,(IX+%FFFFFFFD)
0B04D4 03                  A  1531    	INC	BC
0B04D5 DD0FFD              A  1532    	LD	(IX+%FFFFFFFD),BC
0B04D8 DD27F0              A  1533    	LD	HL,(IX+%FFFFFFF0)
0B04DB 7E                  A  1534    	LD	A,(HL)
0B04DC DD77F8              A  1535    	LD	(IX+%FFFFFFF8),A
                           A  1536    ;  144			uint8_t b = *input_ptr++;
                           A  1537    .LINE 144
                           A  1538    
0B04DF DD07FD              A  1539    	LD	BC,(IX+%FFFFFFFD)
0B04E2 DD0FED              A  1540    	LD	(IX+%FFFFFFED),BC
0B04E5 DD07FD              A  1541    	LD	BC,(IX+%FFFFFFFD)
0B04E8 03                  A  1542    	INC	BC
0B04E9 DD0FFD              A  1543    	LD	(IX+%FFFFFFFD),BC
0B04EC DD27ED              A  1544    	LD	HL,(IX+%FFFFFFED)
0B04EF 7E                  A  1545    	LD	A,(HL)
0B04F0 DD77F7              A  1546    	LD	(IX+%FFFFFFF7),A
                           A  1547    ;  145	        uint8_t a = *input_ptr++;
                           A  1548    .LINE 145
                           A  1549    
0B04F3 DD07FD              A  1550    	LD	BC,(IX+%FFFFFFFD)
0B04F6 DD0FEA              A  1551    	LD	(IX+%FFFFFFEA),BC
0B04F9 DD07FD              A  1552    	LD	BC,(IX+%FFFFFFFD)
0B04FC 03                  A  1553    	INC	BC
0B04FD DD0FFD              A  1554    	LD	(IX+%FFFFFFFD),BC
0B0500 DD27EA              A  1555    	LD	HL,(IX+%FFFFFFEA)
0B0503 7E                  A  1556    	LD	A,(HL)
0B0504 DD77F6              A  1557    	LD	(IX+%FFFFFFF6),A
                           A  1558    ;  146	
                           A  1559    ;  147	        *output_ptr++ = (r & 0xC0) | ((
                           A  1560    .LINE 147
                           A  1561    
0B0507 DD07FA              A  1562    	LD	BC,(IX+%FFFFFFFA)
0B050A DD0FE7              A  1563    	LD	(IX+%FFFFFFE7),BC
0B050D DD7EF8              A  1564    	LD	A,(IX+%FFFFFFF8)
0B0510 CB3F                A  1565    	SRL	A
0B0512 CB3F                A  1566    	SRL	A
0B0514 E630                A  1567    	AND	A,%30
0B0516 6F                  A  1568    	LD	L,A
0B0517 DD7EF9              A  1569    	LD	A,(IX+%FFFFFFF9)
0B051A E6C0                A  1570    	AND	A,%C0
0B051C 47                  A  1571    	LD	B,A
0B051D 7D                  A  1572    	LD	A,L
0B051E B0                  A  1573    	OR	A,B
0B051F 47                  A  1574    	LD	B,A
0B0520 DD7EF7              A  1575    	LD	A,(IX+%FFFFFFF7)
0B0523 CB3F                A  1576    	SRL	A
0B0525 CB3F                A  1577    	SRL	A
0B0527 CB3F                A  1578    	SRL	A
0B0529 CB3F                A  1579    	SRL	A
0B052B E60C                A  1580    	AND	A,%C
0B052D 6F                  A  1581    	LD	L,A
0B052E 78                  A  1582    	LD	A,B
0B052F B5                  A  1583    	OR	A,L
0B0530 47                  A  1584    	LD	B,A
0B0531 DD7EF6              A  1585    	LD	A,(IX+%FFFFFFF6)
0B0534 B7ED62              A  1586    	UEXT	HL
0B0537 6F                  A  1587    	LD	L,A
0B0538 3E06                A  1588    	LD	A,%6
0B053A CD 32 38 0B         A  1589    	CALL	__ishrs_b
0B053E 78                  A  1590    	LD	A,B
0B053F B5                  A  1591    	OR	A,L
0B0540 DD27E7              A  1592    	LD	HL,(IX+%FFFFFFE7)
0B0543 77                  A  1593    	LD	(HL),A
0B0544 DD07FA              A  1594    	LD	BC,(IX+%FFFFFFFA)
0B0547 03                  A  1595    	INC	BC
0B0548 DD0FFA              A  1596    	LD	(IX+%FFFFFFFA),BC
                           A  1597    ;  148	    }
0B054B                     A  1598    L_33:
                           A  1599    .LINE 148
                           A  1600    
0B054B DD270C              A  1601    	LD	HL,(IX+%C)
0B054E DD310C              A  1602    	LD	IY,(IX+%C)
0B0551 ED33FF              A  1603    	LEA	IY,IY+%FFFFFFFF
0B0554 DD3E0C              A  1604    	LD	(IX+%C),IY
0B0557 01000000            A  1605    	LD	BC,0
0B055B B7                  A  1606    	OR	A,A
0B055C ED42                A  1607    	SBC	HL,BC
0B055E C2 B7 04 0B         A  1608    	JR	NZ,L_34
                           A  1609    ;  149	}
                           A  1610    .LINE 149
                           A  1611    
0B0562 DDF9                A  1612    	LD	SP,IX
0B0564 DDE1                A  1613    	POP	IX
0B0566 C9                  A  1614    	RET	
                           A  1615    
                           A  1616    
                           A  1617    ;**************************** _rgba8888_to_rgba
                           A  1618    ;Name                         Addr/Register   S
                           A  1619    ;a                                    IX-10    
                           A  1620    ;b                                     IX-9    
                           A  1621    ;g                                     IX-8    
                           A  1622    ;r                                     IX-7    
                           A  1623    ;output_ptr                            IX-6    
                           A  1624    ;input_ptr                             IX-3    
                           A  1625    ;num_pixels                           IX+12    
                           A  1626    ;output                                IX+9    
                           A  1627    ;input                                 IX+6    
                           A  1628    
                           A  1629    
                           A  1630    ; Stack Frame Size: 40 (bytes)
                           A  1631    ;       Spill Code: -3 (instruction)
                           A  1632    
                           A  1633    
                           A  1634    .ENDFUNC "rgba8888_to_rgba2222",149,"_rgba8888_
                           A  1635    ;  150	
                           A  1636    ;  151	void clear_buffer(uint16_t buffer_id) {
0B0567                     A  1637    _clear_buffer:
                           A  1638    .DEFINE "_clear_buffer"
                           A  1639    
                           A  1640    .VALUE _clear_buffer
                           A  1641    
                           A  1642    .CLASS 2
                           A  1643    
                           A  1644    .TYPE 65
                           A  1645    
                           A  1646    .ENDEF
                           A  1647    
                           A  1648    .BEGFUNC "clear_buffer",151,"_clear_buffer"
                           A  1649    
                           A  1650    .LINE 151
                           A  1651    
                           A  1652    .DEFINE "buffer_id"
                           A  1653    
                           A  1654    .CLASS 65
                           A  1655    
                           A  1656    .VALUE 6
                           A  1657    
                           A  1658    .TYPE 13
                           A  1659    
                           A  1660    .ENDEF
                           A  1661    
0B0567 DDE5                A  1662    	PUSH	IX
0B0569 DD210000 00         A  1663    	LD	IX,0
0B056E DD39                A  1664    	ADD	IX,SP
                           A  1665    ;  152		
                           A  1666    ;  153		putch(23);
                           A  1667    .LINE 153
                           A  1668    
0B0570 01170000            A  1669    	LD	BC,23
0B0574 C5                  A  1670    	PUSH	BC
0B0575 CD 39 32 0B         A  1671    	CALL	_putch
0B0579 C1                  A  1672    	POP	BC
                           A  1673    ;  154		putch(0);
                           A  1674    .LINE 154
                           A  1675    
0B057A 01000000            A  1676    	LD	BC,0
0B057E C5                  A  1677    	PUSH	BC
0B057F CD 39 32 0B         A  1678    	CALL	_putch
0B0583 C1                  A  1679    	POP	BC
                           A  1680    ;  155		putch(0xA0);
                           A  1681    .LINE 155
                           A  1682    
0B0584 01A00000            A  1683    	LD	BC,160
0B0588 C5                  A  1684    	PUSH	BC
0B0589 CD 39 32 0B         A  1685    	CALL	_putch
0B058D C1                  A  1686    	POP	BC
                           A  1687    ;  156		write16bit(buffer_id);
                           A  1688    .LINE 156
                           A  1689    
0B058E DD0706              A  1690    	LD	BC,(IX+%6)
0B0591 C5                  A  1691    	PUSH	BC
0B0592 CD 77 26 0B         A  1692    	CALL	_write16bit
0B0596 C1                  A  1693    	POP	BC
                           A  1694    ;  157		putch(2);	
                           A  1695    .LINE 157
                           A  1696    
0B0597 01020000            A  1697    	LD	BC,2
0B059B C5                  A  1698    	PUSH	BC
0B059C CD 39 32 0B         A  1699    	CALL	_putch
0B05A0 C1                  A  1700    	POP	BC
                           A  1701    ;  158		
                           A  1702    ;  159	}
                           A  1703    .LINE 159
                           A  1704    
0B05A1 DDF9                A  1705    	LD	SP,IX
0B05A3 DDE1                A  1706    	POP	IX
0B05A5 C9                  A  1707    	RET	
                           A  1708    
                           A  1709    
                           A  1710    ;**************************** _clear_buffer ***
                           A  1711    ;Name                         Addr/Register   S
                           A  1712    ;_write16bit                         IMPORT  --
                           A  1713    ;_putch                              IMPORT  --
                           A  1714    ;buffer_id                             IX+6    
                           A  1715    
                           A  1716    
                           A  1717    ; Stack Frame Size: 9 (bytes)
                           A  1718    ;       Spill Code: -3 (instruction)
                           A  1719    
                           A  1720    
                           A  1721    .ENDFUNC "clear_buffer",159,"_clear_buffer"
                           A  1722    ;  160	
                           A  1723    ;  161	void add_stream_to_buffer(uint16_t buff
0B05A6                     A  1724    _add_stream_to_buffer:
                           A  1725    .DEFINE "_add_stream_to_buffer"
                           A  1726    
                           A  1727    .VALUE _add_stream_to_buffer
                           A  1728    
                           A  1729    .CLASS 2
                           A  1730    
                           A  1731    .TYPE 65
                           A  1732    
                           A  1733    .ENDEF
                           A  1734    
                           A  1735    .BEGFUNC "add_stream_to_buffer",161,"_add_strea
                           A  1736    
                           A  1737    .LINE 161
                           A  1738    
                           A  1739    .DEFINE "buffer_id"
                           A  1740    
                           A  1741    .CLASS 65
                           A  1742    
                           A  1743    .VALUE 6
                           A  1744    
                           A  1745    .TYPE 13
                           A  1746    
                           A  1747    .ENDEF
                           A  1748    
                           A  1749    .DEFINE "buffer_content"
                           A  1750    
                           A  1751    .CLASS 65
                           A  1752    
                           A  1753    .VALUE 9
                           A  1754    
                           A  1755    .TYPE 34
                           A  1756    
                           A  1757    .ENDEF
                           A  1758    
                           A  1759    .DEFINE "buffer_size"
                           A  1760    
                           A  1761    .CLASS 65
                           A  1762    
                           A  1763    .VALUE 12
                           A  1764    
                           A  1765    .TYPE 13
                           A  1766    
                           A  1767    .ENDEF
                           A  1768    
0B05A6 DDE5                A  1769    	PUSH	IX
0B05A8 DD210000 00         A  1770    	LD	IX,0
0B05AD DD39                A  1771    	ADD	IX,SP
                           A  1772    ;  162	
                           A  1773    ;  163		putch(23);
                           A  1774    .LINE 163
                           A  1775    
0B05AF 01170000            A  1776    	LD	BC,23
0B05B3 C5                  A  1777    	PUSH	BC
0B05B4 CD 39 32 0B         A  1778    	CALL	_putch
0B05B8 C1                  A  1779    	POP	BC
                           A  1780    ;  164		putch(0);
                           A  1781    .LINE 164
                           A  1782    
0B05B9 01000000            A  1783    	LD	BC,0
0B05BD C5                  A  1784    	PUSH	BC
0B05BE CD 39 32 0B         A  1785    	CALL	_putch
0B05C2 C1                  A  1786    	POP	BC
                           A  1787    ;  165		putch(0xA0);
                           A  1788    .LINE 165
                           A  1789    
0B05C3 01A00000            A  1790    	LD	BC,160
0B05C7 C5                  A  1791    	PUSH	BC
0B05C8 CD 39 32 0B         A  1792    	CALL	_putch
0B05CC C1                  A  1793    	POP	BC
                           A  1794    ;  166		write16bit(buffer_id);
                           A  1795    .LINE 166
                           A  1796    
0B05CD DD0706              A  1797    	LD	BC,(IX+%6)
0B05D0 C5                  A  1798    	PUSH	BC
0B05D1 CD 77 26 0B         A  1799    	CALL	_write16bit
0B05D5 C1                  A  1800    	POP	BC
                           A  1801    ;  167		putch(0);
                           A  1802    .LINE 167
                           A  1803    
0B05D6 01000000            A  1804    	LD	BC,0
0B05DA C5                  A  1805    	PUSH	BC
0B05DB CD 39 32 0B         A  1806    	CALL	_putch
0B05DF C1                  A  1807    	POP	BC
                           A  1808    ;  168		write16bit(buffer_size);
                           A  1809    .LINE 168
                           A  1810    
0B05E0 DD070C              A  1811    	LD	BC,(IX+%C)
0B05E3 C5                  A  1812    	PUSH	BC
0B05E4 CD 77 26 0B         A  1813    	CALL	_write16bit
0B05E8 C1                  A  1814    	POP	BC
                           A  1815    ;  169		
                           A  1816    ;  170		mos_puts(buffer_content, buffer_siz
                           A  1817    .LINE 170
                           A  1818    
0B05E9 01000000            A  1819    	LD	BC,0
0B05ED C5                  A  1820    	PUSH	BC
0B05EE DD070C              A  1821    	LD	BC,(IX+%C)
0B05F1 CD 1E 3A 0B         A  1822    	CALL	__stoiu
0B05F5 E5                  A  1823    	PUSH	HL
0B05F6 DD0709              A  1824    	LD	BC,(IX+%9)
0B05F9 C5                  A  1825    	PUSH	BC
0B05FA CD 51 32 0B         A  1826    	CALL	_mos_puts
0B05FE C1                  A  1827    	POP	BC
0B05FF C1                  A  1828    	POP	BC
0B0600 C1                  A  1829    	POP	BC
                           A  1830    ;  171	
                           A  1831    ;  172	}
                           A  1832    .LINE 172
                           A  1833    
0B0601 DDF9                A  1834    	LD	SP,IX
0B0603 DDE1                A  1835    	POP	IX
0B0605 C9                  A  1836    	RET	
                           A  1837    
                           A  1838    
                           A  1839    ;**************************** _add_stream_to_bu
                           A  1840    ;Name                         Addr/Register   S
                           A  1841    ;_mos_puts                           IMPORT  --
                           A  1842    ;_write16bit                         IMPORT  --
                           A  1843    ;_putch                              IMPORT  --
                           A  1844    ;buffer_size                          IX+12    
                           A  1845    ;buffer_content                        IX+9    
                           A  1846    ;buffer_id                             IX+6    
                           A  1847    
                           A  1848    
                           A  1849    ; Stack Frame Size: 15 (bytes)
                           A  1850    ;       Spill Code: -3 (instruction)
                           A  1851    
                           A  1852    
                           A  1853    .ENDFUNC "add_stream_to_buffer",172,"_add_strea
                           A  1854    ;  173	
                           A  1855    ;  174	void vdp_extended_select(uint16_t buffe
0B0606                     A  1856    _vdp_extended_select:
                           A  1857    .DEFINE "_vdp_extended_select"
                           A  1858    
                           A  1859    .VALUE _vdp_extended_select
                           A  1860    
                           A  1861    .CLASS 2
                           A  1862    
                           A  1863    .TYPE 65
                           A  1864    
                           A  1865    .ENDEF
                           A  1866    
                           A  1867    .BEGFUNC "vdp_extended_select",174,"_vdp_extend
                           A  1868    
                           A  1869    .LINE 174
                           A  1870    
                           A  1871    .DEFINE "buffer_id"
                           A  1872    
                           A  1873    .CLASS 65
                           A  1874    
                           A  1875    .VALUE 6
                           A  1876    
                           A  1877    .TYPE 13
                           A  1878    
                           A  1879    .ENDEF
                           A  1880    
0B0606 DDE5                A  1881    	PUSH	IX
0B0608 DD210000 00         A  1882    	LD	IX,0
0B060D DD39                A  1883    	ADD	IX,SP
                           A  1884    ;  175	
                           A  1885    ;  176		putch(23);
                           A  1886    .LINE 176
                           A  1887    
0B060F 01170000            A  1888    	LD	BC,23
0B0613 C5                  A  1889    	PUSH	BC
0B0614 CD 39 32 0B         A  1890    	CALL	_putch
0B0618 C1                  A  1891    	POP	BC
                           A  1892    ;  177		putch(27);
                           A  1893    .LINE 177
                           A  1894    
0B0619 011B0000            A  1895    	LD	BC,27
0B061D C5                  A  1896    	PUSH	BC
0B061E CD 39 32 0B         A  1897    	CALL	_putch
0B0622 C1                  A  1898    	POP	BC
                           A  1899    ;  178		putch(0x20);
                           A  1900    .LINE 178
                           A  1901    
0B0623 01200000            A  1902    	LD	BC,32
0B0627 C5                  A  1903    	PUSH	BC
0B0628 CD 39 32 0B         A  1904    	CALL	_putch
0B062C C1                  A  1905    	POP	BC
                           A  1906    ;  179		write16bit(buffer_id);
                           A  1907    .LINE 179
                           A  1908    
0B062D DD0706              A  1909    	LD	BC,(IX+%6)
0B0630 C5                  A  1910    	PUSH	BC
0B0631 CD 77 26 0B         A  1911    	CALL	_write16bit
0B0635 C1                  A  1912    	POP	BC
                           A  1913    ;  180	
                           A  1914    ;  181	}
                           A  1915    .LINE 181
                           A  1916    
0B0636 DDF9                A  1917    	LD	SP,IX
0B0638 DDE1                A  1918    	POP	IX
0B063A C9                  A  1919    	RET	
                           A  1920    
                           A  1921    
                           A  1922    ;**************************** _vdp_extended_sel
                           A  1923    ;Name                         Addr/Register   S
                           A  1924    ;_write16bit                         IMPORT  --
                           A  1925    ;_putch                              IMPORT  --
                           A  1926    ;buffer_id                             IX+6    
                           A  1927    
                           A  1928    
                           A  1929    ; Stack Frame Size: 9 (bytes)
                           A  1930    ;       Spill Code: -3 (instruction)
                           A  1931    
                           A  1932    
                           A  1933    .ENDFUNC "vdp_extended_select",181,"_vdp_extend
                           A  1934    ;  182	
                           A  1935    ;  183	void assign_buffer_to_bitmap(uint16_t b
0B063B                     A  1936    _assign_buffer_to_bitmap:
                           A  1937    .DEFINE "_assign_buffer_to_bitmap"
                           A  1938    
                           A  1939    .VALUE _assign_buffer_to_bitmap
                           A  1940    
                           A  1941    .CLASS 2
                           A  1942    
                           A  1943    .TYPE 65
                           A  1944    
                           A  1945    .ENDEF
                           A  1946    
                           A  1947    .BEGFUNC "assign_buffer_to_bitmap",183,"_assign
                           A  1948    
                           A  1949    .LINE 183
                           A  1950    
                           A  1951    .DEFINE "buffer_id"
                           A  1952    
                           A  1953    .CLASS 65
                           A  1954    
                           A  1955    .VALUE 6
                           A  1956    
                           A  1957    .TYPE 13
                           A  1958    
                           A  1959    .ENDEF
                           A  1960    
                           A  1961    .DEFINE "bitmap_format"
                           A  1962    
                           A  1963    .CLASS 65
                           A  1964    
                           A  1965    .VALUE 9
                           A  1966    
                           A  1967    .TYPE 12
                           A  1968    
                           A  1969    .ENDEF
                           A  1970    
                           A  1971    .DEFINE "width"
                           A  1972    
                           A  1973    .CLASS 65
                           A  1974    
                           A  1975    .VALUE 12
                           A  1976    
                           A  1977    .TYPE 13
                           A  1978    
                           A  1979    .ENDEF
                           A  1980    
                           A  1981    .DEFINE "height"
                           A  1982    
                           A  1983    .CLASS 65
                           A  1984    
                           A  1985    .VALUE 15
                           A  1986    
                           A  1987    .TYPE 13
                           A  1988    
                           A  1989    .ENDEF
                           A  1990    
0B063B DDE5                A  1991    	PUSH	IX
0B063D DD210000 00         A  1992    	LD	IX,0
0B0642 DD39                A  1993    	ADD	IX,SP
                           A  1994    ;  184	
                           A  1995    ;  185		//Consolidate buffer: (if needed) V
                           A  1996    ;  186		
                           A  1997    ;  187		putch(23);
                           A  1998    .LINE 187
                           A  1999    
0B0644 01170000            A  2000    	LD	BC,23
0B0648 C5                  A  2001    	PUSH	BC
0B0649 CD 39 32 0B         A  2002    	CALL	_putch
0B064D C1                  A  2003    	POP	BC
                           A  2004    ;  188		putch(0);
                           A  2005    .LINE 188
                           A  2006    
0B064E 01000000            A  2007    	LD	BC,0
0B0652 C5                  A  2008    	PUSH	BC
0B0653 CD 39 32 0B         A  2009    	CALL	_putch
0B0657 C1                  A  2010    	POP	BC
                           A  2011    ;  189		putch(0xA0);
                           A  2012    .LINE 189
                           A  2013    
0B0658 01A00000            A  2014    	LD	BC,160
0B065C C5                  A  2015    	PUSH	BC
0B065D CD 39 32 0B         A  2016    	CALL	_putch
0B0661 C1                  A  2017    	POP	BC
                           A  2018    ;  190		write16bit(buffer_id);
                           A  2019    .LINE 190
                           A  2020    
0B0662 DD0706              A  2021    	LD	BC,(IX+%6)
0B0665 C5                  A  2022    	PUSH	BC
0B0666 CD 77 26 0B         A  2023    	CALL	_write16bit
0B066A C1                  A  2024    	POP	BC
                           A  2025    ;  191		putch(0x0E);
                           A  2026    .LINE 191
                           A  2027    
0B066B 010E0000            A  2028    	LD	BC,14
0B066F C5                  A  2029    	PUSH	BC
0B0670 CD 39 32 0B         A  2030    	CALL	_putch
0B0674 C1                  A  2031    	POP	BC
                           A  2032    ;  192		
                           A  2033    ;  193		//Create bitmap from buffer: VDU 23
                           A  2034    ;  194		
                           A  2035    ;  195		putch(23);
                           A  2036    .LINE 195
                           A  2037    
0B0675 01170000            A  2038    	LD	BC,23
0B0679 C5                  A  2039    	PUSH	BC
0B067A CD 39 32 0B         A  2040    	CALL	_putch
0B067E C1                  A  2041    	POP	BC
                           A  2042    ;  196		putch(27);
                           A  2043    .LINE 196
                           A  2044    
0B067F 011B0000            A  2045    	LD	BC,27
0B0683 C5                  A  2046    	PUSH	BC
0B0684 CD 39 32 0B         A  2047    	CALL	_putch
0B0688 C1                  A  2048    	POP	BC
                           A  2049    ;  197		putch(0x21);
                           A  2050    .LINE 197
                           A  2051    
0B0689 01210000            A  2052    	LD	BC,33
0B068D C5                  A  2053    	PUSH	BC
0B068E CD 39 32 0B         A  2054    	CALL	_putch
0B0692 C1                  A  2055    	POP	BC
                           A  2056    ;  198		write16bit(buffer_id);
                           A  2057    .LINE 198
                           A  2058    
0B0693 DD0706              A  2059    	LD	BC,(IX+%6)
0B0696 C5                  A  2060    	PUSH	BC
0B0697 CD 77 26 0B         A  2061    	CALL	_write16bit
0B069B C1                  A  2062    	POP	BC
                           A  2063    ;  199		putch(bitmap_format);
                           A  2064    .LINE 199
                           A  2065    
0B069C DD7E09              A  2066    	LD	A,(IX+%9)
0B069F B7ED62              A  2067    	UEXT	HL
0B06A2 6F                  A  2068    	LD	L,A
0B06A3 E5                  A  2069    	PUSH	HL
0B06A4 CD 39 32 0B         A  2070    	CALL	_putch
0B06A8 C1                  A  2071    	POP	BC
                           A  2072    ;  200		write16bit(width);
                           A  2073    .LINE 200
                           A  2074    
0B06A9 DD070C              A  2075    	LD	BC,(IX+%C)
0B06AC C5                  A  2076    	PUSH	BC
0B06AD CD 77 26 0B         A  2077    	CALL	_write16bit
0B06B1 C1                  A  2078    	POP	BC
                           A  2079    ;  201		write16bit(height);
                           A  2080    .LINE 201
                           A  2081    
0B06B2 DD070F              A  2082    	LD	BC,(IX+%F)
0B06B5 C5                  A  2083    	PUSH	BC
0B06B6 CD 77 26 0B         A  2084    	CALL	_write16bit
0B06BA C1                  A  2085    	POP	BC
                           A  2086    ;  202		
                           A  2087    ;  203	}
                           A  2088    .LINE 203
                           A  2089    
0B06BB DDF9                A  2090    	LD	SP,IX
0B06BD DDE1                A  2091    	POP	IX
0B06BF C9                  A  2092    	RET	
                           A  2093    
                           A  2094    
                           A  2095    ;**************************** _assign_buffer_to
                           A  2096    ;Name                         Addr/Register   S
                           A  2097    ;_write16bit                         IMPORT  --
                           A  2098    ;_putch                              IMPORT  --
                           A  2099    ;height                               IX+15    
                           A  2100    ;width                                IX+12    
                           A  2101    ;bitmap_format                         IX+9    
                           A  2102    ;buffer_id                             IX+6    
                           A  2103    
                           A  2104    
                           A  2105    ; Stack Frame Size: 18 (bytes)
                           A  2106    ;       Spill Code: -3 (instruction)
                           A  2107    
                           A  2108    
                           A  2109    .ENDFUNC "assign_buffer_to_bitmap",203,"_assign
                           A  2110    ;  204	
                           A  2111    ;  205	void reorder(char *arr, uint16_t length
0B06C0                     A  2112    _reorder:
                           A  2113    .DEFINE "_reorder"
                           A  2114    
                           A  2115    .VALUE _reorder
                           A  2116    
                           A  2117    .CLASS 2
                           A  2118    
                           A  2119    .TYPE 65
                           A  2120    
                           A  2121    .ENDEF
                           A  2122    
                           A  2123    .BEGFUNC "reorder",205,"_reorder"
                           A  2124    
                           A  2125    .LINE 205
                           A  2126    
                           A  2127    .DEFINE "arr"
                           A  2128    
                           A  2129    .CLASS 65
                           A  2130    
                           A  2131    .VALUE 6
                           A  2132    
                           A  2133    .TYPE 34
                           A  2134    
                           A  2135    .ENDEF
                           A  2136    
                           A  2137    .DEFINE "length"
                           A  2138    
                           A  2139    .CLASS 65
                           A  2140    
                           A  2141    .VALUE 9
                           A  2142    
                           A  2143    .TYPE 13
                           A  2144    
                           A  2145    .ENDEF
                           A  2146    
                           A  2147    .DEFINE "i"
                           A  2148    
                           A  2149    .CLASS 65
                           A  2150    
                           A  2151    .VALUE -2
                           A  2152    
                           A  2153    .TYPE 13
                           A  2154    
                           A  2155    .ENDEF
                           A  2156    
                           A  2157    .DEFINE "temp"
                           A  2158    
                           A  2159    .CLASS 65
                           A  2160    
                           A  2161    .VALUE -3
                           A  2162    
                           A  2163    .TYPE 12
                           A  2164    
                           A  2165    .ENDEF
                           A  2166    
0B06C0 DDE5                A  2167    	PUSH	IX
0B06C2 DD210000 00         A  2168    	LD	IX,0
0B06C7 DD39                A  2169    	ADD	IX,SP
0B06C9 C5                  A  2170    	PUSH	BC
0B06CA C5                  A  2171    	PUSH	BC
                           A  2172    ;  206	    uint16_t i;
                           A  2173    ;  207		for (i = 0; i < length; i += 4) {
                           A  2174    .LINE 207
                           A  2175    
0B06CB DD36FE00            A  2176    	LD	(IX+%FFFFFFFE),%0
0B06CF DD36FF00            A  2177    	LD	(IX+%FFFFFFFF),%0
0B06D3 18 68               A  2178    	JR	L_43
0B06D5                     A  2179    L_41:
                           A  2180    ;  208	        if (i + 2 < length) {
                           A  2181    .LINE 208
                           A  2182    
0B06D5 DD07FE              A  2183    	LD	BC,(IX+%FFFFFFFE)
0B06D8 CD 1E 3A 0B         A  2184    	CALL	__stoiu
0B06DC E5D1                A  2185    	LD	DE,HL
0B06DE 13                  A  2186    	INC	DE
0B06DF 13                  A  2187    	INC	DE
0B06E0 DD0709              A  2188    	LD	BC,(IX+%9)
0B06E3 CD 1E 3A 0B         A  2189    	CALL	__stoiu
0B06E7 E5C1                A  2190    	LD	BC,HL
0B06E9 D5E1                A  2191    	LD	HL,DE
0B06EB B7                  A  2192    	OR	A,A
0B06EC ED42                A  2193    	SBC	HL,BC
0B06EE F2 F8 06 0B         A  2194    	JP	P,L__29
0B06F2 EA 31 07 0B         A  2195    	JP	PE,L_42
0B06F6 18 04               A  2196    	JR	L__30
0B06F8                     A  2197    L__29:
0B06F8 E2 31 07 0B         A  2198    	JP	PO,L_42
0B06FC                     A  2199    L__30:
                           A  2200    ;  209	            uint8_t temp = arr[i];
                           A  2201    .LINE 209
                           A  2202    
0B06FC DD07FE              A  2203    	LD	BC,(IX+%FFFFFFFE)
0B06FF CD 1E 3A 0B         A  2204    	CALL	__stoiu
0B0703 DD0706              A  2205    	LD	BC,(IX+%6)
0B0706 09                  A  2206    	ADD	HL,BC
0B0707 DD2FFA              A  2207    	LD	(IX+%FFFFFFFA),HL
0B070A 7E                  A  2208    	LD	A,(HL)
0B070B DD77FD              A  2209    	LD	(IX+%FFFFFFFD),A
                           A  2210    ;  210	            arr[i] = arr[i + 2];
                           A  2211    .LINE 210
                           A  2212    
0B070E DD31FA              A  2213    	LD	IY,(IX+%FFFFFFFA)
0B0711 DD07FE              A  2214    	LD	BC,(IX+%FFFFFFFE)
0B0714 CD 1E 3A 0B         A  2215    	CALL	__stoiu
0B0718 DD0706              A  2216    	LD	BC,(IX+%6)
0B071B 09                  A  2217    	ADD	HL,BC
0B071C FD7E02              A  2218    	LD	A,(IY+%2)
0B071F 77                  A  2219    	LD	(HL),A
                           A  2220    ;  211	            arr[i + 2] = temp;
                           A  2221    .LINE 211
                           A  2222    
0B0720 DD07FE              A  2223    	LD	BC,(IX+%FFFFFFFE)
0B0723 CD 1E 3A 0B         A  2224    	CALL	__stoiu
0B0727 DD0706              A  2225    	LD	BC,(IX+%6)
0B072A 09                  A  2226    	ADD	HL,BC
0B072B 23                  A  2227    	INC	HL
0B072C 23                  A  2228    	INC	HL
0B072D DD7EFD              A  2229    	LD	A,(IX+%FFFFFFFD)
0B0730 77                  A  2230    	LD	(HL),A
                           A  2231    ;  212	        }
                           A  2232    ;  213	    }
0B0731                     A  2233    L_42:
                           A  2234    .LINE 213
                           A  2235    
0B0731 DD31FE              A  2236    	LD	IY,(IX+%FFFFFFFE)
0B0734 ED2304              A  2237    	LEA	HL,IY+%4
0B0737 DD75FE              A  2238    	LD	(IX+%FFFFFFFE),L
0B073A DD74FF              A  2239    	LD	(IX+%FFFFFFFF),H
0B073D                     A  2240    L_43:
0B073D DD0709              A  2241    	LD	BC,(IX+%9)
0B0740 DD27FE              A  2242    	LD	HL,(IX+%FFFFFFFE)
0B0743 B7                  A  2243    	OR	A,A
0B0744 40ED42              A  2244    	SBC.SIS	HL,BC
0B0747 38 8C               A  2245    	JR	C,L_41
                           A  2246    ;  214	}
                           A  2247    .LINE 214
                           A  2248    
0B0749 DDF9                A  2249    	LD	SP,IX
0B074B DDE1                A  2250    	POP	IX
0B074D C9                  A  2251    	RET	
                           A  2252    
                           A  2253    
                           A  2254    ;**************************** _reorder ********
                           A  2255    ;Name                         Addr/Register   S
                           A  2256    ;temp                                  IX-3    
                           A  2257    ;i                                     IX-2    
                           A  2258    ;length                                IX+9    
                           A  2259    ;arr                                   IX+6    
                           A  2260    
                           A  2261    
                           A  2262    ; Stack Frame Size: 18 (bytes)
                           A  2263    ;       Spill Code: -3 (instruction)
                           A  2264    
                           A  2265    
                           A  2266    .ENDFUNC "reorder",214,"_reorder"
                           A  2267    ;  215	
                           A  2268    ;  216	void reorder_and_insert(char *arr, uint
0B074E                     A  2269    _reorder_and_insert:
                           A  2270    .DEFINE "_reorder_and_insert"
                           A  2271    
                           A  2272    .VALUE _reorder_and_insert
                           A  2273    
                           A  2274    .CLASS 2
                           A  2275    
                           A  2276    .TYPE 65
                           A  2277    
                           A  2278    .ENDEF
                           A  2279    
                           A  2280    .BEGFUNC "reorder_and_insert",216,"_reorder_and
                           A  2281    
                           A  2282    .LINE 216
                           A  2283    
                           A  2284    .DEFINE "arr"
                           A  2285    
                           A  2286    .CLASS 65
                           A  2287    
                           A  2288    .VALUE 6
                           A  2289    
                           A  2290    .TYPE 34
                           A  2291    
                           A  2292    .ENDEF
                           A  2293    
                           A  2294    .DEFINE "length"
                           A  2295    
                           A  2296    .CLASS 65
                           A  2297    
                           A  2298    .VALUE 9
                           A  2299    
                           A  2300    .TYPE 13
                           A  2301    
                           A  2302    .ENDEF
                           A  2303    
                           A  2304    .DEFINE "new_arr"
                           A  2305    
                           A  2306    .CLASS 65
                           A  2307    
                           A  2308    .VALUE 12
                           A  2309    
                           A  2310    .TYPE 290
                           A  2311    
                           A  2312    .ENDEF
                           A  2313    
                           A  2314    .DEFINE "new_length"
                           A  2315    
                           A  2316    .CLASS 65
                           A  2317    
                           A  2318    .VALUE 15
                           A  2319    
                           A  2320    .TYPE 45
                           A  2321    
                           A  2322    .ENDEF
                           A  2323    
                           A  2324    .DEFINE "insert_value"
                           A  2325    
                           A  2326    .CLASS 65
                           A  2327    
                           A  2328    .VALUE 18
                           A  2329    
                           A  2330    .TYPE 2
                           A  2331    
                           A  2332    .ENDEF
                           A  2333    
                           A  2334    .DEFINE "i"
                           A  2335    
                           A  2336    .CLASS 65
                           A  2337    
                           A  2338    .VALUE -2
                           A  2339    
                           A  2340    .TYPE 13
                           A  2341    
                           A  2342    .ENDEF
                           A  2343    
                           A  2344    .DEFINE "j"
                           A  2345    
                           A  2346    .CLASS 65
                           A  2347    
                           A  2348    .VALUE -4
                           A  2349    
                           A  2350    .TYPE 13
                           A  2351    
                           A  2352    .ENDEF
                           A  2353    
0B074E DDE5                A  2354    	PUSH	IX
0B0750 DD210000 00         A  2355    	LD	IX,0
0B0755 DD39                A  2356    	ADD	IX,SP
0B0757 ED22ED              A  2357    	LEA	HL,IX+%FFFFFFED
0B075A F9                  A  2358    	LD	SP,HL
                           A  2359    ;  217	
                           A  2360    ;  218		uint16_t i, j = 0;
                           A  2361    .LINE 218
                           A  2362    
0B075B DD36FC00            A  2363    	LD	(IX+%FFFFFFFC),%0
0B075F DD36FD00            A  2364    	LD	(IX+%FFFFFFFD),%0
                           A  2365    ;  219	    *new_length = (length / 3) * 4 + (l
                           A  2366    .LINE 219
                           A  2367    
0B0763 DD0709              A  2368    	LD	BC,(IX+%9)
0B0766 CD 1E 3A 0B         A  2369    	CALL	__stoiu
0B076A 01030000            A  2370    	LD	BC,3
0B076E CD E7 40 0B         A  2371    	CALL	__idivs
0B0772 29                  A  2372    	ADD	HL,HL
0B0773 29                  A  2373    	ADD	HL,HL
0B0774 E5D1                A  2374    	LD	DE,HL
0B0776 DD0709              A  2375    	LD	BC,(IX+%9)
0B0779 CD 1E 3A 0B         A  2376    	CALL	__stoiu
0B077D 01030000            A  2377    	LD	BC,3
0B0781 CD FA 37 0B         A  2378    	CALL	__irems
0B0785 19                  A  2379    	ADD	HL,DE
0B0786 E5C1                A  2380    	LD	BC,HL
0B0788 DD270F              A  2381    	LD	HL,(IX+%F)
0B078B 71                  A  2382    	LD	(HL),C
0B078C 23                  A  2383    	INC	HL
0B078D 70                  A  2384    	LD	(HL),B
                           A  2385    ;  220	    *new_arr = (char *) malloc(*new_len
                           A  2386    .LINE 220
                           A  2387    
0B078E DD270F              A  2388    	LD	HL,(IX+%F)
0B0791 ED07                A  2389    	LD	BC,(HL)
0B0793 CD 1E 3A 0B         A  2390    	CALL	__stoiu
0B0797 E5                  A  2391    	PUSH	HL
0B0798 CD 47 37 0B         A  2392    	CALL	_malloc
0B079C C1                  A  2393    	POP	BC
0B079D DD310C              A  2394    	LD	IY,(IX+%C)
0B07A0 FD2F00              A  2395    	LD	(IY),HL
                           A  2396    ;  221	
                           A  2397    ;  222	    for (i = 0; i < length; i += 3) {
                           A  2398    .LINE 222
                           A  2399    
0B07A3 DD36FE00            A  2400    	LD	(IX+%FFFFFFFE),%0
0B07A7 DD36FF00            A  2401    	LD	(IX+%FFFFFFFF),%0
0B07AB C3 B4 08 0B         A  2402    	JR	L_55
0B07AF                     A  2403    L_53:
                           A  2404    ;  223	        
                           A  2405    ;  224	        (*new_arr)[j] = (i + 2 < length
                           A  2406    .LINE 224
                           A  2407    
0B07AF DD07FE              A  2408    	LD	BC,(IX+%FFFFFFFE)
0B07B2 CD 1E 3A 0B         A  2409    	CALL	__stoiu
0B07B6 E5D1                A  2410    	LD	DE,HL
0B07B8 13                  A  2411    	INC	DE
0B07B9 13                  A  2412    	INC	DE
0B07BA DD0709              A  2413    	LD	BC,(IX+%9)
0B07BD CD 1E 3A 0B         A  2414    	CALL	__stoiu
0B07C1 E5C1                A  2415    	LD	BC,HL
0B07C3 D5E1                A  2416    	LD	HL,DE
0B07C5 B7                  A  2417    	OR	A,A
0B07C6 ED42                A  2418    	SBC	HL,BC
0B07C8 F2 D2 07 0B         A  2419    	JP	P,L__35
0B07CC EA EE 07 0B         A  2420    	JP	PE,L_47
0B07D0 18 04               A  2421    	JR	L__36
0B07D2                     A  2422    L__35:
0B07D2 E2 EE 07 0B         A  2423    	JP	PO,L_47
0B07D6                     A  2424    L__36:
0B07D6 DD07FE              A  2425    	LD	BC,(IX+%FFFFFFFE)
0B07D9 CD 1E 3A 0B         A  2426    	CALL	__stoiu
0B07DD DD0706              A  2427    	LD	BC,(IX+%6)
0B07E0 09                  A  2428    	ADD	HL,BC
0B07E1 23                  A  2429    	INC	HL
0B07E2 23                  A  2430    	INC	HL
0B07E3 7E                  A  2431    	LD	A,(HL)
0B07E4 47                  A  2432    	LD	B,A
0B07E5 17ED62              A  2433    	SEXT	HL
0B07E8 68                  A  2434    	LD	L,B
0B07E9 DD2FF9              A  2435    	LD	(IX+%FFFFFFF9),HL
0B07EC 18 07               A  2436    	JR	L_48
0B07EE                     A  2437    L_47:
0B07EE 01000000            A  2438    	LD	BC,0
0B07F2 DD0FF9              A  2439    	LD	(IX+%FFFFFFF9),BC
0B07F5                     A  2440    L_48:
0B07F5 DD310C              A  2441    	LD	IY,(IX+%C)
0B07F8 DD07FC              A  2442    	LD	BC,(IX+%FFFFFFFC)
0B07FB CD 1E 3A 0B         A  2443    	CALL	__stoiu
0B07FF FD0700              A  2444    	LD	BC,(IY)
0B0802 09                  A  2445    	ADD	HL,BC
0B0803 DD2FF3              A  2446    	LD	(IX+%FFFFFFF3),HL
0B0806 DD7EF9              A  2447    	LD	A,(IX+%FFFFFFF9)
0B0809 DD27F3              A  2448    	LD	HL,(IX+%FFFFFFF3)
0B080C 77                  A  2449    	LD	(HL),A
                           A  2450    ;  225	        (*new_arr)[j + 1] = (i + 1 < le
                           A  2451    .LINE 225
                           A  2452    
0B080D DD07FE              A  2453    	LD	BC,(IX+%FFFFFFFE)
0B0810 CD 1E 3A 0B         A  2454    	CALL	__stoiu
0B0814 E5D1                A  2455    	LD	DE,HL
0B0816 13                  A  2456    	INC	DE
0B0817 DD0709              A  2457    	LD	BC,(IX+%9)
0B081A CD 1E 3A 0B         A  2458    	CALL	__stoiu
0B081E E5C1                A  2459    	LD	BC,HL
0B0820 D5E1                A  2460    	LD	HL,DE
0B0822 B7                  A  2461    	OR	A,A
0B0823 ED42                A  2462    	SBC	HL,BC
0B0825 F2 2F 08 0B         A  2463    	JP	P,L__37
0B0829 EA 4A 08 0B         A  2464    	JP	PE,L_51
0B082D 18 04               A  2465    	JR	L__38
0B082F                     A  2466    L__37:
0B082F E2 4A 08 0B         A  2467    	JP	PO,L_51
0B0833                     A  2468    L__38:
0B0833 DD07FE              A  2469    	LD	BC,(IX+%FFFFFFFE)
0B0836 CD 1E 3A 0B         A  2470    	CALL	__stoiu
0B083A DD0706              A  2471    	LD	BC,(IX+%6)
0B083D 09                  A  2472    	ADD	HL,BC
0B083E 23                  A  2473    	INC	HL
0B083F 7E                  A  2474    	LD	A,(HL)
0B0840 47                  A  2475    	LD	B,A
0B0841 17ED62              A  2476    	SEXT	HL
0B0844 68                  A  2477    	LD	L,B
0B0845 DD2FF6              A  2478    	LD	(IX+%FFFFFFF6),HL
0B0848 18 07               A  2479    	JR	L_52
0B084A                     A  2480    L_51:
0B084A 01000000            A  2481    	LD	BC,0
0B084E DD0FF6              A  2482    	LD	(IX+%FFFFFFF6),BC
0B0851                     A  2483    L_52:
0B0851 DD7EF6              A  2484    	LD	A,(IX+%FFFFFFF6)
0B0854 DD27F3              A  2485    	LD	HL,(IX+%FFFFFFF3)
0B0857 23                  A  2486    	INC	HL
0B0858 77                  A  2487    	LD	(HL),A
                           A  2488    ;  226	        (*new_arr)[j + 2] = arr[i];
                           A  2489    .LINE 226
                           A  2490    
0B0859 DD07FE              A  2491    	LD	BC,(IX+%FFFFFFFE)
0B085C CD 1E 3A 0B         A  2492    	CALL	__stoiu
0B0860 DD0706              A  2493    	LD	BC,(IX+%6)
0B0863 09                  A  2494    	ADD	HL,BC
0B0864 E5FDE1              A  2495    	LD	IY,HL
0B0867 DD270C              A  2496    	LD	HL,(IX+%C)
0B086A DD2FED              A  2497    	LD	(IX+%FFFFFFED),HL	; spill
0B086D DD07FC              A  2498    	LD	BC,(IX+%FFFFFFFC)
0B0870 CD 1E 3A 0B         A  2499    	CALL	__stoiu
0B0874 DD2FF0              A  2500    	LD	(IX+%FFFFFFF0),HL	; spill
0B0877 DD27ED              A  2501    	LD	HL,(IX+%FFFFFFED)	; unspill
0B087A ED07                A  2502    	LD	BC,(HL)
0B087C DD27F0              A  2503    	LD	HL,(IX+%FFFFFFF0)	; unspill
0B087F 09                  A  2504    	ADD	HL,BC
0B0880 23                  A  2505    	INC	HL
0B0881 23                  A  2506    	INC	HL
0B0882 FD7E00              A  2507    	LD	A,(IY)
0B0885 77                  A  2508    	LD	(HL),A
                           A  2509    ;  227	        
                           A  2510    ;  228	        (*new_arr)[j + 3] = 0xFF;
                           A  2511    .LINE 228
                           A  2512    
0B0886 DD310C              A  2513    	LD	IY,(IX+%C)
0B0889 DD07FC              A  2514    	LD	BC,(IX+%FFFFFFFC)
0B088C CD 1E 3A 0B         A  2515    	CALL	__stoiu
0B0890 FD0700              A  2516    	LD	BC,(IY)
0B0893 09                  A  2517    	ADD	HL,BC
0B0894 E5FDE1              A  2518    	LD	IY,HL
0B0897 ED2303              A  2519    	LEA	HL,IY+%3
0B089A 36FF                A  2520    	LD	(HL),%FF
                           A  2521    ;  229	
                           A  2522    ;  230	        j += 4;
                           A  2523    .LINE 230
                           A  2524    
0B089C DD31FC              A  2525    	LD	IY,(IX+%FFFFFFFC)
0B089F ED2304              A  2526    	LEA	HL,IY+%4
0B08A2 DD75FC              A  2527    	LD	(IX+%FFFFFFFC),L
0B08A5 DD74FD              A  2528    	LD	(IX+%FFFFFFFD),H
0B08A8 DD31FE              A  2529    	LD	IY,(IX+%FFFFFFFE)
0B08AB ED2303              A  2530    	LEA	HL,IY+%3
0B08AE DD75FE              A  2531    	LD	(IX+%FFFFFFFE),L
0B08B1 DD74FF              A  2532    	LD	(IX+%FFFFFFFF),H
                           A  2533    ;  231	    }
0B08B4                     A  2534    L_55:
                           A  2535    .LINE 231
                           A  2536    
0B08B4 DD0709              A  2537    	LD	BC,(IX+%9)
0B08B7 DD27FE              A  2538    	LD	HL,(IX+%FFFFFFFE)
0B08BA B7                  A  2539    	OR	A,A
0B08BB 40ED42              A  2540    	SBC.SIS	HL,BC
0B08BE DA AF 07 0B         A  2541    	JR	C,L_53
                           A  2542    ;  232		
                           A  2543    ;  233	}
                           A  2544    .LINE 233
                           A  2545    
0B08C2 DDF9                A  2546    	LD	SP,IX
0B08C4 DDE1                A  2547    	POP	IX
0B08C6 C9                  A  2548    	RET	
                           A  2549    
                           A  2550    
                           A  2551    ;**************************** _reorder_and_inse
                           A  2552    ;Name                         Addr/Register   S
                           A  2553    ;_malloc                             IMPORT  --
                           A  2554    ;G_0                                  IX-13    
                           A  2555    ;temp49                               IX-10    
                           A  2556    ;temp45                                IX-7    
                           A  2557    ;j                                     IX-4    
                           A  2558    ;i                                     IX-2    
                           A  2559    ;insert_value                         IX+18    
                           A  2560    ;new_length                           IX+15    
                           A  2561    ;new_arr                              IX+12    
                           A  2562    ;length                                IX+9    
                           A  2563    ;arr                                   IX+6    
                           A  2564    
                           A  2565    
                           A  2566    ; Stack Frame Size: 40 (bytes)
                           A  2567    ;       Spill Code: -3 (instruction)
                           A  2568    
                           A  2569    
                           A  2570    .ENDFUNC "reorder_and_insert",233,"_reorder_and
                           A  2571    ;  234	
                           A  2572    ;  235	void bgr888_to_rgba2222(char *input, ch
0B08C7                     A  2573    _bgr888_to_rgba2222:
                           A  2574    .DEFINE "_bgr888_to_rgba2222"
                           A  2575    
                           A  2576    .VALUE _bgr888_to_rgba2222
                           A  2577    
                           A  2578    .CLASS 2
                           A  2579    
                           A  2580    .TYPE 65
                           A  2581    
                           A  2582    .ENDEF
                           A  2583    
                           A  2584    .BEGFUNC "bgr888_to_rgba2222",235,"_bgr888_to_r
                           A  2585    
                           A  2586    .LINE 235
                           A  2587    
                           A  2588    .DEFINE "input"
                           A  2589    
                           A  2590    .CLASS 65
                           A  2591    
                           A  2592    .VALUE 6
                           A  2593    
                           A  2594    .TYPE 34
                           A  2595    
                           A  2596    .ENDEF
                           A  2597    
                           A  2598    .DEFINE "output"
                           A  2599    
                           A  2600    .CLASS 65
                           A  2601    
                           A  2602    .VALUE 9
                           A  2603    
                           A  2604    .TYPE 34
                           A  2605    
                           A  2606    .ENDEF
                           A  2607    
                           A  2608    .DEFINE "num_pixels"
                           A  2609    
                           A  2610    .CLASS 65
                           A  2611    
                           A  2612    .VALUE 12
                           A  2613    
                           A  2614    .TYPE 14
                           A  2615    
                           A  2616    .ENDEF
                           A  2617    
                           A  2618    .DEFINE "input_ptr"
                           A  2619    
                           A  2620    .CLASS 65
                           A  2621    
                           A  2622    .VALUE -3
                           A  2623    
                           A  2624    .TYPE 34
                           A  2625    
                           A  2626    .ENDEF
                           A  2627    
                           A  2628    .DEFINE "output_ptr"
                           A  2629    
                           A  2630    .CLASS 65
                           A  2631    
                           A  2632    .VALUE -6
                           A  2633    
                           A  2634    .TYPE 34
                           A  2635    
                           A  2636    .ENDEF
                           A  2637    
                           A  2638    .DEFINE "b"
                           A  2639    
                           A  2640    .CLASS 65
                           A  2641    
                           A  2642    .VALUE -7
                           A  2643    
                           A  2644    .TYPE 12
                           A  2645    
                           A  2646    .ENDEF
                           A  2647    
                           A  2648    .DEFINE "g"
                           A  2649    
                           A  2650    .CLASS 65
                           A  2651    
                           A  2652    .VALUE -8
                           A  2653    
                           A  2654    .TYPE 12
                           A  2655    
                           A  2656    .ENDEF
                           A  2657    
                           A  2658    .DEFINE "r"
                           A  2659    
                           A  2660    .CLASS 65
                           A  2661    
                           A  2662    .VALUE -9
                           A  2663    
                           A  2664    .TYPE 12
                           A  2665    
                           A  2666    .ENDEF
                           A  2667    
0B08C7 DDE5                A  2668    	PUSH	IX
0B08C9 DD210000 00         A  2669    	LD	IX,0
0B08CE DD39                A  2670    	ADD	IX,SP
0B08D0 ED22EE              A  2671    	LEA	HL,IX+%FFFFFFEE
0B08D3 F9                  A  2672    	LD	SP,HL
                           A  2673    ;  236	    char *input_ptr = input;
                           A  2674    .LINE 236
                           A  2675    
0B08D4 DD0706              A  2676    	LD	BC,(IX+%6)
0B08D7 DD0FFD              A  2677    	LD	(IX+%FFFFFFFD),BC
                           A  2678    ;  237	    char *output_ptr = output;
                           A  2679    .LINE 237
                           A  2680    
0B08DA DD0709              A  2681    	LD	BC,(IX+%9)
0B08DD DD0FFA              A  2682    	LD	(IX+%FFFFFFFA),BC
                           A  2683    ;  238	
                           A  2684    ;  239	    while (num_pixels--) {
                           A  2685    .LINE 239
                           A  2686    
0B08E0 C3 6B 09 0B         A  2687    	JR	L_62
0B08E4                     A  2688    L_63:
                           A  2689    ;  240	        uint8_t b = *input_ptr++;
                           A  2690    .LINE 240
                           A  2691    
0B08E4 DD07FD              A  2692    	LD	BC,(IX+%FFFFFFFD)
0B08E7 DD0FF4              A  2693    	LD	(IX+%FFFFFFF4),BC
0B08EA DD07FD              A  2694    	LD	BC,(IX+%FFFFFFFD)
0B08ED 03                  A  2695    	INC	BC
0B08EE DD0FFD              A  2696    	LD	(IX+%FFFFFFFD),BC
0B08F1 DD27F4              A  2697    	LD	HL,(IX+%FFFFFFF4)
0B08F4 7E                  A  2698    	LD	A,(HL)
0B08F5 DD77F9              A  2699    	LD	(IX+%FFFFFFF9),A
                           A  2700    ;  241	        uint8_t g = *input_ptr++;
                           A  2701    .LINE 241
                           A  2702    
0B08F8 DD07FD              A  2703    	LD	BC,(IX+%FFFFFFFD)
0B08FB DD0FF1              A  2704    	LD	(IX+%FFFFFFF1),BC
0B08FE DD07FD              A  2705    	LD	BC,(IX+%FFFFFFFD)
0B0901 03                  A  2706    	INC	BC
0B0902 DD0FFD              A  2707    	LD	(IX+%FFFFFFFD),BC
0B0905 DD27F1              A  2708    	LD	HL,(IX+%FFFFFFF1)
0B0908 7E                  A  2709    	LD	A,(HL)
0B0909 DD77F8              A  2710    	LD	(IX+%FFFFFFF8),A
                           A  2711    ;  242	        uint8_t r = *input_ptr++;
                           A  2712    .LINE 242
                           A  2713    
0B090C DD07FD              A  2714    	LD	BC,(IX+%FFFFFFFD)
0B090F DD0FEE              A  2715    	LD	(IX+%FFFFFFEE),BC
0B0912 DD07FD              A  2716    	LD	BC,(IX+%FFFFFFFD)
0B0915 03                  A  2717    	INC	BC
0B0916 DD0FFD              A  2718    	LD	(IX+%FFFFFFFD),BC
0B0919 DD27EE              A  2719    	LD	HL,(IX+%FFFFFFEE)
0B091C 7E                  A  2720    	LD	A,(HL)
0B091D DD77F7              A  2721    	LD	(IX+%FFFFFFF7),A
                           A  2722    ;  243	        uint8_t a = 0xFF; // Alpha chan
                           A  2723    ;  244	
                           A  2724    ;  245			// *output_ptr = 0;
                           A  2725    ;  246			// *output_ptr |= CONVR64[r >> 
                           A  2726    ;  247			// *output_ptr |= CONVG64[g >> 
                           A  2727    ;  248			// *output_ptr |= CONVB64[b >> 
                           A  2728    ;  249			// *output_ptr |= CONVA64[a >> 
                           A  2729    ;  250			// output_ptr++;
                           A  2730    ;  251			
                           A  2731    ;  252			*output_ptr = ((r >> 6) & 0x03)
                           A  2732    ;  253	              (((g >> 6) & 0x03) << 2) 
                           A  2733    ;  254	              (((b >> 6) & 0x03) << 4) 
                           A  2734    ;  255	              (((a >> 6) & 0x03) << 6);
                           A  2735    .LINE 255
                           A  2736    
0B0920 DD7EF8              A  2737    	LD	A,(IX+%FFFFFFF8)
0B0923 B7ED62              A  2738    	UEXT	HL
0B0926 6F                  A  2739    	LD	L,A
0B0927 3E06                A  2740    	LD	A,%6
0B0929 CD 32 38 0B         A  2741    	CALL	__ishrs_b
0B092D 7D                  A  2742    	LD	A,L
0B092E E603                A  2743    	AND	A,%3
0B0930 87                  A  2744    	ADD	A,A
0B0931 87                  A  2745    	ADD	A,A
0B0932 47                  A  2746    	LD	B,A
0B0933 DD7EF7              A  2747    	LD	A,(IX+%FFFFFFF7)
0B0936 B7ED62              A  2748    	UEXT	HL
0B0939 6F                  A  2749    	LD	L,A
0B093A 3E06                A  2750    	LD	A,%6
0B093C CD 32 38 0B         A  2751    	CALL	__ishrs_b
0B0940 7D                  A  2752    	LD	A,L
0B0941 E603                A  2753    	AND	A,%3
0B0943 4F                  A  2754    	LD	C,A
0B0944 78                  A  2755    	LD	A,B
0B0945 B1                  A  2756    	OR	A,C
0B0946 47                  A  2757    	LD	B,A
0B0947 DD7EF9              A  2758    	LD	A,(IX+%FFFFFFF9)
0B094A B7ED62              A  2759    	UEXT	HL
0B094D 6F                  A  2760    	LD	L,A
0B094E 3E06                A  2761    	LD	A,%6
0B0950 CD 32 38 0B         A  2762    	CALL	__ishrs_b
0B0954 7D                  A  2763    	LD	A,L
0B0955 E603                A  2764    	AND	A,%3
0B0957 87                  A  2765    	ADD	A,A
0B0958 87                  A  2766    	ADD	A,A
0B0959 87                  A  2767    	ADD	A,A
0B095A 87                  A  2768    	ADD	A,A
0B095B 4F                  A  2769    	LD	C,A
0B095C 78                  A  2770    	LD	A,B
0B095D B1                  A  2771    	OR	A,C
0B095E F6C0                A  2772    	OR	A,%C0
0B0960 DD27FA              A  2773    	LD	HL,(IX+%FFFFFFFA)
0B0963 77                  A  2774    	LD	(HL),A
                           A  2775    ;  256			output_ptr++;
                           A  2776    .LINE 256
                           A  2777    
0B0964 DD07FA              A  2778    	LD	BC,(IX+%FFFFFFFA)
0B0967 03                  A  2779    	INC	BC
0B0968 DD0FFA              A  2780    	LD	(IX+%FFFFFFFA),BC
                           A  2781    ;  257			
                           A  2782    ;  258	    }
0B096B                     A  2783    L_62:
                           A  2784    .LINE 258
                           A  2785    
0B096B DD270C              A  2786    	LD	HL,(IX+%C)
0B096E DD310C              A  2787    	LD	IY,(IX+%C)
0B0971 ED33FF              A  2788    	LEA	IY,IY+%FFFFFFFF
0B0974 DD3E0C              A  2789    	LD	(IX+%C),IY
0B0977 01000000            A  2790    	LD	BC,0
0B097B B7                  A  2791    	OR	A,A
0B097C ED42                A  2792    	SBC	HL,BC
0B097E C2 E4 08 0B         A  2793    	JR	NZ,L_63
                           A  2794    ;  259	}
                           A  2795    .LINE 259
                           A  2796    
0B0982 DDF9                A  2797    	LD	SP,IX
0B0984 DDE1                A  2798    	POP	IX
0B0986 C9                  A  2799    	RET	
                           A  2800    
                           A  2801    
                           A  2802    ;**************************** _bgr888_to_rgba22
                           A  2803    ;Name                         Addr/Register   S
                           A  2804    ;r                                     IX-9    
                           A  2805    ;g                                     IX-8    
                           A  2806    ;b                                     IX-7    
                           A  2807    ;output_ptr                            IX-6    
                           A  2808    ;input_ptr                             IX-3    
                           A  2809    ;num_pixels                           IX+12    
                           A  2810    ;output                                IX+9    
                           A  2811    ;input                                 IX+6    
                           A  2812    
                           A  2813    
                           A  2814    ; Stack Frame Size: 33 (bytes)
                           A  2815    ;       Spill Code: -3 (instruction)
                           A  2816    
                           A  2817    
                           A  2818    .ENDFUNC "bgr888_to_rgba2222",259,"_bgr888_to_r
                           A  2819    ;  260	
                           A  2820    ;  261	void bgra8888_to_rgba2222(char *input, 
0B0987                     A  2821    _bgra8888_to_rgba2222:
                           A  2822    .DEFINE "_bgra8888_to_rgba2222"
                           A  2823    
                           A  2824    .VALUE _bgra8888_to_rgba2222
                           A  2825    
                           A  2826    .CLASS 2
                           A  2827    
                           A  2828    .TYPE 65
                           A  2829    
                           A  2830    .ENDEF
                           A  2831    
                           A  2832    .BEGFUNC "bgra8888_to_rgba2222",261,"_bgra8888_
                           A  2833    
                           A  2834    .LINE 261
                           A  2835    
                           A  2836    .DEFINE "input"
                           A  2837    
                           A  2838    .CLASS 65
                           A  2839    
                           A  2840    .VALUE 6
                           A  2841    
                           A  2842    .TYPE 34
                           A  2843    
                           A  2844    .ENDEF
                           A  2845    
                           A  2846    .DEFINE "output"
                           A  2847    
                           A  2848    .CLASS 65
                           A  2849    
                           A  2850    .VALUE 9
                           A  2851    
                           A  2852    .TYPE 34
                           A  2853    
                           A  2854    .ENDEF
                           A  2855    
                           A  2856    .DEFINE "num_pixels"
                           A  2857    
                           A  2858    .CLASS 65
                           A  2859    
                           A  2860    .VALUE 12
                           A  2861    
                           A  2862    .TYPE 14
                           A  2863    
                           A  2864    .ENDEF
                           A  2865    
                           A  2866    .DEFINE "input_ptr"
                           A  2867    
                           A  2868    .CLASS 65
                           A  2869    
                           A  2870    .VALUE -3
                           A  2871    
                           A  2872    .TYPE 34
                           A  2873    
                           A  2874    .ENDEF
                           A  2875    
                           A  2876    .DEFINE "output_ptr"
                           A  2877    
                           A  2878    .CLASS 65
                           A  2879    
                           A  2880    .VALUE -6
                           A  2881    
                           A  2882    .TYPE 34
                           A  2883    
                           A  2884    .ENDEF
                           A  2885    
                           A  2886    .DEFINE "b"
                           A  2887    
                           A  2888    .CLASS 65
                           A  2889    
                           A  2890    .VALUE -7
                           A  2891    
                           A  2892    .TYPE 12
                           A  2893    
                           A  2894    .ENDEF
                           A  2895    
                           A  2896    .DEFINE "g"
                           A  2897    
                           A  2898    .CLASS 65
                           A  2899    
                           A  2900    .VALUE -8
                           A  2901    
                           A  2902    .TYPE 12
                           A  2903    
                           A  2904    .ENDEF
                           A  2905    
                           A  2906    .DEFINE "r"
                           A  2907    
                           A  2908    .CLASS 65
                           A  2909    
                           A  2910    .VALUE -9
                           A  2911    
                           A  2912    .TYPE 12
                           A  2913    
                           A  2914    .ENDEF
                           A  2915    
                           A  2916    .DEFINE "a"
                           A  2917    
                           A  2918    .CLASS 65
                           A  2919    
                           A  2920    .VALUE -10
                           A  2921    
                           A  2922    .TYPE 12
                           A  2923    
                           A  2924    .ENDEF
                           A  2925    
0B0987 DDE5                A  2926    	PUSH	IX
0B0989 DD210000 00         A  2927    	LD	IX,0
0B098E DD39                A  2928    	ADD	IX,SP
0B0990 ED22EA              A  2929    	LEA	HL,IX+%FFFFFFEA
0B0993 F9                  A  2930    	LD	SP,HL
                           A  2931    ;  262	    char *input_ptr = input;
                           A  2932    .LINE 262
                           A  2933    
0B0994 DD0706              A  2934    	LD	BC,(IX+%6)
0B0997 DD0FFD              A  2935    	LD	(IX+%FFFFFFFD),BC
                           A  2936    ;  263	    char *output_ptr = output;
                           A  2937    .LINE 263
                           A  2938    
0B099A DD0709              A  2939    	LD	BC,(IX+%9)
0B099D DD0FFA              A  2940    	LD	(IX+%FFFFFFFA),BC
                           A  2941    ;  264	
                           A  2942    ;  265	    while (num_pixels--) {
                           A  2943    .LINE 265
                           A  2944    
0B09A0 C3 57 0A 0B         A  2945    	JR	L_71
0B09A4                     A  2946    L_72:
                           A  2947    ;  266	        uint8_t b = *input_ptr++;
                           A  2948    .LINE 266
                           A  2949    
0B09A4 DD07FD              A  2950    	LD	BC,(IX+%FFFFFFFD)
0B09A7 DD0FF3              A  2951    	LD	(IX+%FFFFFFF3),BC
0B09AA DD07FD              A  2952    	LD	BC,(IX+%FFFFFFFD)
0B09AD 03                  A  2953    	INC	BC
0B09AE DD0FFD              A  2954    	LD	(IX+%FFFFFFFD),BC
0B09B1 DD27F3              A  2955    	LD	HL,(IX+%FFFFFFF3)
0B09B4 7E                  A  2956    	LD	A,(HL)
0B09B5 DD77F9              A  2957    	LD	(IX+%FFFFFFF9),A
                           A  2958    ;  267	        uint8_t g = *input_ptr++;
                           A  2959    .LINE 267
                           A  2960    
0B09B8 DD07FD              A  2961    	LD	BC,(IX+%FFFFFFFD)
0B09BB DD0FF0              A  2962    	LD	(IX+%FFFFFFF0),BC
0B09BE DD07FD              A  2963    	LD	BC,(IX+%FFFFFFFD)
0B09C1 03                  A  2964    	INC	BC
0B09C2 DD0FFD              A  2965    	LD	(IX+%FFFFFFFD),BC
0B09C5 DD27F0              A  2966    	LD	HL,(IX+%FFFFFFF0)
0B09C8 7E                  A  2967    	LD	A,(HL)
0B09C9 DD77F8              A  2968    	LD	(IX+%FFFFFFF8),A
                           A  2969    ;  268	        uint8_t r = *input_ptr++;
                           A  2970    .LINE 268
                           A  2971    
0B09CC DD07FD              A  2972    	LD	BC,(IX+%FFFFFFFD)
0B09CF DD0FED              A  2973    	LD	(IX+%FFFFFFED),BC
0B09D2 DD07FD              A  2974    	LD	BC,(IX+%FFFFFFFD)
0B09D5 03                  A  2975    	INC	BC
0B09D6 DD0FFD              A  2976    	LD	(IX+%FFFFFFFD),BC
0B09D9 DD27ED              A  2977    	LD	HL,(IX+%FFFFFFED)
0B09DC 7E                  A  2978    	LD	A,(HL)
0B09DD DD77F7              A  2979    	LD	(IX+%FFFFFFF7),A
                           A  2980    ;  269	        uint8_t a = *input_ptr++;;
                           A  2981    .LINE 269
                           A  2982    
0B09E0 DD07FD              A  2983    	LD	BC,(IX+%FFFFFFFD)
0B09E3 DD0FEA              A  2984    	LD	(IX+%FFFFFFEA),BC
0B09E6 DD07FD              A  2985    	LD	BC,(IX+%FFFFFFFD)
0B09E9 03                  A  2986    	INC	BC
0B09EA DD0FFD              A  2987    	LD	(IX+%FFFFFFFD),BC
0B09ED DD27EA              A  2988    	LD	HL,(IX+%FFFFFFEA)
0B09F0 7E                  A  2989    	LD	A,(HL)
0B09F1 DD77F6              A  2990    	LD	(IX+%FFFFFFF6),A
                           A  2991    ;  270	
                           A  2992    ;  271			*output_ptr = ((r >> 6) & 0x03)
                           A  2993    ;  272	              (((g >> 6) & 0x03) << 2) 
                           A  2994    ;  273	              (((b >> 6) & 0x03) << 4) 
                           A  2995    ;  274	              (((a >> 6) & 0x03) << 6);
                           A  2996    .LINE 274
                           A  2997    
0B09F4 DD7EF8              A  2998    	LD	A,(IX+%FFFFFFF8)
0B09F7 B7ED62              A  2999    	UEXT	HL
0B09FA 6F                  A  3000    	LD	L,A
0B09FB 3E06                A  3001    	LD	A,%6
0B09FD CD 32 38 0B         A  3002    	CALL	__ishrs_b
0B0A01 7D                  A  3003    	LD	A,L
0B0A02 E603                A  3004    	AND	A,%3
0B0A04 87                  A  3005    	ADD	A,A
0B0A05 87                  A  3006    	ADD	A,A
0B0A06 47                  A  3007    	LD	B,A
0B0A07 DD7EF7              A  3008    	LD	A,(IX+%FFFFFFF7)
0B0A0A B7ED62              A  3009    	UEXT	HL
0B0A0D 6F                  A  3010    	LD	L,A
0B0A0E 3E06                A  3011    	LD	A,%6
0B0A10 CD 32 38 0B         A  3012    	CALL	__ishrs_b
0B0A14 7D                  A  3013    	LD	A,L
0B0A15 E603                A  3014    	AND	A,%3
0B0A17 4F                  A  3015    	LD	C,A
0B0A18 78                  A  3016    	LD	A,B
0B0A19 B1                  A  3017    	OR	A,C
0B0A1A 47                  A  3018    	LD	B,A
0B0A1B DD7EF9              A  3019    	LD	A,(IX+%FFFFFFF9)
0B0A1E B7ED62              A  3020    	UEXT	HL
0B0A21 6F                  A  3021    	LD	L,A
0B0A22 3E06                A  3022    	LD	A,%6
0B0A24 CD 32 38 0B         A  3023    	CALL	__ishrs_b
0B0A28 7D                  A  3024    	LD	A,L
0B0A29 E603                A  3025    	AND	A,%3
0B0A2B 87                  A  3026    	ADD	A,A
0B0A2C 87                  A  3027    	ADD	A,A
0B0A2D 87                  A  3028    	ADD	A,A
0B0A2E 87                  A  3029    	ADD	A,A
0B0A2F 4F                  A  3030    	LD	C,A
0B0A30 78                  A  3031    	LD	A,B
0B0A31 B1                  A  3032    	OR	A,C
0B0A32 57                  A  3033    	LD	D,A
0B0A33 DD7EF6              A  3034    	LD	A,(IX+%FFFFFFF6)
0B0A36 B7ED62              A  3035    	UEXT	HL
0B0A39 6F                  A  3036    	LD	L,A
0B0A3A 3E06                A  3037    	LD	A,%6
0B0A3C CD 32 38 0B         A  3038    	CALL	__ishrs_b
0B0A40 7D                  A  3039    	LD	A,L
0B0A41 E603                A  3040    	AND	A,%3
0B0A43 0606                A  3041    	LD	B,%6
0B0A45 CD 00 44 0B         A  3042    	CALL	__bshl
0B0A49 47                  A  3043    	LD	B,A
0B0A4A 7A                  A  3044    	LD	A,D
0B0A4B B0                  A  3045    	OR	A,B
0B0A4C DD27FA              A  3046    	LD	HL,(IX+%FFFFFFFA)
0B0A4F 77                  A  3047    	LD	(HL),A
                           A  3048    ;  275			output_ptr++;
                           A  3049    .LINE 275
                           A  3050    
0B0A50 DD07FA              A  3051    	LD	BC,(IX+%FFFFFFFA)
0B0A53 03                  A  3052    	INC	BC
0B0A54 DD0FFA              A  3053    	LD	(IX+%FFFFFFFA),BC
                           A  3054    ;  276			
                           A  3055    ;  277	    }
0B0A57                     A  3056    L_71:
                           A  3057    .LINE 277
                           A  3058    
0B0A57 DD270C              A  3059    	LD	HL,(IX+%C)
0B0A5A DD310C              A  3060    	LD	IY,(IX+%C)
0B0A5D ED33FF              A  3061    	LEA	IY,IY+%FFFFFFFF
0B0A60 DD3E0C              A  3062    	LD	(IX+%C),IY
0B0A63 01000000            A  3063    	LD	BC,0
0B0A67 B7                  A  3064    	OR	A,A
0B0A68 ED42                A  3065    	SBC	HL,BC
0B0A6A C2 A4 09 0B         A  3066    	JR	NZ,L_72
                           A  3067    ;  278	}
                           A  3068    .LINE 278
                           A  3069    
0B0A6E DDF9                A  3070    	LD	SP,IX
0B0A70 DDE1                A  3071    	POP	IX
0B0A72 C9                  A  3072    	RET	
                           A  3073    
                           A  3074    
                           A  3075    ;**************************** _bgra8888_to_rgba
                           A  3076    ;Name                         Addr/Register   S
                           A  3077    ;a                                    IX-10    
                           A  3078    ;r                                     IX-9    
                           A  3079    ;g                                     IX-8    
                           A  3080    ;b                                     IX-7    
                           A  3081    ;output_ptr                            IX-6    
                           A  3082    ;input_ptr                             IX-3    
                           A  3083    ;num_pixels                           IX+12    
                           A  3084    ;output                                IX+9    
                           A  3085    ;input                                 IX+6    
                           A  3086    
                           A  3087    
                           A  3088    ; Stack Frame Size: 37 (bytes)
                           A  3089    ;       Spill Code: -3 (instruction)
                           A  3090    
                           A  3091    
                           A  3092    .ENDFUNC "bgra8888_to_rgba2222",278,"_bgra8888_
                           A  3093    ;  279	
                           A  3094    ;  280	void generic8888_to_rgba2222(char *inpu
0B0A73                     A  3095    _generic8888_to_rgba2222:
                           A  3096    .DEFINE "_generic8888_to_rgba2222"
                           A  3097    
                           A  3098    .VALUE _generic8888_to_rgba2222
                           A  3099    
                           A  3100    .CLASS 2
                           A  3101    
                           A  3102    .TYPE 65
                           A  3103    
                           A  3104    .ENDEF
                           A  3105    
                           A  3106    .BEGFUNC "generic8888_to_rgba2222",280,"_generi
                           A  3107    
                           A  3108    .LINE 280
                           A  3109    
                           A  3110    .DEFINE "input"
                           A  3111    
                           A  3112    .CLASS 65
                           A  3113    
                           A  3114    .VALUE 6
                           A  3115    
                           A  3116    .TYPE 34
                           A  3117    
                           A  3118    .ENDEF
                           A  3119    
                           A  3120    .DEFINE "output"
                           A  3121    
                           A  3122    .CLASS 65
                           A  3123    
                           A  3124    .VALUE 9
                           A  3125    
                           A  3126    .TYPE 34
                           A  3127    
                           A  3128    .ENDEF
                           A  3129    
                           A  3130    .DEFINE "num_pixels"
                           A  3131    
                           A  3132    .CLASS 65
                           A  3133    
                           A  3134    .VALUE 12
                           A  3135    
                           A  3136    .TYPE 14
                           A  3137    
                           A  3138    .ENDEF
                           A  3139    
                           A  3140    .DEFINE "width"
                           A  3141    
                           A  3142    .CLASS 65
                           A  3143    
                           A  3144    .VALUE 15
                           A  3145    
                           A  3146    .TYPE 12
                           A  3147    
                           A  3148    .ENDEF
                           A  3149    
                           A  3150    .DEFINE "red_byte"
                           A  3151    
                           A  3152    .CLASS 65
                           A  3153    
                           A  3154    .VALUE 18
                           A  3155    
                           A  3156    .TYPE 2
                           A  3157    
                           A  3158    .ENDEF
                           A  3159    
                           A  3160    .DEFINE "green_byte"
                           A  3161    
                           A  3162    .CLASS 65
                           A  3163    
                           A  3164    .VALUE 21
                           A  3165    
                           A  3166    .TYPE 2
                           A  3167    
                           A  3168    .ENDEF
                           A  3169    
                           A  3170    .DEFINE "blue_byte"
                           A  3171    
                           A  3172    .CLASS 65
                           A  3173    
                           A  3174    .VALUE 24
                           A  3175    
                           A  3176    .TYPE 2
                           A  3177    
                           A  3178    .ENDEF
                           A  3179    
                           A  3180    .DEFINE "alpha_byte"
                           A  3181    
                           A  3182    .CLASS 65
                           A  3183    
                           A  3184    .VALUE 27
                           A  3185    
                           A  3186    .TYPE 2
                           A  3187    
                           A  3188    .ENDEF
                           A  3189    
                           A  3190    .DEFINE "input_ptr"
                           A  3191    
                           A  3192    .CLASS 65
                           A  3193    
                           A  3194    .VALUE -3
                           A  3195    
                           A  3196    .TYPE 34
                           A  3197    
                           A  3198    .ENDEF
                           A  3199    
                           A  3200    .DEFINE "output_ptr"
                           A  3201    
                           A  3202    .CLASS 65
                           A  3203    
                           A  3204    .VALUE -6
                           A  3205    
                           A  3206    .TYPE 34
                           A  3207    
                           A  3208    .ENDEF
                           A  3209    
                           A  3210    .DEFINE "r"
                           A  3211    
                           A  3212    .CLASS 65
                           A  3213    
                           A  3214    .VALUE -7
                           A  3215    
                           A  3216    .TYPE 12
                           A  3217    
                           A  3218    .ENDEF
                           A  3219    
                           A  3220    .DEFINE "g"
                           A  3221    
                           A  3222    .CLASS 65
                           A  3223    
                           A  3224    .VALUE -8
                           A  3225    
                           A  3226    .TYPE 12
                           A  3227    
                           A  3228    .ENDEF
                           A  3229    
                           A  3230    .DEFINE "b"
                           A  3231    
                           A  3232    .CLASS 65
                           A  3233    
                           A  3234    .VALUE -9
                           A  3235    
                           A  3236    .TYPE 12
                           A  3237    
                           A  3238    .ENDEF
                           A  3239    
                           A  3240    .DEFINE "a"
                           A  3241    
                           A  3242    .CLASS 65
                           A  3243    
                           A  3244    .VALUE -10
                           A  3245    
                           A  3246    .TYPE 12
                           A  3247    
                           A  3248    .ENDEF
                           A  3249    
0B0A73 DDE5                A  3250    	PUSH	IX
0B0A75 DD210000 00         A  3251    	LD	IX,0
0B0A7A DD39                A  3252    	ADD	IX,SP
0B0A7C ED22F3              A  3253    	LEA	HL,IX+%FFFFFFF3
0B0A7F F9                  A  3254    	LD	SP,HL
                           A  3255    ;  281	    char *input_ptr = input;
                           A  3256    .LINE 281
                           A  3257    
0B0A80 DD0706              A  3258    	LD	BC,(IX+%6)
0B0A83 DD0FFD              A  3259    	LD	(IX+%FFFFFFFD),BC
                           A  3260    ;  282	    char *output_ptr = output;
                           A  3261    .LINE 282
                           A  3262    
0B0A86 DD0709              A  3263    	LD	BC,(IX+%9)
0B0A89 DD0FFA              A  3264    	LD	(IX+%FFFFFFFA),BC
                           A  3265    ;  283	
                           A  3266    ;  284	    while (num_pixels--) {
                           A  3267    .LINE 284
                           A  3268    
0B0A8C C3 61 0B 0B         A  3269    	JR	L_80
0B0A90                     A  3270    L_81:
                           A  3271    ;  285	        uint8_t r = input_ptr[red_byte]
                           A  3272    .LINE 285
                           A  3273    
0B0A90 DD7E12              A  3274    	LD	A,(IX+%12)
0B0A93 17ED62              A  3275    	SEXT	HL
0B0A96 DD6E12              A  3276    	LD	L,(IX+%12)
0B0A99 DD07FD              A  3277    	LD	BC,(IX+%FFFFFFFD)
0B0A9C 09                  A  3278    	ADD	HL,BC
0B0A9D 7E                  A  3279    	LD	A,(HL)
0B0A9E DD77F9              A  3280    	LD	(IX+%FFFFFFF9),A
                           A  3281    ;  286	        uint8_t g = input_ptr[green_byt
                           A  3282    .LINE 286
                           A  3283    
0B0AA1 DD7E15              A  3284    	LD	A,(IX+%15)
0B0AA4 17ED62              A  3285    	SEXT	HL
0B0AA7 DD6E15              A  3286    	LD	L,(IX+%15)
0B0AAA DD07FD              A  3287    	LD	BC,(IX+%FFFFFFFD)
0B0AAD 09                  A  3288    	ADD	HL,BC
0B0AAE 7E                  A  3289    	LD	A,(HL)
0B0AAF DD77F8              A  3290    	LD	(IX+%FFFFFFF8),A
                           A  3291    ;  287	        uint8_t b = input_ptr[blue_byte
                           A  3292    .LINE 287
                           A  3293    
0B0AB2 DD7E18              A  3294    	LD	A,(IX+%18)
0B0AB5 17ED62              A  3295    	SEXT	HL
0B0AB8 DD6E18              A  3296    	LD	L,(IX+%18)
0B0ABB DD07FD              A  3297    	LD	BC,(IX+%FFFFFFFD)
0B0ABE 09                  A  3298    	ADD	HL,BC
0B0ABF 7E                  A  3299    	LD	A,(HL)
0B0AC0 DD77F7              A  3300    	LD	(IX+%FFFFFFF7),A
                           A  3301    ;  288	        uint8_t a = (alpha_byte < 0) ? 
                           A  3302    .LINE 288
                           A  3303    
0B0AC3 DD7E1B              A  3304    	LD	A,(IX+%1B)
0B0AC6 B7                  A  3305    	OR	A,A
0B0AC7 F2 D4 0A 0B         A  3306    	JP	P,L_77
0B0ACB 01FF0000            A  3307    	LD	BC,255
0B0ACF DD0FF3              A  3308    	LD	(IX+%FFFFFFF3),BC
0B0AD2 18 16               A  3309    	JR	L_78
0B0AD4                     A  3310    L_77:
0B0AD4 DD7E1B              A  3311    	LD	A,(IX+%1B)
0B0AD7 17ED62              A  3312    	SEXT	HL
0B0ADA DD6E1B              A  3313    	LD	L,(IX+%1B)
0B0ADD DD07FD              A  3314    	LD	BC,(IX+%FFFFFFFD)
0B0AE0 09                  A  3315    	ADD	HL,BC
0B0AE1 7E                  A  3316    	LD	A,(HL)
0B0AE2 47                  A  3317    	LD	B,A
0B0AE3 17ED62              A  3318    	SEXT	HL
0B0AE6 68                  A  3319    	LD	L,B
0B0AE7 DD2FF3              A  3320    	LD	(IX+%FFFFFFF3),HL
0B0AEA                     A  3321    L_78:
0B0AEA DD7EF3              A  3322    	LD	A,(IX+%FFFFFFF3)
0B0AED DD77F6              A  3323    	LD	(IX+%FFFFFFF6),A
                           A  3324    ;  289	
                           A  3325    ;  290			*output_ptr = ((r >> 6) & 0x03)
                           A  3326    ;  291	              (((g >> 6) & 0x03) << 2) 
                           A  3327    ;  292	              (((b >> 6) & 0x03) << 4) 
                           A  3328    ;  293	              (((a >> 6) & 0x03) << 6);
                           A  3329    .LINE 293
                           A  3330    
0B0AF0 DD7EF8              A  3331    	LD	A,(IX+%FFFFFFF8)
0B0AF3 B7ED62              A  3332    	UEXT	HL
0B0AF6 6F                  A  3333    	LD	L,A
0B0AF7 3E06                A  3334    	LD	A,%6
0B0AF9 CD 32 38 0B         A  3335    	CALL	__ishrs_b
0B0AFD 7D                  A  3336    	LD	A,L
0B0AFE E603                A  3337    	AND	A,%3
0B0B00 87                  A  3338    	ADD	A,A
0B0B01 87                  A  3339    	ADD	A,A
0B0B02 4F                  A  3340    	LD	C,A
0B0B03 DD7EF9              A  3341    	LD	A,(IX+%FFFFFFF9)
0B0B06 B7ED62              A  3342    	UEXT	HL
0B0B09 6F                  A  3343    	LD	L,A
0B0B0A 3E06                A  3344    	LD	A,%6
0B0B0C CD 32 38 0B         A  3345    	CALL	__ishrs_b
0B0B10 7D                  A  3346    	LD	A,L
0B0B11 E603                A  3347    	AND	A,%3
0B0B13 47                  A  3348    	LD	B,A
0B0B14 79                  A  3349    	LD	A,C
0B0B15 B0                  A  3350    	OR	A,B
0B0B16 4F                  A  3351    	LD	C,A
0B0B17 DD7EF7              A  3352    	LD	A,(IX+%FFFFFFF7)
0B0B1A B7ED62              A  3353    	UEXT	HL
0B0B1D 6F                  A  3354    	LD	L,A
0B0B1E 3E06                A  3355    	LD	A,%6
0B0B20 CD 32 38 0B         A  3356    	CALL	__ishrs_b
0B0B24 7D                  A  3357    	LD	A,L
0B0B25 E603                A  3358    	AND	A,%3
0B0B27 87                  A  3359    	ADD	A,A
0B0B28 87                  A  3360    	ADD	A,A
0B0B29 87                  A  3361    	ADD	A,A
0B0B2A 87                  A  3362    	ADD	A,A
0B0B2B 47                  A  3363    	LD	B,A
0B0B2C 79                  A  3364    	LD	A,C
0B0B2D B0                  A  3365    	OR	A,B
0B0B2E 57                  A  3366    	LD	D,A
0B0B2F DD7EF6              A  3367    	LD	A,(IX+%FFFFFFF6)
0B0B32 B7ED62              A  3368    	UEXT	HL
0B0B35 6F                  A  3369    	LD	L,A
0B0B36 3E06                A  3370    	LD	A,%6
0B0B38 CD 32 38 0B         A  3371    	CALL	__ishrs_b
0B0B3C 7D                  A  3372    	LD	A,L
0B0B3D E603                A  3373    	AND	A,%3
0B0B3F 0606                A  3374    	LD	B,%6
0B0B41 CD 00 44 0B         A  3375    	CALL	__bshl
0B0B45 47                  A  3376    	LD	B,A
0B0B46 7A                  A  3377    	LD	A,D
0B0B47 B0                  A  3378    	OR	A,B
0B0B48 DD27FA              A  3379    	LD	HL,(IX+%FFFFFFFA)
0B0B4B 77                  A  3380    	LD	(HL),A
                           A  3381    ;  294			output_ptr++;
                           A  3382    .LINE 294
                           A  3383    
0B0B4C DD07FA              A  3384    	LD	BC,(IX+%FFFFFFFA)
0B0B4F 03                  A  3385    	INC	BC
0B0B50 DD0FFA              A  3386    	LD	(IX+%FFFFFFFA),BC
                           A  3387    ;  295			
                           A  3388    ;  296			input_ptr += width;
                           A  3389    .LINE 296
                           A  3390    
0B0B53 DD7E0F              A  3391    	LD	A,(IX+%F)
0B0B56 B7ED62              A  3392    	UEXT	HL
0B0B59 6F                  A  3393    	LD	L,A
0B0B5A DD07FD              A  3394    	LD	BC,(IX+%FFFFFFFD)
0B0B5D 09                  A  3395    	ADD	HL,BC
0B0B5E DD2FFD              A  3396    	LD	(IX+%FFFFFFFD),HL
                           A  3397    ;  297			
                           A  3398    ;  298	    }
0B0B61                     A  3399    L_80:
                           A  3400    .LINE 298
                           A  3401    
0B0B61 DD270C              A  3402    	LD	HL,(IX+%C)
0B0B64 DD310C              A  3403    	LD	IY,(IX+%C)
0B0B67 ED33FF              A  3404    	LEA	IY,IY+%FFFFFFFF
0B0B6A DD3E0C              A  3405    	LD	(IX+%C),IY
0B0B6D 01000000            A  3406    	LD	BC,0
0B0B71 B7                  A  3407    	OR	A,A
0B0B72 ED42                A  3408    	SBC	HL,BC
0B0B74 C2 90 0A 0B         A  3409    	JR	NZ,L_81
                           A  3410    ;  299	}
                           A  3411    .LINE 299
                           A  3412    
0B0B78 DDF9                A  3413    	LD	SP,IX
0B0B7A DDE1                A  3414    	POP	IX
0B0B7C C9                  A  3415    	RET	
                           A  3416    
                           A  3417    
                           A  3418    ;**************************** _generic8888_to_r
                           A  3419    ;Name                         Addr/Register   S
                           A  3420    ;temp75                               IX-13    
                           A  3421    ;a                                    IX-10    
                           A  3422    ;b                                     IX-9    
                           A  3423    ;g                                     IX-8    
                           A  3424    ;r                                     IX-7    
                           A  3425    ;output_ptr                            IX-6    
                           A  3426    ;input_ptr                             IX-3    
                           A  3427    ;alpha_byte                           IX+27    
                           A  3428    ;blue_byte                            IX+24    
                           A  3429    ;green_byte                           IX+21    
                           A  3430    ;red_byte                             IX+18    
                           A  3431    ;width                                IX+15    
                           A  3432    ;num_pixels                           IX+12    
                           A  3433    ;output                                IX+9    
                           A  3434    ;input                                 IX+6    
                           A  3435    
                           A  3436    
                           A  3437    ; Stack Frame Size: 43 (bytes)
                           A  3438    ;       Spill Code: -3 (instruction)
                           A  3439    
                           A  3440    
                           A  3441    .ENDFUNC "generic8888_to_rgba2222",299,"_generi
                           A  3442    ;  300	
                           A  3443    ;  301	void rgbx5551_to_rgba2222(const uint16_
0B0B7D                     A  3444    _rgbx5551_to_rgba2222:
                           A  3445    .DEFINE "_rgbx5551_to_rgba2222"
                           A  3446    
                           A  3447    .VALUE _rgbx5551_to_rgba2222
                           A  3448    
                           A  3449    .CLASS 2
                           A  3450    
                           A  3451    .TYPE 65
                           A  3452    
                           A  3453    .ENDEF
                           A  3454    
                           A  3455    .BEGFUNC "rgbx5551_to_rgba2222",301,"_rgbx5551_
                           A  3456    
                           A  3457    .LINE 301
                           A  3458    
                           A  3459    .DEFINE "src"
                           A  3460    
                           A  3461    .CLASS 65
                           A  3462    
                           A  3463    .VALUE 6
                           A  3464    
                           A  3465    .TYPE 205
                           A  3466    
                           A  3467    .ENDEF
                           A  3468    
                           A  3469    .DEFINE "dest"
                           A  3470    
                           A  3471    .CLASS 65
                           A  3472    
                           A  3473    .VALUE 9
                           A  3474    
                           A  3475    .TYPE 44
                           A  3476    
                           A  3477    .ENDEF
                           A  3478    
                           A  3479    .DEFINE "width"
                           A  3480    
                           A  3481    .CLASS 65
                           A  3482    
                           A  3483    .VALUE 12
                           A  3484    
                           A  3485    .TYPE 4
                           A  3486    
                           A  3487    .ENDEF
                           A  3488    
                           A  3489    .DEFINE "i"
                           A  3490    
                           A  3491    .CLASS 65
                           A  3492    
                           A  3493    .VALUE -2
                           A  3494    
                           A  3495    .TYPE 3
                           A  3496    
                           A  3497    .ENDEF
                           A  3498    
                           A  3499    .DEFINE "pixel"
                           A  3500    
                           A  3501    .CLASS 65
                           A  3502    
                           A  3503    .VALUE -4
                           A  3504    
                           A  3505    .TYPE 13
                           A  3506    
                           A  3507    .ENDEF
                           A  3508    
                           A  3509    .DEFINE "g"
                           A  3510    
                           A  3511    .CLASS 65
                           A  3512    
                           A  3513    .VALUE -5
                           A  3514    
                           A  3515    .TYPE 12
                           A  3516    
                           A  3517    .ENDEF
                           A  3518    
                           A  3519    .DEFINE "b"
                           A  3520    
                           A  3521    .CLASS 65
                           A  3522    
                           A  3523    .VALUE -6
                           A  3524    
                           A  3525    .TYPE 12
                           A  3526    
                           A  3527    .ENDEF
                           A  3528    
                           A  3529    .DEFINE "r"
                           A  3530    
                           A  3531    .CLASS 65
                           A  3532    
                           A  3533    .VALUE -7
                           A  3534    
                           A  3535    .TYPE 12
                           A  3536    
                           A  3537    .ENDEF
                           A  3538    
0B0B7D DDE5                A  3539    	PUSH	IX
0B0B7F DD210000 00         A  3540    	LD	IX,0
0B0B84 DD39                A  3541    	ADD	IX,SP
0B0B86 C5                  A  3542    	PUSH	BC
0B0B87 C5                  A  3543    	PUSH	BC
0B0B88 3B                  A  3544    	DEC	SP
                           A  3545    ;  302	    
                           A  3546    ;  303		int16_t i;
                           A  3547    ;  304		uint8_t r,g,b;
                           A  3548    ;  305		uint16_t pixel;
                           A  3549    ;  306		for (i = 0; i < width; i++) {
                           A  3550    .LINE 306
                           A  3551    
0B0B89 DD36FE00            A  3552    	LD	(IX+%FFFFFFFE),%0
0B0B8D DD36FF00            A  3553    	LD	(IX+%FFFFFFFF),%0
0B0B91 C3 36 0C 0B         A  3554    	JR	L_86
0B0B95                     A  3555    L_84:
                           A  3556    ;  307	       
                           A  3557    ;  308	        pixel = src[i];
                           A  3558    .LINE 308
                           A  3559    
0B0B95 DD07FE              A  3560    	LD	BC,(IX+%FFFFFFFE)
0B0B98 CD 6A 43 0B         A  3561    	CALL	__stoi
0B0B9C 29                  A  3562    	ADD	HL,HL
0B0B9D DD0706              A  3563    	LD	BC,(IX+%6)
0B0BA0 09                  A  3564    	ADD	HL,BC
0B0BA1 ED07                A  3565    	LD	BC,(HL)
0B0BA3 DD71FC              A  3566    	LD	(IX+%FFFFFFFC),C
0B0BA6 DD70FD              A  3567    	LD	(IX+%FFFFFFFD),B
                           A  3568    ;  309	        r = ((pixel >> 10) & 0x1F) << 3
                           A  3569    .LINE 309
                           A  3570    
0B0BA9 DD07FC              A  3571    	LD	BC,(IX+%FFFFFFFC)
0B0BAC CD 1E 3A 0B         A  3572    	CALL	__stoiu
0B0BB0 3E0A                A  3573    	LD	A,%A
0B0BB2 CD 32 38 0B         A  3574    	CALL	__ishrs_b
0B0BB6 7D                  A  3575    	LD	A,L
0B0BB7 E61F                A  3576    	AND	A,%1F
0B0BB9 87                  A  3577    	ADD	A,A
0B0BBA 87                  A  3578    	ADD	A,A
0B0BBB 87                  A  3579    	ADD	A,A
0B0BBC DD77F9              A  3580    	LD	(IX+%FFFFFFF9),A
                           A  3581    ;  310	        g = ((pixel >> 5) & 0x1F) << 3;
                           A  3582    .LINE 310
                           A  3583    
0B0BBF DD07FC              A  3584    	LD	BC,(IX+%FFFFFFFC)
0B0BC2 CD 1E 3A 0B         A  3585    	CALL	__stoiu
0B0BC6 3E05                A  3586    	LD	A,%5
0B0BC8 CD 32 38 0B         A  3587    	CALL	__ishrs_b
0B0BCC 7D                  A  3588    	LD	A,L
0B0BCD E61F                A  3589    	AND	A,%1F
0B0BCF 87                  A  3590    	ADD	A,A
0B0BD0 87                  A  3591    	ADD	A,A
0B0BD1 87                  A  3592    	ADD	A,A
0B0BD2 DD77FB              A  3593    	LD	(IX+%FFFFFFFB),A
                           A  3594    ;  311	        b = (pixel & 0x1F) << 3;
                           A  3595    .LINE 311
                           A  3596    
0B0BD5 DD7EFC              A  3597    	LD	A,(IX+%FFFFFFFC)
0B0BD8 E61F                A  3598    	AND	A,%1F
0B0BDA 87                  A  3599    	ADD	A,A
0B0BDB 87                  A  3600    	ADD	A,A
0B0BDC 87                  A  3601    	ADD	A,A
0B0BDD DD77FA              A  3602    	LD	(IX+%FFFFFFFA),A
                           A  3603    ;  312	
                           A  3604    ;  313	        dest[i] = ((r >> 6) & 0x03) | 
                           A  3605    ;  314	              (((g >> 6) & 0x03) << 2) 
                           A  3606    ;  315	              (((b >> 6) & 0x03) << 4) 
                           A  3607    ;  316	              0xC0;
                           A  3608    .LINE 316
                           A  3609    
0B0BE0 DD7EFB              A  3610    	LD	A,(IX+%FFFFFFFB)
0B0BE3 B7ED62              A  3611    	UEXT	HL
0B0BE6 6F                  A  3612    	LD	L,A
0B0BE7 3E06                A  3613    	LD	A,%6
0B0BE9 CD 32 38 0B         A  3614    	CALL	__ishrs_b
0B0BED 7D                  A  3615    	LD	A,L
0B0BEE E603                A  3616    	AND	A,%3
0B0BF0 87                  A  3617    	ADD	A,A
0B0BF1 87                  A  3618    	ADD	A,A
0B0BF2 4F                  A  3619    	LD	C,A
0B0BF3 DD7EF9              A  3620    	LD	A,(IX+%FFFFFFF9)
0B0BF6 B7ED62              A  3621    	UEXT	HL
0B0BF9 6F                  A  3622    	LD	L,A
0B0BFA 3E06                A  3623    	LD	A,%6
0B0BFC CD 32 38 0B         A  3624    	CALL	__ishrs_b
0B0C00 7D                  A  3625    	LD	A,L
0B0C01 E603                A  3626    	AND	A,%3
0B0C03 47                  A  3627    	LD	B,A
0B0C04 79                  A  3628    	LD	A,C
0B0C05 B0                  A  3629    	OR	A,B
0B0C06 4F                  A  3630    	LD	C,A
0B0C07 DD7EFA              A  3631    	LD	A,(IX+%FFFFFFFA)
0B0C0A B7ED62              A  3632    	UEXT	HL
0B0C0D 6F                  A  3633    	LD	L,A
0B0C0E 3E06                A  3634    	LD	A,%6
0B0C10 CD 32 38 0B         A  3635    	CALL	__ishrs_b
0B0C14 7D                  A  3636    	LD	A,L
0B0C15 E603                A  3637    	AND	A,%3
0B0C17 87                  A  3638    	ADD	A,A
0B0C18 87                  A  3639    	ADD	A,A
0B0C19 87                  A  3640    	ADD	A,A
0B0C1A 87                  A  3641    	ADD	A,A
0B0C1B 47                  A  3642    	LD	B,A
0B0C1C 79                  A  3643    	LD	A,C
0B0C1D B0                  A  3644    	OR	A,B
0B0C1E F6C0                A  3645    	OR	A,%C0
0B0C20 DD07FE              A  3646    	LD	BC,(IX+%FFFFFFFE)
0B0C23 CD 6A 43 0B         A  3647    	CALL	__stoi
0B0C27 DD0709              A  3648    	LD	BC,(IX+%9)
0B0C2A 09                  A  3649    	ADD	HL,BC
0B0C2B 77                  A  3650    	LD	(HL),A
0B0C2C DD27FE              A  3651    	LD	HL,(IX+%FFFFFFFE)
0B0C2F 23                  A  3652    	INC	HL
0B0C30 DD75FE              A  3653    	LD	(IX+%FFFFFFFE),L
0B0C33 DD74FF              A  3654    	LD	(IX+%FFFFFFFF),H
                           A  3655    ;  317	    }
0B0C36                     A  3656    L_86:
                           A  3657    .LINE 317
                           A  3658    
0B0C36 DD07FE              A  3659    	LD	BC,(IX+%FFFFFFFE)
0B0C39 CD 6A 43 0B         A  3660    	CALL	__stoi
0B0C3D DD070C              A  3661    	LD	BC,(IX+%C)
0B0C40 B7                  A  3662    	OR	A,A
0B0C41 ED42                A  3663    	SBC	HL,BC
0B0C43 FA 4D 0C 0B         A  3664    	JP	M,L__48
0B0C47 EA 95 0B 0B         A  3665    	JP	PE,L_84
0B0C4B 18 04               A  3666    	JR	L__49
0B0C4D                     A  3667    L__48:
0B0C4D E2 95 0B 0B         A  3668    	JP	PO,L_84
0B0C51                     A  3669    L__49:
                           A  3670    ;  318	}
                           A  3671    .LINE 318
                           A  3672    
0B0C51 DDF9                A  3673    	LD	SP,IX
0B0C53 DDE1                A  3674    	POP	IX
0B0C55 C9                  A  3675    	RET	
                           A  3676    
                           A  3677    
                           A  3678    ;**************************** _rgbx5551_to_rgba
                           A  3679    ;Name                         Addr/Register   S
                           A  3680    ;r                                     IX-7    
                           A  3681    ;b                                     IX-6    
                           A  3682    ;g                                     IX-5    
                           A  3683    ;pixel                                 IX-4    
                           A  3684    ;i                                     IX-2    
                           A  3685    ;width                                IX+12    
                           A  3686    ;dest                                  IX+9    
                           A  3687    ;src                                   IX+6    
                           A  3688    
                           A  3689    
                           A  3690    ; Stack Frame Size: 22 (bytes)
                           A  3691    ;       Spill Code: -3 (instruction)
                           A  3692    
                           A  3693    
                           A  3694    .ENDFUNC "rgbx5551_to_rgba2222",318,"_rgbx5551_
                           A  3695    ;  319	
                           A  3696    ;  320	int8_t getByte(uint32_t bitmask) {
0B0C56                     A  3697    _getByte:
                           A  3698    .DEFINE "_getByte"
                           A  3699    
                           A  3700    .VALUE _getByte
                           A  3701    
                           A  3702    .CLASS 2
                           A  3703    
                           A  3704    .TYPE 66
                           A  3705    
                           A  3706    .ENDEF
                           A  3707    
                           A  3708    .BEGFUNC "getByte",320,"_getByte"
                           A  3709    
                           A  3710    .LINE 320
                           A  3711    
                           A  3712    .DEFINE "bitmask"
                           A  3713    
                           A  3714    .CLASS 65
                           A  3715    
                           A  3716    .VALUE 6
                           A  3717    
                           A  3718    .TYPE 15
                           A  3719    
                           A  3720    .ENDEF
                           A  3721    
0B0C56 DDE5                A  3722    	PUSH	IX
0B0C58 DD210000 00         A  3723    	LD	IX,0
0B0C5D DD39                A  3724    	ADD	IX,SP
                           A  3725    ;  321	
                           A  3726    ;  322	    if (bitmask & 0xFF) {
                           A  3727    .LINE 322
                           A  3728    
0B0C5F B7ED62              A  3729    	UEXT	HL
0B0C62 DD6E06              A  3730    	LD	L,(IX+%6)
0B0C65 5C                  A  3731    	LD	E,H
0B0C66 01000000            A  3732    	LD	BC,0
0B0C6A AF                  A  3733    	XOR	A,A
0B0C6B CD 6A 41 0B         A  3734    	CALL	__lcmpu
0B0C6F 28 03               A  3735    	JR	Z,L_94
                           A  3736    ;  323	        return 0;
                           A  3737    .LINE 323
                           A  3738    
0B0C71 AF                  A  3739    	XOR	A,A
0B0C72 18 56               A  3740    	JR	L_96
                           A  3741    ;  324	    }
                           A  3742    ;  325	    else if ((bitmask >> 8) & 0xFF) {
0B0C74                     A  3743    L_94:
                           A  3744    .LINE 325
                           A  3745    
0B0C74 DD0707              A  3746    	LD	BC,(IX+%7)
0B0C77 B7ED62              A  3747    	UEXT	HL
0B0C7A 69                  A  3748    	LD	L,C
0B0C7B 5C                  A  3749    	LD	E,H
0B0C7C 01000000            A  3750    	LD	BC,0
0B0C80 AF                  A  3751    	XOR	A,A
0B0C81 CD 6A 41 0B         A  3752    	CALL	__lcmpu
0B0C85 28 04               A  3753    	JR	Z,L_92
                           A  3754    ;  326	        return 1;
                           A  3755    .LINE 326
                           A  3756    
0B0C87 3E01                A  3757    	LD	A,%1
0B0C89 18 3F               A  3758    	JR	L_96
                           A  3759    ;  327	    }
                           A  3760    ;  328		else if ((bitmask >> 16) & 0xFF) {
0B0C8B                     A  3761    L_92:
                           A  3762    .LINE 328
                           A  3763    
0B0C8B B7ED62              A  3764    	UEXT	HL
0B0C8E E5                  A  3765    	PUSH	HL
0B0C8F DD0707              A  3766    	LD	BC,(IX+%7)
0B0C92 C5                  A  3767    	PUSH	BC
0B0C93 33                  A  3768    	INC	SP
0B0C94 C1                  A  3769    	POP	BC
0B0C95 33                  A  3770    	INC	SP
0B0C96 33                  A  3771    	INC	SP
0B0C97 B7ED62              A  3772    	UEXT	HL
0B0C9A 69                  A  3773    	LD	L,C
0B0C9B 5C                  A  3774    	LD	E,H
0B0C9C 01000000            A  3775    	LD	BC,0
0B0CA0 AF                  A  3776    	XOR	A,A
0B0CA1 CD 6A 41 0B         A  3777    	CALL	__lcmpu
0B0CA5 28 04               A  3778    	JR	Z,L_90
                           A  3779    ;  329	        return 2;
                           A  3780    .LINE 329
                           A  3781    
0B0CA7 3E02                A  3782    	LD	A,%2
0B0CA9 18 1F               A  3783    	JR	L_96
                           A  3784    ;  330	    }
                           A  3785    ;  331	    else if ((bitmask >> 24) & 0xFF) {
0B0CAB                     A  3786    L_90:
                           A  3787    .LINE 331
                           A  3788    
0B0CAB DD7E09              A  3789    	LD	A,(IX+%9)
0B0CAE B7ED62              A  3790    	UEXT	HL
0B0CB1 6F                  A  3791    	LD	L,A
0B0CB2 E5C1                A  3792    	LD	BC,HL
0B0CB4 B7ED62              A  3793    	UEXT	HL
0B0CB7 69                  A  3794    	LD	L,C
0B0CB8 5C                  A  3795    	LD	E,H
0B0CB9 01000000            A  3796    	LD	BC,0
0B0CBD AF                  A  3797    	XOR	A,A
0B0CBE CD 6A 41 0B         A  3798    	CALL	__lcmpu
0B0CC2 28 04               A  3799    	JR	Z,L_95
                           A  3800    ;  332	        return 3;
                           A  3801    .LINE 332
                           A  3802    
0B0CC4 3E03                A  3803    	LD	A,%3
0B0CC6 18 02               A  3804    	JR	L_96
                           A  3805    ;  333	    }
0B0CC8                     A  3806    L_95:
                           A  3807    .LINE 333
                           A  3808    
                           A  3809    ;  334	
                           A  3810    ;  335	    return -1;
                           A  3811    .LINE 335
                           A  3812    
0B0CC8 3EFF                A  3813    	LD	A,%FF
                           A  3814    ;  336	}
0B0CCA                     A  3815    L_96:
                           A  3816    .LINE 336
                           A  3817    
0B0CCA DDF9                A  3818    	LD	SP,IX
0B0CCC DDE1                A  3819    	POP	IX
0B0CCE C9                  A  3820    	RET	
                           A  3821    
                           A  3822    
                           A  3823    ;**************************** _getByte ********
                           A  3824    ;Name                         Addr/Register   S
                           A  3825    ;bitmask                               IX+6    
                           A  3826    
                           A  3827    
                           A  3828    ; Stack Frame Size: 12 (bytes)
                           A  3829    ;       Spill Code: -3 (instruction)
                           A  3830    
                           A  3831    
                           A  3832    .ENDFUNC "getByte",336,"_getByte"
                           A  3833    ;  337	
                           A  3834    ;  338	// Function to count trailing zeros in 
                           A  3835    ;  339	int count_trailing_zeros(unsigned int b
0B0CCF                     A  3836    _count_trailing_zeros:
                           A  3837    .DEFINE "_count_trailing_zeros"
                           A  3838    
                           A  3839    .VALUE _count_trailing_zeros
                           A  3840    
                           A  3841    .CLASS 2
                           A  3842    
                           A  3843    .TYPE 68
                           A  3844    
                           A  3845    .ENDEF
                           A  3846    
                           A  3847    .BEGFUNC "count_trailing_zeros",339,"_count_tra
                           A  3848    
                           A  3849    .LINE 339
                           A  3850    
                           A  3851    .DEFINE "bitmask"
                           A  3852    
                           A  3853    .CLASS 65
                           A  3854    
                           A  3855    .VALUE 6
                           A  3856    
                           A  3857    .TYPE 14
                           A  3858    
                           A  3859    .ENDEF
                           A  3860    
                           A  3861    .DEFINE "count"
                           A  3862    
                           A  3863    .CLASS 65
                           A  3864    
                           A  3865    .VALUE -3
                           A  3866    
                           A  3867    .TYPE 4
                           A  3868    
                           A  3869    .ENDEF
                           A  3870    
0B0CCF DDE5                A  3871    	PUSH	IX
0B0CD1 DD210000 00         A  3872    	LD	IX,0
0B0CD6 DD39                A  3873    	ADD	IX,SP
0B0CD8 C5                  A  3874    	PUSH	BC
                           A  3875    ;  340	    int count = 0;
                           A  3876    .LINE 340
                           A  3877    
0B0CD9 01000000            A  3878    	LD	BC,0
0B0CDD DD0FFD              A  3879    	LD	(IX+%FFFFFFFD),BC
                           A  3880    ;  341	    while ((bitmask & 1) == 0 && count 
                           A  3881    .LINE 341
                           A  3882    
0B0CE0 18 13               A  3883    	JR	L_99
0B0CE2                     A  3884    L_100:
                           A  3885    ;  342	        bitmask >>= 1;
                           A  3886    .LINE 342
                           A  3887    
0B0CE2 DD2706              A  3888    	LD	HL,(IX+%6)
0B0CE5 3E01                A  3889    	LD	A,%1
0B0CE7 CD C2 40 0B         A  3890    	CALL	__ishru_b
0B0CEB DD2F06              A  3891    	LD	(IX+%6),HL
                           A  3892    ;  343	        count++;
                           A  3893    .LINE 343
                           A  3894    
0B0CEE DD07FD              A  3895    	LD	BC,(IX+%FFFFFFFD)
0B0CF1 03                  A  3896    	INC	BC
0B0CF2 DD0FFD              A  3897    	LD	(IX+%FFFFFFFD),BC
                           A  3898    ;  344	    }
0B0CF5                     A  3899    L_99:
                           A  3900    .LINE 344
                           A  3901    
0B0CF5 DD7E06              A  3902    	LD	A,(IX+%6)
0B0CF8 E601                A  3903    	AND	A,%1
0B0CFA B7ED62              A  3904    	UEXT	HL
0B0CFD 6F                  A  3905    	LD	L,A
0B0CFE 01000000            A  3906    	LD	BC,0
0B0D02 B7                  A  3907    	OR	A,A
0B0D03 ED42                A  3908    	SBC	HL,BC
0B0D05 20 18               A  3909    	JR	NZ,L_101
0B0D07 01200000            A  3910    	LD	BC,32
0B0D0B DD27FD              A  3911    	LD	HL,(IX+%FFFFFFFD)
0B0D0E B7                  A  3912    	OR	A,A
0B0D0F ED42                A  3913    	SBC	HL,BC
0B0D11 FA 1B 0D 0B         A  3914    	JP	M,L__58
0B0D15 EA E2 0C 0B         A  3915    	JP	PE,L_100
0B0D19 18 04               A  3916    	JR	L__59
0B0D1B                     A  3917    L__58:
0B0D1B E2 E2 0C 0B         A  3918    	JP	PO,L_100
0B0D1F                     A  3919    L__59:
0B0D1F                     A  3920    L_101:
                           A  3921    ;  345	    return count;
                           A  3922    .LINE 345
                           A  3923    
0B0D1F DD27FD              A  3924    	LD	HL,(IX+%FFFFFFFD)
                           A  3925    ;  346	}
                           A  3926    .LINE 346
                           A  3927    
0B0D22 DDF9                A  3928    	LD	SP,IX
0B0D24 DDE1                A  3929    	POP	IX
0B0D26 C9                  A  3930    	RET	
                           A  3931    
                           A  3932    
                           A  3933    ;**************************** _count_trailing_z
                           A  3934    ;Name                         Addr/Register   S
                           A  3935    ;count                                 IX-3    
                           A  3936    ;bitmask                               IX+6    
                           A  3937    
                           A  3938    
                           A  3939    ; Stack Frame Size: 12 (bytes)
                           A  3940    ;       Spill Code: -3 (instruction)
                           A  3941    
                           A  3942    
                           A  3943    .ENDFUNC "count_trailing_zeros",346,"_count_tra
                           A  3944    ;  347	
                           A  3945    ;  348	void print_bin(void* value, size_t size
0B0D27                     A  3946    _print_bin:
                           A  3947    .DEFINE "_print_bin"
                           A  3948    
                           A  3949    .VALUE _print_bin
                           A  3950    
                           A  3951    .CLASS 2
                           A  3952    
                           A  3953    .TYPE 65
                           A  3954    
                           A  3955    .ENDEF
                           A  3956    
                           A  3957    .BEGFUNC "print_bin",348,"_print_bin"
                           A  3958    
                           A  3959    .LINE 348
                           A  3960    
                           A  3961    .DEFINE "value"
                           A  3962    
                           A  3963    .CLASS 65
                           A  3964    
                           A  3965    .VALUE 6
                           A  3966    
                           A  3967    .TYPE 33
                           A  3968    
                           A  3969    .ENDEF
                           A  3970    
                           A  3971    .DEFINE "size"
                           A  3972    
                           A  3973    .CLASS 65
                           A  3974    
                           A  3975    .VALUE 9
                           A  3976    
                           A  3977    .TYPE 14
                           A  3978    
                           A  3979    .ENDEF
                           A  3980    
                           A  3981    .DEFINE "i"
                           A  3982    
                           A  3983    .CLASS 65
                           A  3984    
                           A  3985    .VALUE -3
                           A  3986    
                           A  3987    .TYPE 4
                           A  3988    
                           A  3989    .ENDEF
                           A  3990    
                           A  3991    .DEFINE "j"
                           A  3992    
                           A  3993    .CLASS 65
                           A  3994    
                           A  3995    .VALUE -6
                           A  3996    
                           A  3997    .TYPE 4
                           A  3998    
                           A  3999    .ENDEF
                           A  4000    
0B0D27 DDE5                A  4001    	PUSH	IX
0B0D29 DD210000 00         A  4002    	LD	IX,0
0B0D2E DD39                A  4003    	ADD	IX,SP
0B0D30 C5                  A  4004    	PUSH	BC
0B0D31 C5                  A  4005    	PUSH	BC
                           A  4006    ;  349	    
                           A  4007    ;  350		int i, j;
                           A  4008    ;  351		unsigned char* bytes = (unsigned ch
                           A  4009    ;  352		
                           A  4010    ;  353		if (size == 0) {
                           A  4011    .LINE 353
                           A  4012    
0B0D32 01000000            A  4013    	LD	BC,0
0B0D36 DD2709              A  4014    	LD	HL,(IX+%9)
0B0D39 B7                  A  4015    	OR	A,A
0B0D3A ED42                A  4016    	SBC	HL,BC
0B0D3C 20 17               A  4017    	JR	NZ,L_112
                           A  4018    ;  354	        printf("Error: Invalid size\n")
                           A  4019    .LINE 354
                           A  4020    
0B0D3E 01 24 3A 0B         A  4021    	LD	BC,___print_uputch
0B0D42 ED43 3C 44 0B       A  4022    	LD	(___print_xputch),BC
0B0D47 01 42 44 0B         A  4023    	LD	BC,L__62
0B0D4B C5                  A  4024    	PUSH	BC
0B0D4C CD 6C 38 0B         A  4025    	CALL	___print_sendstring
0B0D50 C1                  A  4026    	POP	BC
                           A  4027    ;  355	        return;
                           A  4028    .LINE 355
                           A  4029    
0B0D51 C3 DB 0D 0B         A  4030    	JR	L_113
                           A  4031    ;  356	    }
0B0D55                     A  4032    L_112:
                           A  4033    .LINE 356
                           A  4034    
                           A  4035    ;  357	
                           A  4036    ;  358	    for (i = size - 1; i >= 0; i--) {
                           A  4037    .LINE 358
                           A  4038    
0B0D55 DD0709              A  4039    	LD	BC,(IX+%9)
0B0D58 0B                  A  4040    	DEC	BC
0B0D59 DD0FFD              A  4041    	LD	(IX+%FFFFFFFD),BC
0B0D5C 18 65               A  4042    	JR	L_111
0B0D5E                     A  4043    L_109:
                           A  4044    ;  359	        for (j = 7; j >= 0; j--) {
                           A  4045    .LINE 359
                           A  4046    
0B0D5E 01070000            A  4047    	LD	BC,7
0B0D62 DD0FFA              A  4048    	LD	(IX+%FFFFFFFA),BC
0B0D65 18 3D               A  4049    	JR	L_108
0B0D67                     A  4050    L_106:
                           A  4051    ;  360	            printf("%d", (bytes[i] >> j
                           A  4052    .LINE 360
                           A  4053    
0B0D67 01 24 3A 0B         A  4054    	LD	BC,___print_uputch
0B0D6B ED43 3C 44 0B       A  4055    	LD	(___print_xputch),BC
0B0D70 DD07FD              A  4056    	LD	BC,(IX+%FFFFFFFD)
0B0D73 DD2706              A  4057    	LD	HL,(IX+%6)
0B0D76 09                  A  4058    	ADD	HL,BC
0B0D77 7E                  A  4059    	LD	A,(HL)
0B0D78 B7ED62              A  4060    	UEXT	HL
0B0D7B 6F                  A  4061    	LD	L,A
0B0D7C DD07FA              A  4062    	LD	BC,(IX+%FFFFFFFA)
0B0D7F CD 3A 38 0B         A  4063    	CALL	__ishrs
0B0D83 7D                  A  4064    	LD	A,L
0B0D84 E601                A  4065    	AND	A,%1
0B0D86 B7ED62              A  4066    	UEXT	HL
0B0D89 6F                  A  4067    	LD	L,A
0B0D8A E5C1                A  4068    	LD	BC,HL
0B0D8C CD 20 41 0B         A  4069    	CALL	__itol
0B0D90 C5D1                A  4070    	LD	DE,BC
0B0D92 4F                  A  4071    	LD	C,A
0B0D93 0600                A  4072    	LD	B,%0
0B0D95 C5                  A  4073    	PUSH	BC
0B0D96 D5                  A  4074    	PUSH	DE
0B0D97 CD EA 3A 0B         A  4075    	CALL	__u_itoa
0B0D9B C1                  A  4076    	POP	BC
0B0D9C C1                  A  4077    	POP	BC
0B0D9D DD07FA              A  4078    	LD	BC,(IX+%FFFFFFFA)
0B0DA0 0B                  A  4079    	DEC	BC
0B0DA1 DD0FFA              A  4080    	LD	(IX+%FFFFFFFA),BC
                           A  4081    ;  361	        }
0B0DA4                     A  4082    L_108:
                           A  4083    .LINE 361
                           A  4084    
0B0DA4 01000000            A  4085    	LD	BC,0
0B0DA8 DD27FA              A  4086    	LD	HL,(IX+%FFFFFFFA)
0B0DAB B7                  A  4087    	OR	A,A
0B0DAC ED42                A  4088    	SBC	HL,BC
0B0DAE F2 B8 0D 0B         A  4089    	JP	P,L__65
0B0DB2 EA 67 0D 0B         A  4090    	JP	PE,L_106
0B0DB6 18 04               A  4091    	JR	L__66
0B0DB8                     A  4092    L__65:
0B0DB8 E2 67 0D 0B         A  4093    	JP	PO,L_106
0B0DBC                     A  4094    L__66:
0B0DBC DD07FD              A  4095    	LD	BC,(IX+%FFFFFFFD)
0B0DBF 0B                  A  4096    	DEC	BC
0B0DC0 DD0FFD              A  4097    	LD	(IX+%FFFFFFFD),BC
                           A  4098    ;  362	    }
0B0DC3                     A  4099    L_111:
                           A  4100    .LINE 362
                           A  4101    
0B0DC3 01000000            A  4102    	LD	BC,0
0B0DC7 DD27FD              A  4103    	LD	HL,(IX+%FFFFFFFD)
0B0DCA B7                  A  4104    	OR	A,A
0B0DCB ED42                A  4105    	SBC	HL,BC
0B0DCD F2 D7 0D 0B         A  4106    	JP	P,L__67
0B0DD1 EA 5E 0D 0B         A  4107    	JP	PE,L_109
0B0DD5 18 04               A  4108    	JR	L__68
0B0DD7                     A  4109    L__67:
0B0DD7 E2 5E 0D 0B         A  4110    	JP	PO,L_109
0B0DDB                     A  4111    L__68:
                           A  4112    ;  363	}
0B0DDB                     A  4113    L_113:
                           A  4114    .LINE 363
                           A  4115    
0B0DDB DDF9                A  4116    	LD	SP,IX
0B0DDD DDE1                A  4117    	POP	IX
0B0DDF C9                  A  4118    	RET	
                           A  4119    
                           A  4120    
                           A  4121    ;**************************** _print_bin ******
                           A  4122    ;Name                         Addr/Register   S
                           A  4123    ;__u_itoa                            IMPORT  --
                           A  4124    ;___print_sendstring                 IMPORT  --
                           A  4125    ;___print_xputch                     IMPORT    
                           A  4126    ;___print_uputch                     IMPORT  --
                           A  4127    ;j                                     IX-6    
                           A  4128    ;i                                     IX-3    
                           A  4129    ;size                                  IX+9    
                           A  4130    ;value                                 IX+6    
                           A  4131    
                           A  4132    
                           A  4133    ; Stack Frame Size: 18 (bytes)
                           A  4134    ;       Spill Code: -3 (instruction)
                           A  4135    
                           A  4136    
                           A  4137    .ENDFUNC "print_bin",363,"_print_bin"
                           A  4138    	SEGMENT STRSECT
0B4442                     A  4139    L__62:
0B4442 4572726F 723A2049   A  4140    	DB	"Error: Invalid size"
0B444A 6E76616C 69642073 
0B4452 697A65 
0B4455 0A00                A  4141    	DB	10,0
                           A  4142    	SEGMENT CODE
                           A  4143    ;  364	
                           A  4144    ;  365	bmp_info get_info(const char * filename
0B0DE0                     A  4145    _get_info:
                           A  4146    .DEFINE "_get_info"
                           A  4147    
                           A  4148    .VALUE _get_info
                           A  4149    
                           A  4150    .CLASS 2
                           A  4151    
                           A  4152    .TAG "NONAME6"
                           A  4153    
                           A  4154    .TYPE 72
                           A  4155    
                           A  4156    .ENDEF
                           A  4157    
                           A  4158    .BEGFUNC "get_info",365,"_get_info"
                           A  4159    
                           A  4160    .LINE 365
                           A  4161    
                           A  4162    .DEFINE "filename"
                           A  4163    
                           A  4164    .CLASS 65
                           A  4165    
                           A  4166    .VALUE 9
                           A  4167    
                           A  4168    .TYPE 194
                           A  4169    
                           A  4170    .ENDEF
                           A  4171    
                           A  4172    .DEFINE "main_header"
                           A  4173    
                           A  4174    .CLASS 65
                           A  4175    
                           A  4176    .VALUE -3
                           A  4177    
                           A  4178    .TYPE 34
                           A  4179    
                           A  4180    .ENDEF
                           A  4181    
                           A  4182    .DEFINE "file"
                           A  4183    
                           A  4184    .CLASS 65
                           A  4185    
                           A  4186    .VALUE -4
                           A  4187    
                           A  4188    .TYPE 12
                           A  4189    
                           A  4190    .ENDEF
                           A  4191    
                           A  4192    .DEFINE "redmask"
                           A  4193    
                           A  4194    .CLASS 65
                           A  4195    
                           A  4196    .VALUE -6
                           A  4197    
                           A  4198    .TYPE 13
                           A  4199    
                           A  4200    .ENDEF
                           A  4201    
                           A  4202    .DEFINE "greenmask"
                           A  4203    
                           A  4204    .CLASS 65
                           A  4205    
                           A  4206    .VALUE -8
                           A  4207    
                           A  4208    .TYPE 13
                           A  4209    
                           A  4210    .ENDEF
                           A  4211    
                           A  4212    .DEFINE "bluemask"
                           A  4213    
                           A  4214    .CLASS 65
                           A  4215    
                           A  4216    .VALUE -10
                           A  4217    
                           A  4218    .TYPE 13
                           A  4219    
                           A  4220    .ENDEF
                           A  4221    
                           A  4222    .DEFINE "alphamask"
                           A  4223    
                           A  4224    .CLASS 65
                           A  4225    
                           A  4226    .VALUE -12
                           A  4227    
                           A  4228    .TYPE 13
                           A  4229    
                           A  4230    .ENDEF
                           A  4231    
                           A  4232    .DEFINE "fo"
                           A  4233    
                           A  4234    .CLASS 65
                           A  4235    
                           A  4236    .VALUE -15
                           A  4237    
                           A  4238    .TAG "NONAME5"
                           A  4239    
                           A  4240    .TYPE 40
                           A  4241    
                           A  4242    .ENDEF
                           A  4243    
                           A  4244    .DEFINE "initial_header"
                           A  4245    
                           A  4246    .CLASS 65
                           A  4247    
                           A  4248    .VALUE -33
                           A  4249    
                           A  4250    .DIM 18
                           A  4251    
                           A  4252    .TYPE 98
                           A  4253    
                           A  4254    .ENDEF
                           A  4255    
                           A  4256    .DEFINE "bmp"
                           A  4257    
                           A  4258    .CLASS 65
                           A  4259    
                           A  4260    .VALUE -1106
                           A  4261    
                           A  4262    .TAG "NONAME6"
                           A  4263    
                           A  4264    .TYPE 8
                           A  4265    
                           A  4266    .ENDEF
                           A  4267    
0B0DE0 DDE5                A  4268    	PUSH	IX
0B0DE2 DD210000 00         A  4269    	LD	IX,0
0B0DE7 DD39                A  4270    	ADD	IX,SP
0B0DE9 21AEFBFF            A  4271    	LD	HL,-1106
0B0DED 39                  A  4272    	ADD	HL,SP
0B0DEE F9                  A  4273    	LD	SP,HL
                           A  4274    ;  366	
                           A  4275    ;  367		uint8_t file;
                           A  4276    ;  368		FIL * fo;
                           A  4277    ;  369		bmp_info bmp;
                           A  4278    ;  370		char initial_header[18];
                           A  4279    ;  371		char *main_header;
                           A  4280    ;  372		
                           A  4281    ;  373		memset(&bmp, 0, sizeof(bmp));	
                           A  4282    .LINE 373
                           A  4283    
0B0DEF 01310400            A  4284    	LD	BC,1073
0B0DF3 C5                  A  4285    	PUSH	BC
0B0DF4 01000000            A  4286    	LD	BC,0
0B0DF8 C5                  A  4287    	PUSH	BC
0B0DF9 DDE5E1              A  4288    	LD	HL,IX
0B0DFC 01AEFBFF            A  4289    	LD	BC,-1106
0B0E00 09                  A  4290    	ADD	HL,BC
0B0E01 E5C1                A  4291    	LD	BC,HL
0B0E03 C5                  A  4292    	PUSH	BC
0B0E04 CD B0 41 0B         A  4293    	CALL	_memset
0B0E08 C1                  A  4294    	POP	BC
0B0E09 C1                  A  4295    	POP	BC
0B0E0A C1                  A  4296    	POP	BC
                           A  4297    ;  374		
                           A  4298    ;  375		file = mos_fopen(filename, fa_read)
                           A  4299    .LINE 375
                           A  4300    
0B0E0B 01010000            A  4301    	LD	BC,1
0B0E0F C5                  A  4302    	PUSH	BC
0B0E10 DD0709              A  4303    	LD	BC,(IX+%9)
0B0E13 C5                  A  4304    	PUSH	BC
0B0E14 CD 91 34 0B         A  4305    	CALL	_mos_fopen
0B0E18 C1                  A  4306    	POP	BC
0B0E19 C1                  A  4307    	POP	BC
0B0E1A DD77FC              A  4308    	LD	(IX+%FFFFFFFC),A
                           A  4309    ;  376		fo = (FIL * ) mos_getfil(file);
                           A  4310    .LINE 376
                           A  4311    
0B0E1D DD4EFC              A  4312    	LD	C,(IX+%FFFFFFFC)
0B0E20 0600                A  4313    	LD	B,%0
0B0E22 C5                  A  4314    	PUSH	BC
0B0E23 CD 17 36 0B         A  4315    	CALL	_mos_getfil
0B0E27 C1                  A  4316    	POP	BC
0B0E28 DD2FF1              A  4317    	LD	(IX+%FFFFFFF1),HL
                           A  4318    ;  377		
                           A  4319    ;  378	    if (!file) {
                           A  4320    .LINE 378
                           A  4321    
0B0E2B DD7EFC              A  4322    	LD	A,(IX+%FFFFFFFC)
0B0E2E B7                  A  4323    	OR	A,A
0B0E2F 20 40               A  4324    	JR	NZ,L_115
                           A  4325    ;  379	        printf("Error: could not open %
                           A  4326    .LINE 379
                           A  4327    
0B0E31 01 24 3A 0B         A  4328    	LD	BC,___print_uputch
0B0E35 ED43 3C 44 0B       A  4329    	LD	(___print_xputch),BC
0B0E3A 01 57 44 0B         A  4330    	LD	BC,L__71
0B0E3E C5                  A  4331    	PUSH	BC
0B0E3F CD 6C 38 0B         A  4332    	CALL	___print_sendstring
0B0E43 C1                  A  4333    	POP	BC
0B0E44 DD0709              A  4334    	LD	BC,(IX+%9)
0B0E47 C5                  A  4335    	PUSH	BC
0B0E48 CD 6C 38 0B         A  4336    	CALL	___print_sendstring
0B0E4C C1                  A  4337    	POP	BC
0B0E4D 01 6E 44 0B         A  4338    	LD	BC,L__72
0B0E51 C5                  A  4339    	PUSH	BC
0B0E52 CD 6C 38 0B         A  4340    	CALL	___print_sendstring
0B0E56 C1                  A  4341    	POP	BC
                           A  4342    ;  380	        return bmp;
                           A  4343    .LINE 380
                           A  4344    
0B0E57 ED2206              A  4345    	LEA	HL,IX+%6
0B0E5A ED17                A  4346    	LD	DE,(HL)
0B0E5C DDE5E1              A  4347    	LD	HL,IX
0B0E5F 01AEFBFF            A  4348    	LD	BC,-1106
0B0E63 09                  A  4349    	ADD	HL,BC
0B0E64 01310400            A  4350    	LD	BC,1073
0B0E68 EDB0                A  4351    	LDIR	
0B0E6A DD2706              A  4352    	LD	HL,(IX+%6)
0B0E6D C3 0C 16 0B         A  4353    	JR	L_132
                           A  4354    ;  381	    }
0B0E71                     A  4355    L_115:
                           A  4356    .LINE 381
                           A  4357    
                           A  4358    ;  382	
                           A  4359    ;  383		mos_fread(file, initial_header, 14 
                           A  4360    .LINE 383
                           A  4361    
0B0E71 01120000            A  4362    	LD	BC,18
0B0E75 C5                  A  4363    	PUSH	BC
0B0E76 ED65DF              A  4364    	PEA	IX+%FFFFFFDF
0B0E79 DD4EFC              A  4365    	LD	C,(IX+%FFFFFFFC)
0B0E7C 0600                A  4366    	LD	B,%0
0B0E7E C5                  A  4367    	PUSH	BC
0B0E7F CD BE 35 0B         A  4368    	CALL	_mos_fread
0B0E83 C1                  A  4369    	POP	BC
0B0E84 C1                  A  4370    	POP	BC
0B0E85 C1                  A  4371    	POP	BC
                           A  4372    ;  384		
                           A  4373    ;  385		bmp.pixels_offset = * (uint32_t * )
                           A  4374    .LINE 385
                           A  4375    
0B0E86 ED22E9              A  4376    	LEA	HL,IX+%FFFFFFE9
0B0E89 ED07                A  4377    	LD	BC,(HL)
0B0E8B 23                  A  4378    	INC	HL
0B0E8C 23                  A  4379    	INC	HL
0B0E8D 23                  A  4380    	INC	HL
0B0E8E 7E                  A  4381    	LD	A,(HL)
0B0E8F FD21B3FB FF         A  4382    	LD	IY,-1101
0B0E94 DDE5D1              A  4383    	LD	DE,IX
0B0E97 FD19                A  4384    	ADD	IY,DE
0B0E99 FD0F00              A  4385    	LD	(IY),BC
0B0E9C FD7703              A  4386    	LD	(IY+%3),A
                           A  4387    ;  386	    bmp.main_header_size = * (uint32_t 
                           A  4388    .LINE 386
                           A  4389    
0B0E9F ED22ED              A  4390    	LEA	HL,IX+%FFFFFFED
0B0EA2 ED07                A  4391    	LD	BC,(HL)
0B0EA4 23                  A  4392    	INC	HL
0B0EA5 23                  A  4393    	INC	HL
0B0EA6 23                  A  4394    	INC	HL
0B0EA7 7E                  A  4395    	LD	A,(HL)
0B0EA8 FD21BBFB FF         A  4396    	LD	IY,-1093
0B0EAD DDE5D1              A  4397    	LD	DE,IX
0B0EB0 FD19                A  4398    	ADD	IY,DE
0B0EB2 FD0F00              A  4399    	LD	(IY),BC
0B0EB5 FD7703              A  4400    	LD	(IY+%3),A
                           A  4401    ;  387		
                           A  4402    ;  388		main_header = malloc(bmp.main_heade
                           A  4403    .LINE 388
                           A  4404    
0B0EB8 21BBFBFF            A  4405    	LD	HL,-1093
0B0EBC DDE5C1              A  4406    	LD	BC,IX
0B0EBF 09                  A  4407    	ADD	HL,BC
0B0EC0 ED07                A  4408    	LD	BC,(HL)
0B0EC2 C5                  A  4409    	PUSH	BC
0B0EC3 CD 47 37 0B         A  4410    	CALL	_malloc
0B0EC7 C1                  A  4411    	POP	BC
0B0EC8 DD2FFD              A  4412    	LD	(IX+%FFFFFFFD),HL
                           A  4413    ;  389		
                           A  4414    ;  390		mos_flseek(file, 14);
                           A  4415    .LINE 390
                           A  4416    
0B0ECB 01000000            A  4417    	LD	BC,0
0B0ECF C5                  A  4418    	PUSH	BC
0B0ED0 010E0000            A  4419    	LD	BC,14
0B0ED4 C5                  A  4420    	PUSH	BC
0B0ED5 DD4EFC              A  4421    	LD	C,(IX+%FFFFFFFC)
0B0ED8 0600                A  4422    	LD	B,%0
0B0EDA C5                  A  4423    	PUSH	BC
0B0EDB CD F8 35 0B         A  4424    	CALL	_mos_flseek
0B0EDF C1                  A  4425    	POP	BC
0B0EE0 C1                  A  4426    	POP	BC
0B0EE1 C1                  A  4427    	POP	BC
                           A  4428    ;  391		mos_fread(file, main_header, bmp.ma
                           A  4429    .LINE 391
                           A  4430    
0B0EE2 21BBFBFF            A  4431    	LD	HL,-1093
0B0EE6 DDE5C1              A  4432    	LD	BC,IX
0B0EE9 09                  A  4433    	ADD	HL,BC
0B0EEA ED07                A  4434    	LD	BC,(HL)
0B0EEC C5                  A  4435    	PUSH	BC
0B0EED DD07FD              A  4436    	LD	BC,(IX+%FFFFFFFD)
0B0EF0 C5                  A  4437    	PUSH	BC
0B0EF1 DD4EFC              A  4438    	LD	C,(IX+%FFFFFFFC)
0B0EF4 0600                A  4439    	LD	B,%0
0B0EF6 C5                  A  4440    	PUSH	BC
0B0EF7 CD BE 35 0B         A  4441    	CALL	_mos_fread
0B0EFB C1                  A  4442    	POP	BC
0B0EFC C1                  A  4443    	POP	BC
0B0EFD C1                  A  4444    	POP	BC
                           A  4445    ;  392		
                           A  4446    ;  393		bmp.bmp_width = *(int32_t *) & main
                           A  4447    .LINE 393
                           A  4448    
0B0EFE DD31FD              A  4449    	LD	IY,(IX+%FFFFFFFD)
0B0F01 ED2304              A  4450    	LEA	HL,IY+%4
0B0F04 ED07                A  4451    	LD	BC,(HL)
0B0F06 21AEFBFF            A  4452    	LD	HL,-1106
0B0F0A DDE5D1              A  4453    	LD	DE,IX
0B0F0D 19                  A  4454    	ADD	HL,DE
0B0F0E 71                  A  4455    	LD	(HL),C
0B0F0F 23                  A  4456    	INC	HL
0B0F10 70                  A  4457    	LD	(HL),B
                           A  4458    ;  394		bmp.bmp_height = *(int32_t *) & mai
                           A  4459    .LINE 394
                           A  4460    
0B0F11 ED2308              A  4461    	LEA	HL,IY+%8
0B0F14 ED07                A  4462    	LD	BC,(HL)
0B0F16 21B0FBFF            A  4463    	LD	HL,-1104
0B0F1A DDE5D1              A  4464    	LD	DE,IX
0B0F1D 19                  A  4465    	ADD	HL,DE
0B0F1E 71                  A  4466    	LD	(HL),C
0B0F1F 23                  A  4467    	INC	HL
0B0F20 70                  A  4468    	LD	(HL),B
                           A  4469    ;  395		bmp.bmp_bitdepth = *(uint16_t *) & 
                           A  4470    .LINE 395
                           A  4471    
0B0F21 ED230E              A  4472    	LEA	HL,IY+%E
0B0F24 7E                  A  4473    	LD	A,(HL)
0B0F25 21B2FBFF            A  4474    	LD	HL,-1102
0B0F29 DDE5C1              A  4475    	LD	BC,IX
0B0F2C 09                  A  4476    	ADD	HL,BC
0B0F2D 77                  A  4477    	LD	(HL),A
                           A  4478    ;  396		bmp.compression = *(uint32_t *) & m
                           A  4479    .LINE 396
                           A  4480    
0B0F2E ED2310              A  4481    	LEA	HL,IY+%10
0B0F31 ED07                A  4482    	LD	BC,(HL)
0B0F33 23                  A  4483    	INC	HL
0B0F34 23                  A  4484    	INC	HL
0B0F35 23                  A  4485    	INC	HL
0B0F36 7E                  A  4486    	LD	A,(HL)
0B0F37 FD21BFFB FF         A  4487    	LD	IY,-1089
0B0F3C DDE5D1              A  4488    	LD	DE,IX
0B0F3F FD19                A  4489    	ADD	IY,DE
0B0F41 FD0F00              A  4490    	LD	(IY),BC
0B0F44 FD7703              A  4491    	LD	(IY+%3),A
                           A  4492    ;  397		bmp.color_table_size = * (uint32_t 
                           A  4493    .LINE 397
                           A  4494    
0B0F47 DD31FD              A  4495    	LD	IY,(IX+%FFFFFFFD)
0B0F4A ED2320              A  4496    	LEA	HL,IY+%20
0B0F4D ED07                A  4497    	LD	BC,(HL)
0B0F4F 23                  A  4498    	INC	HL
0B0F50 23                  A  4499    	INC	HL
0B0F51 23                  A  4500    	INC	HL
0B0F52 7E                  A  4501    	LD	A,(HL)
0B0F53 FD21D3FB FF         A  4502    	LD	IY,-1069
0B0F58 DDE5D1              A  4503    	LD	DE,IX
0B0F5B FD19                A  4504    	ADD	IY,DE
0B0F5D FD0F00              A  4505    	LD	(IY),BC
0B0F60 FD7703              A  4506    	LD	(IY+%3),A
                           A  4507    ;  398	
                           A  4508    ;  399	    if (bmp.color_table_size == 0 && bm
                           A  4509    .LINE 399
                           A  4510    
0B0F63 FD21D3FB FF         A  4511    	LD	IY,-1069
0B0F68 DDE5C1              A  4512    	LD	BC,IX
0B0F6B FD09                A  4513    	ADD	IY,BC
0B0F6D FD2700              A  4514    	LD	HL,(IY)
0B0F70 FD5E03              A  4515    	LD	E,(IY+%3)
0B0F73 01000000            A  4516    	LD	BC,0
0B0F77 AF                  A  4517    	XOR	A,A
0B0F78 CD 6A 41 0B         A  4518    	CALL	__lcmpu
0B0F7C 20 22               A  4519    	JR	NZ,L_119
0B0F7E 21B2FBFF            A  4520    	LD	HL,-1102
0B0F82 DDE5C1              A  4521    	LD	BC,IX
0B0F85 09                  A  4522    	ADD	HL,BC
0B0F86 7E                  A  4523    	LD	A,(HL)
0B0F87 FE08                A  4524    	CP	A,%8
0B0F89 20 15               A  4525    	JR	NZ,L_119
                           A  4526    ;  400	        bmp.color_table_size = 256;
                           A  4527    .LINE 400
                           A  4528    
0B0F8B 01000100            A  4529    	LD	BC,256
0B0F8F FD21D3FB FF         A  4530    	LD	IY,-1069
0B0F94 DDE5D1              A  4531    	LD	DE,IX
0B0F97 FD19                A  4532    	ADD	IY,DE
0B0F99 FD0F00              A  4533    	LD	(IY),BC
0B0F9C FD360300            A  4534    	LD	(IY+%3),%0
                           A  4535    ;  401	    }
0B0FA0                     A  4536    L_119:
                           A  4537    .LINE 401
                           A  4538    
                           A  4539    ;  402	
                           A  4540    ;  403		if (bmp.color_table_size > 0) mos_f
                           A  4541    .LINE 403
                           A  4542    
0B0FA0 FD21D3FB FF         A  4543    	LD	IY,-1069
0B0FA5 DDE5C1              A  4544    	LD	BC,IX
0B0FA8 FD09                A  4545    	ADD	IY,BC
0B0FAA FD0700              A  4546    	LD	BC,(IY)
0B0FAD FD7E03              A  4547    	LD	A,(IY+%3)
0B0FB0 B7                  A  4548    	OR	A,A
0B0FB1 ED62                A  4549    	SBC	HL,HL
0B0FB3 1E00                A  4550    	LD	E,%0
0B0FB5 CD 6A 41 0B         A  4551    	CALL	__lcmpu
0B0FB9 30 25               A  4552    	JR	NC,L_120
0B0FBB 21D3FBFF            A  4553    	LD	HL,-1069
0B0FBF DDE5C1              A  4554    	LD	BC,IX
0B0FC2 09                  A  4555    	ADD	HL,BC
0B0FC3 ED27                A  4556    	LD	HL,(HL)
0B0FC5 29                  A  4557    	ADD	HL,HL
0B0FC6 29                  A  4558    	ADD	HL,HL
0B0FC7 E5                  A  4559    	PUSH	HL
0B0FC8 DDE5E1              A  4560    	LD	HL,IX
0B0FCB 01D7FBFF            A  4561    	LD	BC,-1065
0B0FCF 09                  A  4562    	ADD	HL,BC
0B0FD0 E5C1                A  4563    	LD	BC,HL
0B0FD2 C5                  A  4564    	PUSH	BC
0B0FD3 DD4EFC              A  4565    	LD	C,(IX+%FFFFFFFC)
0B0FD6 0600                A  4566    	LD	B,%0
0B0FD8 C5                  A  4567    	PUSH	BC
0B0FD9 CD BE 35 0B         A  4568    	CALL	_mos_fread
0B0FDD C1                  A  4569    	POP	BC
0B0FDE C1                  A  4570    	POP	BC
0B0FDF C1                  A  4571    	POP	BC
0B0FE0                     A  4572    L_120:
                           A  4573    ;  404		
                           A  4574    ;  405		bmp.row_padding = (4 - (bmp.bmp_wid
                           A  4575    .LINE 405
                           A  4576    
0B0FE0 21AEFBFF            A  4577    	LD	HL,-1106
0B0FE4 DDE5C1              A  4578    	LD	BC,IX
0B0FE7 09                  A  4579    	ADD	HL,BC
0B0FE8 ED07                A  4580    	LD	BC,(HL)
0B0FEA CD 1E 3A 0B         A  4581    	CALL	__stoiu
0B0FEE E5D1                A  4582    	LD	DE,HL
0B0FF0 21B2FBFF            A  4583    	LD	HL,-1102
0B0FF4 DDE5C1              A  4584    	LD	BC,IX
0B0FF7 09                  A  4585    	ADD	HL,BC
0B0FF8 7E                  A  4586    	LD	A,(HL)
0B0FF9 B7ED62              A  4587    	UEXT	HL
0B0FFC 6F                  A  4588    	LD	L,A
0B0FFD 01080000            A  4589    	LD	BC,8
0B1001 CD E7 40 0B         A  4590    	CALL	__idivs
0B1005 E5C1                A  4591    	LD	BC,HL
0B1007 D5E1                A  4592    	LD	HL,DE
0B1009 CD 86 40 0B         A  4593    	CALL	__imuls
0B100D 01040000            A  4594    	LD	BC,4
0B1011 CD FA 37 0B         A  4595    	CALL	__irems
0B1015 E5C1                A  4596    	LD	BC,HL
0B1017 21040000            A  4597    	LD	HL,4
0B101B B7                  A  4598    	OR	A,A
0B101C ED42                A  4599    	SBC	HL,BC
0B101E 01040000            A  4600    	LD	BC,4
0B1022 CD FA 37 0B         A  4601    	CALL	__irems
0B1026 DD75DB              A  4602    	LD	(IX+%FFFFFFDB),L
0B1029 DD74DC              A  4603    	LD	(IX+%FFFFFFDC),H
                           A  4604    ;  406		bmp.non_pad_row = bmp.bmp_width * b
                           A  4605    .LINE 406
                           A  4606    
0B102C 21AEFBFF            A  4607    	LD	HL,-1106
0B1030 DDE5C1              A  4608    	LD	BC,IX
0B1033 09                  A  4609    	ADD	HL,BC
0B1034 ED07                A  4610    	LD	BC,(HL)
0B1036 CD 1E 3A 0B         A  4611    	CALL	__stoiu
0B103A E5D1                A  4612    	LD	DE,HL
0B103C 21B2FBFF            A  4613    	LD	HL,-1102
0B1040 DDE5C1              A  4614    	LD	BC,IX
0B1043 09                  A  4615    	ADD	HL,BC
0B1044 7E                  A  4616    	LD	A,(HL)
0B1045 B7ED62              A  4617    	UEXT	HL
0B1048 6F                  A  4618    	LD	L,A
0B1049 E5C1                A  4619    	LD	BC,HL
0B104B D5E1                A  4620    	LD	HL,DE
0B104D CD 86 40 0B         A  4621    	CALL	__imuls
0B1051 01080000            A  4622    	LD	BC,8
0B1055 CD E7 40 0B         A  4623    	CALL	__idivs
0B1059 DD75DD              A  4624    	LD	(IX+%FFFFFFDD),L
0B105C DD74DE              A  4625    	LD	(IX+%FFFFFFDE),H
                           A  4626    ;  407		
                           A  4627    ;  408		printf("Debug: BMP is %u x %u x %u,
                           A  4628    .LINE 408
                           A  4629    
0B105F 01 24 3A 0B         A  4630    	LD	BC,___print_uputch
0B1063 ED43 3C 44 0B       A  4631    	LD	(___print_xputch),BC
0B1068 01 72 44 0B         A  4632    	LD	BC,L__76
0B106C C5                  A  4633    	PUSH	BC
0B106D CD 6C 38 0B         A  4634    	CALL	___print_sendstring
0B1071 C1                  A  4635    	POP	BC
0B1072 3E75                A  4636    	LD	A,%75
0B1074 32 D8 46 0B         A  4637    	LD	(___print_fmt+4),A
0B1078 21AEFBFF            A  4638    	LD	HL,-1106
0B107C DDE5C1              A  4639    	LD	BC,IX
0B107F 09                  A  4640    	ADD	HL,BC
0B1080 ED07                A  4641    	LD	BC,(HL)
0B1082 CD 1E 3A 0B         A  4642    	CALL	__stoiu
0B1086 E5C1                A  4643    	LD	BC,HL
0B1088 CD 20 41 0B         A  4644    	CALL	__itol
0B108C C5D1                A  4645    	LD	DE,BC
0B108E 4F                  A  4646    	LD	C,A
0B108F 0600                A  4647    	LD	B,%0
0B1091 C5                  A  4648    	PUSH	BC
0B1092 D5                  A  4649    	PUSH	DE
0B1093 CD AA 3A 0B         A  4650    	CALL	__u_uitoa
0B1097 C1                  A  4651    	POP	BC
0B1098 C1                  A  4652    	POP	BC
0B1099 01 81 44 0B         A  4653    	LD	BC,L__77
0B109D C5                  A  4654    	PUSH	BC
0B109E CD 6C 38 0B         A  4655    	CALL	___print_sendstring
0B10A2 C1                  A  4656    	POP	BC
0B10A3 3E75                A  4657    	LD	A,%75
0B10A5 32 D8 46 0B         A  4658    	LD	(___print_fmt+4),A
0B10A9 21B0FBFF            A  4659    	LD	HL,-1104
0B10AD DDE5C1              A  4660    	LD	BC,IX
0B10B0 09                  A  4661    	ADD	HL,BC
0B10B1 ED07                A  4662    	LD	BC,(HL)
0B10B3 CD 1E 3A 0B         A  4663    	CALL	__stoiu
0B10B7 E5C1                A  4664    	LD	BC,HL
0B10B9 CD 20 41 0B         A  4665    	CALL	__itol
0B10BD C5D1                A  4666    	LD	DE,BC
0B10BF 4F                  A  4667    	LD	C,A
0B10C0 0600                A  4668    	LD	B,%0
0B10C2 C5                  A  4669    	PUSH	BC
0B10C3 D5                  A  4670    	PUSH	DE
0B10C4 CD AA 3A 0B         A  4671    	CALL	__u_uitoa
0B10C8 C1                  A  4672    	POP	BC
0B10C9 C1                  A  4673    	POP	BC
0B10CA 01 85 44 0B         A  4674    	LD	BC,L__78
0B10CE C5                  A  4675    	PUSH	BC
0B10CF CD 6C 38 0B         A  4676    	CALL	___print_sendstring
0B10D3 C1                  A  4677    	POP	BC
0B10D4 3E75                A  4678    	LD	A,%75
0B10D6 32 D8 46 0B         A  4679    	LD	(___print_fmt+4),A
0B10DA 21B2FBFF            A  4680    	LD	HL,-1102
0B10DE DDE5C1              A  4681    	LD	BC,IX
0B10E1 09                  A  4682    	ADD	HL,BC
0B10E2 7E                  A  4683    	LD	A,(HL)
0B10E3 B7ED62              A  4684    	UEXT	HL
0B10E6 6F                  A  4685    	LD	L,A
0B10E7 E5C1                A  4686    	LD	BC,HL
0B10E9 CD 20 41 0B         A  4687    	CALL	__itol
0B10ED C5D1                A  4688    	LD	DE,BC
0B10EF 4F                  A  4689    	LD	C,A
0B10F0 0600                A  4690    	LD	B,%0
0B10F2 C5                  A  4691    	PUSH	BC
0B10F3 D5                  A  4692    	PUSH	DE
0B10F4 CD AA 3A 0B         A  4693    	CALL	__u_uitoa
0B10F8 C1                  A  4694    	POP	BC
0B10F9 C1                  A  4695    	POP	BC
0B10FA 01 89 44 0B         A  4696    	LD	BC,L__79
0B10FE C5                  A  4697    	PUSH	BC
0B10FF CD 6C 38 0B         A  4698    	CALL	___print_sendstring
0B1103 C1                  A  4699    	POP	BC
0B1104 3E75                A  4700    	LD	A,%75
0B1106 32 D8 46 0B         A  4701    	LD	(___print_fmt+4),A
0B110A FD21BFFB FF         A  4702    	LD	IY,-1089
0B110F DDE5C1              A  4703    	LD	BC,IX
0B1112 FD09                A  4704    	ADD	IY,BC
0B1114 FD0700              A  4705    	LD	BC,(IY)
0B1117 FD7E03              A  4706    	LD	A,(IY+%3)
0B111A 2600                A  4707    	LD	H,%0
0B111C 6F                  A  4708    	LD	L,A
0B111D E5                  A  4709    	PUSH	HL
0B111E C5                  A  4710    	PUSH	BC
0B111F CD AA 3A 0B         A  4711    	CALL	__u_uitoa
0B1123 C1                  A  4712    	POP	BC
0B1124 C1                  A  4713    	POP	BC
0B1125 01 9D 44 0B         A  4714    	LD	BC,L__80
0B1129 C5                  A  4715    	PUSH	BC
0B112A CD 6C 38 0B         A  4716    	CALL	___print_sendstring
0B112E C1                  A  4717    	POP	BC
0B112F 3E75                A  4718    	LD	A,%75
0B1131 32 D8 46 0B         A  4719    	LD	(___print_fmt+4),A
0B1135 FD21BBFB FF         A  4720    	LD	IY,-1093
0B113A DDE5C1              A  4721    	LD	BC,IX
0B113D FD09                A  4722    	ADD	IY,BC
0B113F FD0700              A  4723    	LD	BC,(IY)
0B1142 FD7E03              A  4724    	LD	A,(IY+%3)
0B1145 2600                A  4725    	LD	H,%0
0B1147 6F                  A  4726    	LD	L,A
0B1148 E5                  A  4727    	PUSH	HL
0B1149 C5                  A  4728    	PUSH	BC
0B114A CD AA 3A 0B         A  4729    	CALL	__u_uitoa
0B114E C1                  A  4730    	POP	BC
0B114F C1                  A  4731    	POP	BC
0B1150 01 AD 44 0B         A  4732    	LD	BC,L__81
0B1154 C5                  A  4733    	PUSH	BC
0B1155 CD 6C 38 0B         A  4734    	CALL	___print_sendstring
0B1159 C1                  A  4735    	POP	BC
                           A  4736    ;  409	
                           A  4737    ;  410		if ((bmp.compression == 3) || (bmp.
                           A  4738    .LINE 410
                           A  4739    
0B115A FD21BFFB FF         A  4740    	LD	IY,-1089
0B115F DDE5C1              A  4741    	LD	BC,IX
0B1162 FD09                A  4742    	ADD	IY,BC
0B1164 FD2700              A  4743    	LD	HL,(IY)
0B1167 FD5E03              A  4744    	LD	E,(IY+%3)
0B116A 01030000            A  4745    	LD	BC,3
0B116E AF                  A  4746    	XOR	A,A
0B116F CD 6A 41 0B         A  4747    	CALL	__lcmpu
0B1173 28 3A               A  4748    	JR	Z,L_130
0B1175 FD21BFFB FF         A  4749    	LD	IY,-1089
0B117A DDE5C1              A  4750    	LD	BC,IX
0B117D FD09                A  4751    	ADD	IY,BC
0B117F FD2700              A  4752    	LD	HL,(IY)
0B1182 FD5E03              A  4753    	LD	E,(IY+%3)
0B1185 01060000            A  4754    	LD	BC,6
0B1189 AF                  A  4755    	XOR	A,A
0B118A CD 6A 41 0B         A  4756    	CALL	__lcmpu
0B118E C2 EB 15 0B         A  4757    	JR	NZ,L_131
0B1192 FD21BBFB FF         A  4758    	LD	IY,-1093
0B1197 DDE5C1              A  4759    	LD	BC,IX
0B119A FD09                A  4760    	ADD	IY,BC
0B119C FD2700              A  4761    	LD	HL,(IY)
0B119F FD5E03              A  4762    	LD	E,(IY+%3)
0B11A2 016C0000            A  4763    	LD	BC,108
0B11A6 AF                  A  4764    	XOR	A,A
0B11A7 CD 6A 41 0B         A  4765    	CALL	__lcmpu
0B11AB DA EB 15 0B         A  4766    	JR	C,L_131
0B11AF                     A  4767    L_130:
                           A  4768    ;  411			
                           A  4769    ;  412			if (bmp.bmp_bitdepth == 32) {
                           A  4770    .LINE 412
                           A  4771    
0B11AF 21B2FBFF            A  4772    	LD	HL,-1102
0B11B3 DDE5C1              A  4773    	LD	BC,IX
0B11B6 09                  A  4774    	ADD	HL,BC
0B11B7 7E                  A  4775    	LD	A,(HL)
0B11B8 FE20                A  4776    	CP	A,%20
0B11BA C2 68 14 0B         A  4777    	JR	NZ,L_129
                           A  4778    ;  413								
                           A  4779    ;  414				bmp.redBitField = *(uint32_
                           A  4780    .LINE 414
                           A  4781    
0B11BE DD31FD              A  4782    	LD	IY,(IX+%FFFFFFFD)
0B11C1 ED2328              A  4783    	LEA	HL,IY+%28
0B11C4 ED07                A  4784    	LD	BC,(HL)
0B11C6 23                  A  4785    	INC	HL
0B11C7 23                  A  4786    	INC	HL
0B11C8 23                  A  4787    	INC	HL
0B11C9 7E                  A  4788    	LD	A,(HL)
0B11CA FD21C3FB FF         A  4789    	LD	IY,-1085
0B11CF DDE5D1              A  4790    	LD	DE,IX
0B11D2 FD19                A  4791    	ADD	IY,DE
0B11D4 FD0F00              A  4792    	LD	(IY),BC
0B11D7 FD7703              A  4793    	LD	(IY+%3),A
                           A  4794    ;  415				bmp.red_pos = getByte(bmp.r
                           A  4795    .LINE 415
                           A  4796    
0B11DA FD21C3FB FF         A  4797    	LD	IY,-1085
0B11DF DDE5C1              A  4798    	LD	BC,IX
0B11E2 FD09                A  4799    	ADD	IY,BC
0B11E4 FD0700              A  4800    	LD	BC,(IY)
0B11E7 FD7E03              A  4801    	LD	A,(IY+%3)
0B11EA 2600                A  4802    	LD	H,%0
0B11EC 6F                  A  4803    	LD	L,A
0B11ED E5                  A  4804    	PUSH	HL
0B11EE C5                  A  4805    	PUSH	BC
0B11EF CD 56 0C 0B         A  4806    	CALL	_getByte
0B11F3 C1                  A  4807    	POP	BC
0B11F4 C1                  A  4808    	POP	BC
0B11F5 DD77D7              A  4809    	LD	(IX+%FFFFFFD7),A
                           A  4810    ;  416				
                           A  4811    ;  417				bmp.greenBitField = *(uint3
                           A  4812    .LINE 417
                           A  4813    
0B11F8 DD31FD              A  4814    	LD	IY,(IX+%FFFFFFFD)
0B11FB ED232C              A  4815    	LEA	HL,IY+%2C
0B11FE ED07                A  4816    	LD	BC,(HL)
0B1200 23                  A  4817    	INC	HL
0B1201 23                  A  4818    	INC	HL
0B1202 23                  A  4819    	INC	HL
0B1203 7E                  A  4820    	LD	A,(HL)
0B1204 FD21C7FB FF         A  4821    	LD	IY,-1081
0B1209 DDE5D1              A  4822    	LD	DE,IX
0B120C FD19                A  4823    	ADD	IY,DE
0B120E FD0F00              A  4824    	LD	(IY),BC
0B1211 FD7703              A  4825    	LD	(IY+%3),A
                           A  4826    ;  418				bmp.green_pos = getByte(bmp
                           A  4827    .LINE 418
                           A  4828    
0B1214 FD21C7FB FF         A  4829    	LD	IY,-1081
0B1219 DDE5C1              A  4830    	LD	BC,IX
0B121C FD09                A  4831    	ADD	IY,BC
0B121E FD0700              A  4832    	LD	BC,(IY)
0B1221 FD7E03              A  4833    	LD	A,(IY+%3)
0B1224 2600                A  4834    	LD	H,%0
0B1226 6F                  A  4835    	LD	L,A
0B1227 E5                  A  4836    	PUSH	HL
0B1228 C5                  A  4837    	PUSH	BC
0B1229 CD 56 0C 0B         A  4838    	CALL	_getByte
0B122D C1                  A  4839    	POP	BC
0B122E C1                  A  4840    	POP	BC
0B122F DD77D8              A  4841    	LD	(IX+%FFFFFFD8),A
                           A  4842    ;  419				
                           A  4843    ;  420				bmp.blueBitField = *(uint32
                           A  4844    .LINE 420
                           A  4845    
0B1232 DD31FD              A  4846    	LD	IY,(IX+%FFFFFFFD)
0B1235 ED2330              A  4847    	LEA	HL,IY+%30
0B1238 ED07                A  4848    	LD	BC,(HL)
0B123A 23                  A  4849    	INC	HL
0B123B 23                  A  4850    	INC	HL
0B123C 23                  A  4851    	INC	HL
0B123D 7E                  A  4852    	LD	A,(HL)
0B123E FD21CBFB FF         A  4853    	LD	IY,-1077
0B1243 DDE5D1              A  4854    	LD	DE,IX
0B1246 FD19                A  4855    	ADD	IY,DE
0B1248 FD0F00              A  4856    	LD	(IY),BC
0B124B FD7703              A  4857    	LD	(IY+%3),A
                           A  4858    ;  421				bmp.blue_pos = getByte(bmp.
                           A  4859    .LINE 421
                           A  4860    
0B124E FD21CBFB FF         A  4861    	LD	IY,-1077
0B1253 DDE5C1              A  4862    	LD	BC,IX
0B1256 FD09                A  4863    	ADD	IY,BC
0B1258 FD0700              A  4864    	LD	BC,(IY)
0B125B FD7E03              A  4865    	LD	A,(IY+%3)
0B125E 2600                A  4866    	LD	H,%0
0B1260 6F                  A  4867    	LD	L,A
0B1261 E5                  A  4868    	PUSH	HL
0B1262 C5                  A  4869    	PUSH	BC
0B1263 CD 56 0C 0B         A  4870    	CALL	_getByte
0B1267 C1                  A  4871    	POP	BC
0B1268 C1                  A  4872    	POP	BC
0B1269 DD77D9              A  4873    	LD	(IX+%FFFFFFD9),A
                           A  4874    ;  422				
                           A  4875    ;  423				bmp.alphaBitField = *(uint3
                           A  4876    .LINE 423
                           A  4877    
0B126C DD31FD              A  4878    	LD	IY,(IX+%FFFFFFFD)
0B126F ED2334              A  4879    	LEA	HL,IY+%34
0B1272 ED07                A  4880    	LD	BC,(HL)
0B1274 23                  A  4881    	INC	HL
0B1275 23                  A  4882    	INC	HL
0B1276 23                  A  4883    	INC	HL
0B1277 7E                  A  4884    	LD	A,(HL)
0B1278 FD21CFFB FF         A  4885    	LD	IY,-1073
0B127D DDE5D1              A  4886    	LD	DE,IX
0B1280 FD19                A  4887    	ADD	IY,DE
0B1282 FD0F00              A  4888    	LD	(IY),BC
0B1285 FD7703              A  4889    	LD	(IY+%3),A
                           A  4890    ;  424				bmp.alpha_pos = getByte(bmp
                           A  4891    .LINE 424
                           A  4892    
0B1288 FD21CFFB FF         A  4893    	LD	IY,-1073
0B128D DDE5C1              A  4894    	LD	BC,IX
0B1290 FD09                A  4895    	ADD	IY,BC
0B1292 FD0700              A  4896    	LD	BC,(IY)
0B1295 FD7E03              A  4897    	LD	A,(IY+%3)
0B1298 2600                A  4898    	LD	H,%0
0B129A 6F                  A  4899    	LD	L,A
0B129B E5                  A  4900    	PUSH	HL
0B129C C5                  A  4901    	PUSH	BC
0B129D CD 56 0C 0B         A  4902    	CALL	_getByte
0B12A1 C1                  A  4903    	POP	BC
0B12A2 C1                  A  4904    	POP	BC
0B12A3 DD77DA              A  4905    	LD	(IX+%FFFFFFDA),A
                           A  4906    ;  425				
                           A  4907    ;  426				printf("Red bitfield:   ");
                           A  4908    .LINE 426
                           A  4909    
0B12A6 01 24 3A 0B         A  4910    	LD	BC,___print_uputch
0B12AA ED43 3C 44 0B       A  4911    	LD	(___print_xputch),BC
0B12AF 01 B0 44 0B         A  4912    	LD	BC,L__86
0B12B3 C5                  A  4913    	PUSH	BC
0B12B4 CD 6C 38 0B         A  4914    	CALL	___print_sendstring
0B12B8 C1                  A  4915    	POP	BC
0B12B9 01040000            A  4916    	LD	BC,4
0B12BD C5                  A  4917    	PUSH	BC
0B12BE DDE5E1              A  4918    	LD	HL,IX
0B12C1 01C3FBFF            A  4919    	LD	BC,-1085
0B12C5 09                  A  4920    	ADD	HL,BC
0B12C6 E5C1                A  4921    	LD	BC,HL
0B12C8 C5                  A  4922    	PUSH	BC
0B12C9 CD 27 0D 0B         A  4923    	CALL	_print_bin
0B12CD C1                  A  4924    	POP	BC
0B12CE C1                  A  4925    	POP	BC
0B12CF 01 24 3A 0B         A  4926    	LD	BC,___print_uputch
0B12D3 ED43 3C 44 0B       A  4927    	LD	(___print_xputch),BC
0B12D8 01 C1 44 0B         A  4928    	LD	BC,L__87
0B12DC C5                  A  4929    	PUSH	BC
0B12DD CD 6C 38 0B         A  4930    	CALL	___print_sendstring
0B12E1 C1                  A  4931    	POP	BC
0B12E2 3E75                A  4932    	LD	A,%75
0B12E4 32 D8 46 0B         A  4933    	LD	(___print_fmt+4),A
0B12E8 DD7ED7              A  4934    	LD	A,(IX+%FFFFFFD7)
0B12EB 17ED62              A  4935    	SEXT	HL
0B12EE DD6ED7              A  4936    	LD	L,(IX+%FFFFFFD7)
0B12F1 E5C1                A  4937    	LD	BC,HL
0B12F3 CD 20 41 0B         A  4938    	CALL	__itol
0B12F7 C5D1                A  4939    	LD	DE,BC
0B12F9 4F                  A  4940    	LD	C,A
0B12FA 0600                A  4941    	LD	B,%0
0B12FC C5                  A  4942    	PUSH	BC
0B12FD D5                  A  4943    	PUSH	DE
0B12FE CD AA 3A 0B         A  4944    	CALL	__u_uitoa
0B1302 C1                  A  4945    	POP	BC
0B1303 C1                  A  4946    	POP	BC
0B1304 01 C9 44 0B         A  4947    	LD	BC,L__88
0B1308 C5                  A  4948    	PUSH	BC
0B1309 CD 6C 38 0B         A  4949    	CALL	___print_sendstring
0B130D C1                  A  4950    	POP	BC
                           A  4951    ;  427				printf("Green bitfield: ");
                           A  4952    .LINE 427
                           A  4953    
0B130E 01 24 3A 0B         A  4954    	LD	BC,___print_uputch
0B1312 ED43 3C 44 0B       A  4955    	LD	(___print_xputch),BC
0B1317 01 D6 44 0B         A  4956    	LD	BC,L__89
0B131B C5                  A  4957    	PUSH	BC
0B131C CD 6C 38 0B         A  4958    	CALL	___print_sendstring
0B1320 C1                  A  4959    	POP	BC
0B1321 01040000            A  4960    	LD	BC,4
0B1325 C5                  A  4961    	PUSH	BC
0B1326 DDE5E1              A  4962    	LD	HL,IX
0B1329 01C7FBFF            A  4963    	LD	BC,-1081
0B132D 09                  A  4964    	ADD	HL,BC
0B132E E5C1                A  4965    	LD	BC,HL
0B1330 C5                  A  4966    	PUSH	BC
0B1331 CD 27 0D 0B         A  4967    	CALL	_print_bin
0B1335 C1                  A  4968    	POP	BC
0B1336 C1                  A  4969    	POP	BC
0B1337 01 24 3A 0B         A  4970    	LD	BC,___print_uputch
0B133B ED43 3C 44 0B       A  4971    	LD	(___print_xputch),BC
0B1340 01 E7 44 0B         A  4972    	LD	BC,L__90
0B1344 C5                  A  4973    	PUSH	BC
0B1345 CD 6C 38 0B         A  4974    	CALL	___print_sendstring
0B1349 C1                  A  4975    	POP	BC
0B134A 3E75                A  4976    	LD	A,%75
0B134C 32 D8 46 0B         A  4977    	LD	(___print_fmt+4),A
0B1350 DD7ED8              A  4978    	LD	A,(IX+%FFFFFFD8)
0B1353 17ED62              A  4979    	SEXT	HL
0B1356 DD6ED8              A  4980    	LD	L,(IX+%FFFFFFD8)
0B1359 E5C1                A  4981    	LD	BC,HL
0B135B CD 20 41 0B         A  4982    	CALL	__itol
0B135F C5D1                A  4983    	LD	DE,BC
0B1361 4F                  A  4984    	LD	C,A
0B1362 0600                A  4985    	LD	B,%0
0B1364 C5                  A  4986    	PUSH	BC
0B1365 D5                  A  4987    	PUSH	DE
0B1366 CD AA 3A 0B         A  4988    	CALL	__u_uitoa
0B136A C1                  A  4989    	POP	BC
0B136B C1                  A  4990    	POP	BC
0B136C 01 EF 44 0B         A  4991    	LD	BC,L__91
0B1370 C5                  A  4992    	PUSH	BC
0B1371 CD 6C 38 0B         A  4993    	CALL	___print_sendstring
0B1375 C1                  A  4994    	POP	BC
                           A  4995    ;  428				printf("Blue bitfield:  ");
                           A  4996    .LINE 428
                           A  4997    
0B1376 01 24 3A 0B         A  4998    	LD	BC,___print_uputch
0B137A ED43 3C 44 0B       A  4999    	LD	(___print_xputch),BC
0B137F 01 FC 44 0B         A  5000    	LD	BC,L__92
0B1383 C5                  A  5001    	PUSH	BC
0B1384 CD 6C 38 0B         A  5002    	CALL	___print_sendstring
0B1388 C1                  A  5003    	POP	BC
0B1389 01040000            A  5004    	LD	BC,4
0B138D C5                  A  5005    	PUSH	BC
0B138E DDE5E1              A  5006    	LD	HL,IX
0B1391 01CBFBFF            A  5007    	LD	BC,-1077
0B1395 09                  A  5008    	ADD	HL,BC
0B1396 E5C1                A  5009    	LD	BC,HL
0B1398 C5                  A  5010    	PUSH	BC
0B1399 CD 27 0D 0B         A  5011    	CALL	_print_bin
0B139D C1                  A  5012    	POP	BC
0B139E C1                  A  5013    	POP	BC
0B139F 01 24 3A 0B         A  5014    	LD	BC,___print_uputch
0B13A3 ED43 3C 44 0B       A  5015    	LD	(___print_xputch),BC
0B13A8 01 0D 45 0B         A  5016    	LD	BC,L__93
0B13AC C5                  A  5017    	PUSH	BC
0B13AD CD 6C 38 0B         A  5018    	CALL	___print_sendstring
0B13B1 C1                  A  5019    	POP	BC
0B13B2 3E75                A  5020    	LD	A,%75
0B13B4 32 D8 46 0B         A  5021    	LD	(___print_fmt+4),A
0B13B8 DD7ED9              A  5022    	LD	A,(IX+%FFFFFFD9)
0B13BB 17ED62              A  5023    	SEXT	HL
0B13BE DD6ED9              A  5024    	LD	L,(IX+%FFFFFFD9)
0B13C1 E5C1                A  5025    	LD	BC,HL
0B13C3 CD 20 41 0B         A  5026    	CALL	__itol
0B13C7 C5D1                A  5027    	LD	DE,BC
0B13C9 4F                  A  5028    	LD	C,A
0B13CA 0600                A  5029    	LD	B,%0
0B13CC C5                  A  5030    	PUSH	BC
0B13CD D5                  A  5031    	PUSH	DE
0B13CE CD AA 3A 0B         A  5032    	CALL	__u_uitoa
0B13D2 C1                  A  5033    	POP	BC
0B13D3 C1                  A  5034    	POP	BC
0B13D4 01 15 45 0B         A  5035    	LD	BC,L__94
0B13D8 C5                  A  5036    	PUSH	BC
0B13D9 CD 6C 38 0B         A  5037    	CALL	___print_sendstring
0B13DD C1                  A  5038    	POP	BC
                           A  5039    ;  429	
                           A  5040    ;  430				if (bmp.alpha_pos == -1) pr
                           A  5041    .LINE 430
                           A  5042    
0B13DE DD7EDA              A  5043    	LD	A,(IX+%FFFFFFDA)
0B13E1 FEFF                A  5044    	CP	A,%FFFFFFFF
0B13E3 20 17               A  5045    	JR	NZ,L_124
0B13E5 01 24 3A 0B         A  5046    	LD	BC,___print_uputch
0B13E9 ED43 3C 44 0B       A  5047    	LD	(___print_xputch),BC
0B13EE 01 22 45 0B         A  5048    	LD	BC,L__96
0B13F2 C5                  A  5049    	PUSH	BC
0B13F3 CD 6C 38 0B         A  5050    	CALL	___print_sendstring
0B13F7 C1                  A  5051    	POP	BC
                           A  5052    ;  431				else { printf("Alpha bitfie
                           A  5053    .LINE 431
                           A  5054    
0B13F8 C3 EB 15 0B         A  5055    	JR	L_131
0B13FC                     A  5056    L_124:
0B13FC 01 24 3A 0B         A  5057    	LD	BC,___print_uputch
0B1400 ED43 3C 44 0B       A  5058    	LD	(___print_xputch),BC
0B1405 01 35 45 0B         A  5059    	LD	BC,L__97
0B1409 C5                  A  5060    	PUSH	BC
0B140A CD 6C 38 0B         A  5061    	CALL	___print_sendstring
0B140E C1                  A  5062    	POP	BC
0B140F 01040000            A  5063    	LD	BC,4
0B1413 C5                  A  5064    	PUSH	BC
0B1414 DDE5E1              A  5065    	LD	HL,IX
0B1417 01CFFBFF            A  5066    	LD	BC,-1073
0B141B 09                  A  5067    	ADD	HL,BC
0B141C E5C1                A  5068    	LD	BC,HL
0B141E C5                  A  5069    	PUSH	BC
0B141F CD 27 0D 0B         A  5070    	CALL	_print_bin
0B1423 C1                  A  5071    	POP	BC
0B1424 C1                  A  5072    	POP	BC
0B1425 01 24 3A 0B         A  5073    	LD	BC,___print_uputch
0B1429 ED43 3C 44 0B       A  5074    	LD	(___print_xputch),BC
0B142E 01 46 45 0B         A  5075    	LD	BC,L__98
0B1432 C5                  A  5076    	PUSH	BC
0B1433 CD 6C 38 0B         A  5077    	CALL	___print_sendstring
0B1437 C1                  A  5078    	POP	BC
0B1438 3E75                A  5079    	LD	A,%75
0B143A 32 D8 46 0B         A  5080    	LD	(___print_fmt+4),A
0B143E DD7EDA              A  5081    	LD	A,(IX+%FFFFFFDA)
0B1441 17ED62              A  5082    	SEXT	HL
0B1444 DD6EDA              A  5083    	LD	L,(IX+%FFFFFFDA)
0B1447 E5C1                A  5084    	LD	BC,HL
0B1449 CD 20 41 0B         A  5085    	CALL	__itol
0B144D C5D1                A  5086    	LD	DE,BC
0B144F 4F                  A  5087    	LD	C,A
0B1450 0600                A  5088    	LD	B,%0
0B1452 C5                  A  5089    	PUSH	BC
0B1453 D5                  A  5090    	PUSH	DE
0B1454 CD AA 3A 0B         A  5091    	CALL	__u_uitoa
0B1458 C1                  A  5092    	POP	BC
0B1459 C1                  A  5093    	POP	BC
0B145A 01 4E 45 0B         A  5094    	LD	BC,L__99
0B145E C5                  A  5095    	PUSH	BC
0B145F CD 6C 38 0B         A  5096    	CALL	___print_sendstring
0B1463 C1                  A  5097    	POP	BC
                           A  5098    ;  432						
                           A  5099    ;  433			} else if (bmp.bmp_bitdepth == 
                           A  5100    .LINE 433
                           A  5101    
0B1464 C3 EB 15 0B         A  5102    	JR	L_131
0B1468                     A  5103    L_129:
0B1468 21B2FBFF            A  5104    	LD	HL,-1102
0B146C 09                  A  5105    	ADD	HL,BC
0B146D 7E                  A  5106    	LD	A,(HL)
0B146E FE10                A  5107    	CP	A,%10
0B1470 C2 EB 15 0B         A  5108    	JR	NZ,L_131
                           A  5109    ;  434				
                           A  5110    ;  435				uint16_t redmask, greenmask
                           A  5111    ;  436				
                           A  5112    ;  437				bmp.redBitField = *(uint32_
                           A  5113    .LINE 437
                           A  5114    
0B1474 DD31FD              A  5115    	LD	IY,(IX+%FFFFFFFD)
0B1477 ED2328              A  5116    	LEA	HL,IY+%28
0B147A ED07                A  5117    	LD	BC,(HL)
0B147C 23                  A  5118    	INC	HL
0B147D 23                  A  5119    	INC	HL
0B147E 23                  A  5120    	INC	HL
0B147F 7E                  A  5121    	LD	A,(HL)
0B1480 FD21C3FB FF         A  5122    	LD	IY,-1085
0B1485 DDE5D1              A  5123    	LD	DE,IX
0B1488 FD19                A  5124    	ADD	IY,DE
0B148A FD0F00              A  5125    	LD	(IY),BC
0B148D FD7703              A  5126    	LD	(IY+%3),A
                           A  5127    ;  438				redmask = (uint16_t)(bmp.re
                           A  5128    .LINE 438
                           A  5129    
0B1490 21C3FBFF            A  5130    	LD	HL,-1085
0B1494 DDE5C1              A  5131    	LD	BC,IX
0B1497 09                  A  5132    	ADD	HL,BC
0B1498 ED27                A  5133    	LD	HL,(HL)
0B149A DD75FA              A  5134    	LD	(IX+%FFFFFFFA),L
0B149D DD74FB              A  5135    	LD	(IX+%FFFFFFFB),H
                           A  5136    ;  439				
                           A  5137    ;  440				bmp.greenBitField = *(uint3
                           A  5138    .LINE 440
                           A  5139    
0B14A0 DD31FD              A  5140    	LD	IY,(IX+%FFFFFFFD)
0B14A3 ED232C              A  5141    	LEA	HL,IY+%2C
0B14A6 ED07                A  5142    	LD	BC,(HL)
0B14A8 23                  A  5143    	INC	HL
0B14A9 23                  A  5144    	INC	HL
0B14AA 23                  A  5145    	INC	HL
0B14AB 7E                  A  5146    	LD	A,(HL)
0B14AC FD21C7FB FF         A  5147    	LD	IY,-1081
0B14B1 DDE5D1              A  5148    	LD	DE,IX
0B14B4 FD19                A  5149    	ADD	IY,DE
0B14B6 FD0F00              A  5150    	LD	(IY),BC
0B14B9 FD7703              A  5151    	LD	(IY+%3),A
                           A  5152    ;  441				greenmask = (uint16_t)(bmp.
                           A  5153    .LINE 441
                           A  5154    
0B14BC 21C7FBFF            A  5155    	LD	HL,-1081
0B14C0 DDE5C1              A  5156    	LD	BC,IX
0B14C3 09                  A  5157    	ADD	HL,BC
0B14C4 ED27                A  5158    	LD	HL,(HL)
0B14C6 DD75F8              A  5159    	LD	(IX+%FFFFFFF8),L
0B14C9 DD74F9              A  5160    	LD	(IX+%FFFFFFF9),H
                           A  5161    ;  442				
                           A  5162    ;  443				bmp.blueBitField = *(uint32
                           A  5163    .LINE 443
                           A  5164    
0B14CC DD31FD              A  5165    	LD	IY,(IX+%FFFFFFFD)
0B14CF ED2330              A  5166    	LEA	HL,IY+%30
0B14D2 ED07                A  5167    	LD	BC,(HL)
0B14D4 23                  A  5168    	INC	HL
0B14D5 23                  A  5169    	INC	HL
0B14D6 23                  A  5170    	INC	HL
0B14D7 7E                  A  5171    	LD	A,(HL)
0B14D8 FD21CBFB FF         A  5172    	LD	IY,-1077
0B14DD DDE5D1              A  5173    	LD	DE,IX
0B14E0 FD19                A  5174    	ADD	IY,DE
0B14E2 FD0F00              A  5175    	LD	(IY),BC
0B14E5 FD7703              A  5176    	LD	(IY+%3),A
                           A  5177    ;  444				bluemask = (uint16_t)(bmp.b
                           A  5178    .LINE 444
                           A  5179    
0B14E8 21CBFBFF            A  5180    	LD	HL,-1077
0B14EC DDE5C1              A  5181    	LD	BC,IX
0B14EF 09                  A  5182    	ADD	HL,BC
0B14F0 ED27                A  5183    	LD	HL,(HL)
0B14F2 DD75F6              A  5184    	LD	(IX+%FFFFFFF6),L
0B14F5 DD74F7              A  5185    	LD	(IX+%FFFFFFF7),H
                           A  5186    ;  445				
                           A  5187    ;  446				bmp.alphaBitField = *(uint3
                           A  5188    .LINE 446
                           A  5189    
0B14F8 DD31FD              A  5190    	LD	IY,(IX+%FFFFFFFD)
0B14FB ED2334              A  5191    	LEA	HL,IY+%34
0B14FE ED07                A  5192    	LD	BC,(HL)
0B1500 23                  A  5193    	INC	HL
0B1501 23                  A  5194    	INC	HL
0B1502 23                  A  5195    	INC	HL
0B1503 7E                  A  5196    	LD	A,(HL)
0B1504 FD21CFFB FF         A  5197    	LD	IY,-1073
0B1509 DDE5D1              A  5198    	LD	DE,IX
0B150C FD19                A  5199    	ADD	IY,DE
0B150E FD0F00              A  5200    	LD	(IY),BC
0B1511 FD7703              A  5201    	LD	(IY+%3),A
                           A  5202    ;  447				alphamask = (uint16_t)(bmp.
                           A  5203    .LINE 447
                           A  5204    
0B1514 21CFFBFF            A  5205    	LD	HL,-1073
0B1518 DDE5C1              A  5206    	LD	BC,IX
0B151B 09                  A  5207    	ADD	HL,BC
0B151C ED27                A  5208    	LD	HL,(HL)
0B151E DD75F4              A  5209    	LD	(IX+%FFFFFFF4),L
0B1521 DD74F5              A  5210    	LD	(IX+%FFFFFFF5),H
                           A  5211    ;  448				
                           A  5212    ;  449				printf("Red bitfield:   ");
                           A  5213    .LINE 449
                           A  5214    
0B1524 01 24 3A 0B         A  5215    	LD	BC,___print_uputch
0B1528 ED43 3C 44 0B       A  5216    	LD	(___print_xputch),BC
0B152D 01 5B 45 0B         A  5217    	LD	BC,L__101
0B1531 C5                  A  5218    	PUSH	BC
0B1532 CD 6C 38 0B         A  5219    	CALL	___print_sendstring
0B1536 C1                  A  5220    	POP	BC
0B1537 01020000            A  5221    	LD	BC,2
0B153B C5                  A  5222    	PUSH	BC
0B153C ED65FA              A  5223    	PEA	IX+%FFFFFFFA
0B153F CD 27 0D 0B         A  5224    	CALL	_print_bin
0B1543 C1                  A  5225    	POP	BC
0B1544 C1                  A  5226    	POP	BC
                           A  5227    ;  450				printf("\r\nGreen bitfield:
                           A  5228    .LINE 450
                           A  5229    
0B1545 01 24 3A 0B         A  5230    	LD	BC,___print_uputch
0B1549 ED43 3C 44 0B       A  5231    	LD	(___print_xputch),BC
0B154E 01 6C 45 0B         A  5232    	LD	BC,L__102
0B1552 C5                  A  5233    	PUSH	BC
0B1553 CD 6C 38 0B         A  5234    	CALL	___print_sendstring
0B1557 C1                  A  5235    	POP	BC
0B1558 01020000            A  5236    	LD	BC,2
0B155C C5                  A  5237    	PUSH	BC
0B155D ED65F8              A  5238    	PEA	IX+%FFFFFFF8
0B1560 CD 27 0D 0B         A  5239    	CALL	_print_bin
0B1564 C1                  A  5240    	POP	BC
0B1565 C1                  A  5241    	POP	BC
                           A  5242    ;  451				printf("\r\nBlue bitfield: 
                           A  5243    .LINE 451
                           A  5244    
0B1566 01 24 3A 0B         A  5245    	LD	BC,___print_uputch
0B156A ED43 3C 44 0B       A  5246    	LD	(___print_xputch),BC
0B156F 01 7F 45 0B         A  5247    	LD	BC,L__103
0B1573 C5                  A  5248    	PUSH	BC
0B1574 CD 6C 38 0B         A  5249    	CALL	___print_sendstring
0B1578 C1                  A  5250    	POP	BC
0B1579 01020000            A  5251    	LD	BC,2
0B157D C5                  A  5252    	PUSH	BC
0B157E ED65F6              A  5253    	PEA	IX+%FFFFFFF6
0B1581 CD 27 0D 0B         A  5254    	CALL	_print_bin
0B1585 C1                  A  5255    	POP	BC
0B1586 C1                  A  5256    	POP	BC
                           A  5257    ;  452	
                           A  5258    ;  453				if (bmp.alphaBitField == 0)
                           A  5259    .LINE 453
                           A  5260    
0B1587 FD21CFFB FF         A  5261    	LD	IY,-1073
0B158C DDE5C1              A  5262    	LD	BC,IX
0B158F FD09                A  5263    	ADD	IY,BC
0B1591 FD2700              A  5264    	LD	HL,(IY)
0B1594 FD5E03              A  5265    	LD	E,(IY+%3)
0B1597 01000000            A  5266    	LD	BC,0
0B159B AF                  A  5267    	XOR	A,A
0B159C CD 6A 41 0B         A  5268    	CALL	__lcmpu
0B15A0 20 15               A  5269    	JR	NZ,L_126
0B15A2 01 24 3A 0B         A  5270    	LD	BC,___print_uputch
0B15A6 ED43 3C 44 0B       A  5271    	LD	(___print_xputch),BC
0B15AB 01 92 45 0B         A  5272    	LD	BC,L__105
0B15AF C5                  A  5273    	PUSH	BC
0B15B0 CD 6C 38 0B         A  5274    	CALL	___print_sendstring
0B15B4 C1                  A  5275    	POP	BC
                           A  5276    ;  454				else { printf("\r\nAlpha bi
                           A  5277    .LINE 454
                           A  5278    
0B15B5 18 34               A  5279    	JR	L_131
0B15B7                     A  5280    L_126:
0B15B7 01 24 3A 0B         A  5281    	LD	BC,___print_uputch
0B15BB ED43 3C 44 0B       A  5282    	LD	(___print_xputch),BC
0B15C0 01 A7 45 0B         A  5283    	LD	BC,L__106
0B15C4 C5                  A  5284    	PUSH	BC
0B15C5 CD 6C 38 0B         A  5285    	CALL	___print_sendstring
0B15C9 C1                  A  5286    	POP	BC
0B15CA 01020000            A  5287    	LD	BC,2
0B15CE C5                  A  5288    	PUSH	BC
0B15CF ED65F4              A  5289    	PEA	IX+%FFFFFFF4
0B15D2 CD 27 0D 0B         A  5290    	CALL	_print_bin
0B15D6 C1                  A  5291    	POP	BC
0B15D7 C1                  A  5292    	POP	BC
0B15D8 01 24 3A 0B         A  5293    	LD	BC,___print_uputch
0B15DC ED43 3C 44 0B       A  5294    	LD	(___print_xputch),BC
0B15E1 01 BA 45 0B         A  5295    	LD	BC,L__107
0B15E5 C5                  A  5296    	PUSH	BC
0B15E6 CD 6C 38 0B         A  5297    	CALL	___print_sendstring
0B15EA C1                  A  5298    	POP	BC
                           A  5299    ;  455				
                           A  5300    ;  456			}
                           A  5301    ;  457			
                           A  5302    ;  458			
                           A  5303    ;  459		}
0B15EB                     A  5304    L_131:
                           A  5305    .LINE 459
                           A  5306    
                           A  5307    ;  460		
                           A  5308    ;  461		mos_fclose(file);
                           A  5309    .LINE 461
                           A  5310    
0B15EB DD4EFC              A  5311    	LD	C,(IX+%FFFFFFFC)
0B15EE 0600                A  5312    	LD	B,%0
0B15F0 C5                  A  5313    	PUSH	BC
0B15F1 CD A9 34 0B         A  5314    	CALL	_mos_fclose
0B15F5 C1                  A  5315    	POP	BC
                           A  5316    ;  462		return bmp;
                           A  5317    .LINE 462
                           A  5318    
0B15F6 ED2206              A  5319    	LEA	HL,IX+%6
0B15F9 ED17                A  5320    	LD	DE,(HL)
0B15FB DDE5E1              A  5321    	LD	HL,IX
0B15FE 01AEFBFF            A  5322    	LD	BC,-1106
0B1602 09                  A  5323    	ADD	HL,BC
0B1603 01310400            A  5324    	LD	BC,1073
0B1607 EDB0                A  5325    	LDIR	
0B1609 DD2706              A  5326    	LD	HL,(IX+%6)
                           A  5327    ;  463	
                           A  5328    ;  464	}
0B160C                     A  5329    L_132:
                           A  5330    .LINE 464
                           A  5331    
0B160C DDF9                A  5332    	LD	SP,IX
0B160E DDE1                A  5333    	POP	IX
0B1610 C9                  A  5334    	RET	
                           A  5335    
                           A  5336    
                           A  5337    ;**************************** _get_info *******
                           A  5338    ;Name                         Addr/Register   S
                           A  5339    ;_mos_fclose                         IMPORT  --
                           A  5340    ;__u_uitoa                           IMPORT  --
                           A  5341    ;___print_fmt                        IMPORT    
                           A  5342    ;_mos_flseek                         IMPORT  --
                           A  5343    ;_malloc                             IMPORT  --
                           A  5344    ;_mos_fread                          IMPORT  --
                           A  5345    ;___print_sendstring                 IMPORT  --
                           A  5346    ;___print_xputch                     IMPORT    
                           A  5347    ;___print_uputch                     IMPORT  --
                           A  5348    ;_mos_getfil                         IMPORT  --
                           A  5349    ;_mos_fopen                          IMPORT  --
                           A  5350    ;_memset                             IMPORT  --
                           A  5351    ;bmp                                IX-1106   1
                           A  5352    ;initial_header                       IX-33    
                           A  5353    ;fo                                   IX-15    
                           A  5354    ;alphamask                            IX-12    
                           A  5355    ;bluemask                             IX-10    
                           A  5356    ;greenmask                             IX-8    
                           A  5357    ;redmask                               IX-6    
                           A  5358    ;file                                  IX-4    
                           A  5359    ;main_header                           IX-3    
                           A  5360    ;filename                              IX+9    
                           A  5361    
                           A  5362    
                           A  5363    ; Stack Frame Size: 1118 (bytes)
                           A  5364    ;       Spill Code: -3 (instruction)
                           A  5365    
                           A  5366    
                           A  5367    .ENDFUNC "get_info",464,"_get_info"
                           A  5368    	SEGMENT STRSECT
0B4457                     A  5369    L__71:
0B4457 4572726F 723A2063   A  5370    	DB	"Error: could not open "
0B445F 6F756C64 206E6F74 
0B4467 206F7065 6E20 
0B446D 00                  A  5371    	DB	0
0B446E                     A  5372    L__72:
0B446E 2E                  A  5373    	DB	"."
0B446F 0D0A00              A  5374    	DB	13,10,0
0B4472                     A  5375    L__76:
0B4472 44656275 673A2042   A  5376    	DB	"Debug: BMP is "
0B447A 4D502069 7320 
0B4480 00                  A  5377    	DB	0
0B4481                     A  5378    L__77:
0B4481 207820              A  5379    	DB	" x "
0B4484 00                  A  5380    	DB	0
0B4485                     A  5381    L__78:
0B4485 207820              A  5382    	DB	" x "
0B4488 00                  A  5383    	DB	0
0B4489                     A  5384    L__79:
0B4489 2C20636F 6D707265   A  5385    	DB	", compression type "
0B4491 7373696F 6E207479 
0B4499 706520 
0B449C 00                  A  5386    	DB	0
0B449D                     A  5387    L__80:
0B449D 2C20616E 64204449   A  5388    	DB	", and DIB size "
0B44A5 42207369 7A6520 
0B44AC 00                  A  5389    	DB	0
0B44AD                     A  5390    L__81:
0B44AD 0D0A00              A  5391    	DB	13,10,0
0B44B0                     A  5392    L__86:
0B44B0 52656420 62697466   A  5393    	DB	"Red bitfield:   "
0B44B8 69656C64 3A202020 
0B44C0 00                  A  5394    	DB	0
0B44C1                     A  5395    L__87:
0B44C1 20286279 746520     A  5396    	DB	" (byte "
0B44C8 00                  A  5397    	DB	0
0B44C9                     A  5398    L__88:
0B44C9 20696E20 70697865   A  5399    	DB	" in pixel)"
0B44D1 6C29 
0B44D3 0D0A00              A  5400    	DB	13,10,0
0B44D6                     A  5401    L__89:
0B44D6 47726565 6E206269   A  5402    	DB	"Green bitfield: "
0B44DE 74666965 6C643A20 
0B44E6 00                  A  5403    	DB	0
0B44E7                     A  5404    L__90:
0B44E7 20286279 746520     A  5405    	DB	" (byte "
0B44EE 00                  A  5406    	DB	0
0B44EF                     A  5407    L__91:
0B44EF 20696E20 70697865   A  5408    	DB	" in pixel)"
0B44F7 6C29 
0B44F9 0D0A00              A  5409    	DB	13,10,0
0B44FC                     A  5410    L__92:
0B44FC 426C7565 20626974   A  5411    	DB	"Blue bitfield:  "
0B4504 6669656C 643A2020 
0B450C 00                  A  5412    	DB	0
0B450D                     A  5413    L__93:
0B450D 20286279 746520     A  5414    	DB	" (byte "
0B4514 00                  A  5415    	DB	0
0B4515                     A  5416    L__94:
0B4515 20696E20 70697865   A  5417    	DB	" in pixel)"
0B451D 6C29 
0B451F 0D0A00              A  5418    	DB	13,10,0
0B4522                     A  5419    L__96:
0B4522 4E6F2061 6C706861   A  5420    	DB	"No alpha channel"
0B452A 20636861 6E6E656C 
0B4532 0D0A00              A  5421    	DB	13,10,0
0B4535                     A  5422    L__97:
0B4535 416C7068 61206269   A  5423    	DB	"Alpha bitfield: "
0B453D 74666965 6C643A20 
0B4545 00                  A  5424    	DB	0
0B4546                     A  5425    L__98:
0B4546 20286279 746520     A  5426    	DB	" (byte "
0B454D 00                  A  5427    	DB	0
0B454E                     A  5428    L__99:
0B454E 20696E20 70697865   A  5429    	DB	" in pixel)"
0B4556 6C29 
0B4558 0D0A00              A  5430    	DB	13,10,0
0B455B                     A  5431    L__101:
0B455B 52656420 62697466   A  5432    	DB	"Red bitfield:   "
0B4563 69656C64 3A202020 
0B456B 00                  A  5433    	DB	0
0B456C                     A  5434    L__102:
0B456C 0D0A                A  5435    	DB	13,10
0B456E 47726565 6E206269   A  5436    	DB	"Green bitfield: "
0B4576 74666965 6C643A20 
0B457E 00                  A  5437    	DB	0
0B457F                     A  5438    L__103:
0B457F 0D0A                A  5439    	DB	13,10
0B4581 426C7565 20626974   A  5440    	DB	"Blue bitfield:  "
0B4589 6669656C 643A2020 
0B4591 00                  A  5441    	DB	0
0B4592                     A  5442    L__105:
0B4592 0D0A                A  5443    	DB	13,10
0B4594 4E6F2061 6C706861   A  5444    	DB	"No alpha channel"
0B459C 20636861 6E6E656C 
0B45A4 0D0A00              A  5445    	DB	13,10,0
0B45A7                     A  5446    L__106:
0B45A7 0D0A                A  5447    	DB	13,10
0B45A9 416C7068 61206269   A  5448    	DB	"Alpha bitfield: "
0B45B1 74666965 6C643A20 
0B45B9 00                  A  5449    	DB	0
0B45BA                     A  5450    L__107:
0B45BA 0D0A00              A  5451    	DB	13,10,0
                           A  5452    	SEGMENT CODE
                           A  5453    ;  465	
                           A  5454    ;  466	bmp_info load_bmp_clean(const char * fi
0B1611                     A  5455    _load_bmp_clean:
                           A  5456    .DEFINE "_load_bmp_clean"
                           A  5457    
                           A  5458    .VALUE _load_bmp_clean
                           A  5459    
                           A  5460    .CLASS 2
                           A  5461    
                           A  5462    .TAG "NONAME6"
                           A  5463    
                           A  5464    .TYPE 72
                           A  5465    
                           A  5466    .ENDEF
                           A  5467    
                           A  5468    .BEGFUNC "load_bmp_clean",466,"_load_bmp_clean"
                           A  5469    
                           A  5470    .LINE 466
                           A  5471    
                           A  5472    .DEFINE "filename"
                           A  5473    
                           A  5474    .CLASS 65
                           A  5475    
                           A  5476    .VALUE 9
                           A  5477    
                           A  5478    .TYPE 194
                           A  5479    
                           A  5480    .ENDEF
                           A  5481    
                           A  5482    .DEFINE "slot"
                           A  5483    
                           A  5484    .CLASS 65
                           A  5485    
                           A  5486    .VALUE 12
                           A  5487    
                           A  5488    .TYPE 12
                           A  5489    
                           A  5490    .ENDEF
                           A  5491    
                           A  5492    .DEFINE "file"
                           A  5493    
                           A  5494    .CLASS 65
                           A  5495    
                           A  5496    .VALUE -1
                           A  5497    
                           A  5498    .TYPE 12
                           A  5499    
                           A  5500    .ENDEF
                           A  5501    
                           A  5502    .DEFINE "main_header"
                           A  5503    
                           A  5504    .CLASS 65
                           A  5505    
                           A  5506    .VALUE -4
                           A  5507    
                           A  5508    .TYPE 34
                           A  5509    
                           A  5510    .ENDEF
                           A  5511    
                           A  5512    .DEFINE "y"
                           A  5513    
                           A  5514    .CLASS 65
                           A  5515    
                           A  5516    .VALUE -6
                           A  5517    
                           A  5518    .TYPE 3
                           A  5519    
                           A  5520    .ENDEF
                           A  5521    
                           A  5522    .DEFINE "row_rgba2222"
                           A  5523    
                           A  5524    .CLASS 65
                           A  5525    
                           A  5526    .VALUE -9
                           A  5527    
                           A  5528    .TYPE 34
                           A  5529    
                           A  5530    .ENDEF
                           A  5531    
                           A  5532    .DEFINE "x"
                           A  5533    
                           A  5534    .CLASS 65
                           A  5535    
                           A  5536    .VALUE -11
                           A  5537    
                           A  5538    .TYPE 3
                           A  5539    
                           A  5540    .ENDEF
                           A  5541    
                           A  5542    .DEFINE "y"
                           A  5543    
                           A  5544    .CLASS 65
                           A  5545    
                           A  5546    .VALUE -13
                           A  5547    
                           A  5548    .TYPE 3
                           A  5549    
                           A  5550    .ENDEF
                           A  5551    
                           A  5552    .DEFINE "fo"
                           A  5553    
                           A  5554    .CLASS 65
                           A  5555    
                           A  5556    .VALUE -16
                           A  5557    
                           A  5558    .TAG "NONAME5"
                           A  5559    
                           A  5560    .TYPE 40
                           A  5561    
                           A  5562    .ENDEF
                           A  5563    
                           A  5564    .DEFINE "src"
                           A  5565    
                           A  5566    .CLASS 65
                           A  5567    
                           A  5568    .VALUE -19
                           A  5569    
                           A  5570    .TYPE 34
                           A  5571    
                           A  5572    .ENDEF
                           A  5573    
                           A  5574    .DEFINE "index"
                           A  5575    
                           A  5576    .CLASS 65
                           A  5577    
                           A  5578    .VALUE -20
                           A  5579    
                           A  5580    .TYPE 12
                           A  5581    
                           A  5582    .ENDEF
                           A  5583    
                           A  5584    .DEFINE "b"
                           A  5585    
                           A  5586    .CLASS 65
                           A  5587    
                           A  5588    .VALUE -21
                           A  5589    
                           A  5590    .TYPE 12
                           A  5591    
                           A  5592    .ENDEF
                           A  5593    
                           A  5594    .DEFINE "g"
                           A  5595    
                           A  5596    .CLASS 65
                           A  5597    
                           A  5598    .VALUE -22
                           A  5599    
                           A  5600    .TYPE 12
                           A  5601    
                           A  5602    .ENDEF
                           A  5603    
                           A  5604    .DEFINE "r"
                           A  5605    
                           A  5606    .CLASS 65
                           A  5607    
                           A  5608    .VALUE -23
                           A  5609    
                           A  5610    .TYPE 12
                           A  5611    
                           A  5612    .ENDEF
                           A  5613    
                           A  5614    .DEFINE "src"
                           A  5615    
                           A  5616    .CLASS 65
                           A  5617    
                           A  5618    .VALUE -26
                           A  5619    
                           A  5620    .TYPE 34
                           A  5621    
                           A  5622    .ENDEF
                           A  5623    
                           A  5624    .DEFINE "initial_header"
                           A  5625    
                           A  5626    .CLASS 65
                           A  5627    
                           A  5628    .VALUE -44
                           A  5629    
                           A  5630    .DIM 18
                           A  5631    
                           A  5632    .TYPE 98
                           A  5633    
                           A  5634    .ENDEF
                           A  5635    
                           A  5636    .DEFINE "bmp"
                           A  5637    
                           A  5638    .CLASS 65
                           A  5639    
                           A  5640    .VALUE -1117
                           A  5641    
                           A  5642    .TAG "NONAME6"
                           A  5643    
                           A  5644    .TYPE 8
                           A  5645    
                           A  5646    .ENDEF
                           A  5647    
0B1611 DDE5                A  5648    	PUSH	IX
0B1613 DD210000 00         A  5649    	LD	IX,0
0B1618 DD39                A  5650    	ADD	IX,SP
0B161A 2191FBFF            A  5651    	LD	HL,-1135
0B161E 39                  A  5652    	ADD	HL,SP
0B161F F9                  A  5653    	LD	SP,HL
                           A  5654    ;  467		
                           A  5655    ;  468		uint8_t file;
                           A  5656    ;  469		FIL * fo;
                           A  5657    ;  470		bmp_info bmp;
                           A  5658    ;  471		char initial_header[18];
                           A  5659    ;  472		char *main_header;
                           A  5660    ;  473		char * row_rgba2222;
                           A  5661    ;  474		int16_t y = 0;
                           A  5662    ;  475		
                           A  5663    ;  476		memset(&bmp, 0, sizeof(bmp));	
                           A  5664    .LINE 476
                           A  5665    
0B1620 01310400            A  5666    	LD	BC,1073
0B1624 C5                  A  5667    	PUSH	BC
0B1625 01000000            A  5668    	LD	BC,0
0B1629 C5                  A  5669    	PUSH	BC
0B162A DDE5E1              A  5670    	LD	HL,IX
0B162D 01A3FBFF            A  5671    	LD	BC,-1117
0B1631 09                  A  5672    	ADD	HL,BC
0B1632 E5C1                A  5673    	LD	BC,HL
0B1634 C5                  A  5674    	PUSH	BC
0B1635 CD B0 41 0B         A  5675    	CALL	_memset
0B1639 C1                  A  5676    	POP	BC
0B163A C1                  A  5677    	POP	BC
0B163B C1                  A  5678    	POP	BC
                           A  5679    ;  477		
                           A  5680    ;  478		file = mos_fopen(filename, fa_read)
                           A  5681    .LINE 478
                           A  5682    
0B163C 01010000            A  5683    	LD	BC,1
0B1640 C5                  A  5684    	PUSH	BC
0B1641 DD0709              A  5685    	LD	BC,(IX+%9)
0B1644 C5                  A  5686    	PUSH	BC
0B1645 CD 91 34 0B         A  5687    	CALL	_mos_fopen
0B1649 C1                  A  5688    	POP	BC
0B164A C1                  A  5689    	POP	BC
0B164B DD77FF              A  5690    	LD	(IX+%FFFFFFFF),A
                           A  5691    ;  479		fo = (FIL * ) mos_getfil(file);
                           A  5692    .LINE 479
                           A  5693    
0B164E DD4EFF              A  5694    	LD	C,(IX+%FFFFFFFF)
0B1651 0600                A  5695    	LD	B,%0
0B1653 C5                  A  5696    	PUSH	BC
0B1654 CD 17 36 0B         A  5697    	CALL	_mos_getfil
0B1658 C1                  A  5698    	POP	BC
0B1659 DD2FF0              A  5699    	LD	(IX+%FFFFFFF0),HL
                           A  5700    ;  480		
                           A  5701    ;  481	    if (!file) {
                           A  5702    .LINE 481
                           A  5703    
0B165C DD7EFF              A  5704    	LD	A,(IX+%FFFFFFFF)
0B165F B7                  A  5705    	OR	A,A
0B1660 20 40               A  5706    	JR	NZ,L_134
                           A  5707    ;  482	        printf("Error: could not open %
                           A  5708    .LINE 482
                           A  5709    
0B1662 01 24 3A 0B         A  5710    	LD	BC,___print_uputch
0B1666 ED43 3C 44 0B       A  5711    	LD	(___print_xputch),BC
0B166B 01 BD 45 0B         A  5712    	LD	BC,L__110
0B166F C5                  A  5713    	PUSH	BC
0B1670 CD 6C 38 0B         A  5714    	CALL	___print_sendstring
0B1674 C1                  A  5715    	POP	BC
0B1675 DD0709              A  5716    	LD	BC,(IX+%9)
0B1678 C5                  A  5717    	PUSH	BC
0B1679 CD 6C 38 0B         A  5718    	CALL	___print_sendstring
0B167D C1                  A  5719    	POP	BC
0B167E 01 D4 45 0B         A  5720    	LD	BC,L__111
0B1682 C5                  A  5721    	PUSH	BC
0B1683 CD 6C 38 0B         A  5722    	CALL	___print_sendstring
0B1687 C1                  A  5723    	POP	BC
                           A  5724    ;  483	        return bmp;
                           A  5725    .LINE 483
                           A  5726    
0B1688 ED2206              A  5727    	LEA	HL,IX+%6
0B168B ED17                A  5728    	LD	DE,(HL)
0B168D DDE5E1              A  5729    	LD	HL,IX
0B1690 01A3FBFF            A  5730    	LD	BC,-1117
0B1694 09                  A  5731    	ADD	HL,BC
0B1695 01310400            A  5732    	LD	BC,1073
0B1699 EDB0                A  5733    	LDIR	
0B169B DD2706              A  5734    	LD	HL,(IX+%6)
0B169E C3 8E 20 0B         A  5735    	JR	L_176
                           A  5736    ;  484	    }
0B16A2                     A  5737    L_134:
                           A  5738    .LINE 484
                           A  5739    
                           A  5740    ;  485	
                           A  5741    ;  486		mos_fread(file, initial_header, 14 
                           A  5742    .LINE 486
                           A  5743    
0B16A2 01120000            A  5744    	LD	BC,18
0B16A6 C5                  A  5745    	PUSH	BC
0B16A7 ED65D4              A  5746    	PEA	IX+%FFFFFFD4
0B16AA DD4EFF              A  5747    	LD	C,(IX+%FFFFFFFF)
0B16AD 0600                A  5748    	LD	B,%0
0B16AF C5                  A  5749    	PUSH	BC
0B16B0 CD BE 35 0B         A  5750    	CALL	_mos_fread
0B16B4 C1                  A  5751    	POP	BC
0B16B5 C1                  A  5752    	POP	BC
0B16B6 C1                  A  5753    	POP	BC
                           A  5754    ;  487		
                           A  5755    ;  488		bmp.pixels_offset = * (uint32_t * )
                           A  5756    .LINE 488
                           A  5757    
0B16B7 ED22DE              A  5758    	LEA	HL,IX+%FFFFFFDE
0B16BA ED07                A  5759    	LD	BC,(HL)
0B16BC 23                  A  5760    	INC	HL
0B16BD 23                  A  5761    	INC	HL
0B16BE 23                  A  5762    	INC	HL
0B16BF 7E                  A  5763    	LD	A,(HL)
0B16C0 FD21A8FB FF         A  5764    	LD	IY,-1112
0B16C5 DDE5D1              A  5765    	LD	DE,IX
0B16C8 FD19                A  5766    	ADD	IY,DE
0B16CA FD0F00              A  5767    	LD	(IY),BC
0B16CD FD7703              A  5768    	LD	(IY+%3),A
                           A  5769    ;  489	    bmp.main_header_size = * (uint32_t 
                           A  5770    .LINE 489
                           A  5771    
0B16D0 ED22E2              A  5772    	LEA	HL,IX+%FFFFFFE2
0B16D3 ED07                A  5773    	LD	BC,(HL)
0B16D5 23                  A  5774    	INC	HL
0B16D6 23                  A  5775    	INC	HL
0B16D7 23                  A  5776    	INC	HL
0B16D8 7E                  A  5777    	LD	A,(HL)
0B16D9 FD21B0FB FF         A  5778    	LD	IY,-1104
0B16DE DDE5D1              A  5779    	LD	DE,IX
0B16E1 FD19                A  5780    	ADD	IY,DE
0B16E3 FD0F00              A  5781    	LD	(IY),BC
0B16E6 FD7703              A  5782    	LD	(IY+%3),A
                           A  5783    ;  490		
                           A  5784    ;  491		main_header = malloc(bmp.main_heade
                           A  5785    .LINE 491
                           A  5786    
0B16E9 21B0FBFF            A  5787    	LD	HL,-1104
0B16ED DDE5C1              A  5788    	LD	BC,IX
0B16F0 09                  A  5789    	ADD	HL,BC
0B16F1 ED07                A  5790    	LD	BC,(HL)
0B16F3 C5                  A  5791    	PUSH	BC
0B16F4 CD 47 37 0B         A  5792    	CALL	_malloc
0B16F8 C1                  A  5793    	POP	BC
0B16F9 DD2FFC              A  5794    	LD	(IX+%FFFFFFFC),HL
                           A  5795    ;  492		
                           A  5796    ;  493		mos_flseek(file, 14);
                           A  5797    .LINE 493
                           A  5798    
0B16FC 01000000            A  5799    	LD	BC,0
0B1700 C5                  A  5800    	PUSH	BC
0B1701 010E0000            A  5801    	LD	BC,14
0B1705 C5                  A  5802    	PUSH	BC
0B1706 DD4EFF              A  5803    	LD	C,(IX+%FFFFFFFF)
0B1709 0600                A  5804    	LD	B,%0
0B170B C5                  A  5805    	PUSH	BC
0B170C CD F8 35 0B         A  5806    	CALL	_mos_flseek
0B1710 C1                  A  5807    	POP	BC
0B1711 C1                  A  5808    	POP	BC
0B1712 C1                  A  5809    	POP	BC
                           A  5810    ;  494		mos_fread(file, main_header, bmp.ma
                           A  5811    .LINE 494
                           A  5812    
0B1713 21B0FBFF            A  5813    	LD	HL,-1104
0B1717 DDE5C1              A  5814    	LD	BC,IX
0B171A 09                  A  5815    	ADD	HL,BC
0B171B ED07                A  5816    	LD	BC,(HL)
0B171D C5                  A  5817    	PUSH	BC
0B171E DD07FC              A  5818    	LD	BC,(IX+%FFFFFFFC)
0B1721 C5                  A  5819    	PUSH	BC
0B1722 DD4EFF              A  5820    	LD	C,(IX+%FFFFFFFF)
0B1725 0600                A  5821    	LD	B,%0
0B1727 C5                  A  5822    	PUSH	BC
0B1728 CD BE 35 0B         A  5823    	CALL	_mos_fread
0B172C C1                  A  5824    	POP	BC
0B172D C1                  A  5825    	POP	BC
0B172E C1                  A  5826    	POP	BC
                           A  5827    ;  495		
                           A  5828    ;  496		bmp.bmp_width = *(int32_t *) & main
                           A  5829    .LINE 496
                           A  5830    
0B172F DD31FC              A  5831    	LD	IY,(IX+%FFFFFFFC)
0B1732 ED2304              A  5832    	LEA	HL,IY+%4
0B1735 ED07                A  5833    	LD	BC,(HL)
0B1737 21A3FBFF            A  5834    	LD	HL,-1117
0B173B DDE5D1              A  5835    	LD	DE,IX
0B173E 19                  A  5836    	ADD	HL,DE
0B173F 71                  A  5837    	LD	(HL),C
0B1740 23                  A  5838    	INC	HL
0B1741 70                  A  5839    	LD	(HL),B
                           A  5840    ;  497		bmp.bmp_height = *(int32_t *) & mai
                           A  5841    .LINE 497
                           A  5842    
0B1742 ED2308              A  5843    	LEA	HL,IY+%8
0B1745 ED07                A  5844    	LD	BC,(HL)
0B1747 21A5FBFF            A  5845    	LD	HL,-1115
0B174B DDE5D1              A  5846    	LD	DE,IX
0B174E 19                  A  5847    	ADD	HL,DE
0B174F 71                  A  5848    	LD	(HL),C
0B1750 23                  A  5849    	INC	HL
0B1751 70                  A  5850    	LD	(HL),B
                           A  5851    ;  498		bmp.bmp_bitdepth = *(uint16_t *) & 
                           A  5852    .LINE 498
                           A  5853    
0B1752 ED230E              A  5854    	LEA	HL,IY+%E
0B1755 7E                  A  5855    	LD	A,(HL)
0B1756 21A7FBFF            A  5856    	LD	HL,-1113
0B175A DDE5C1              A  5857    	LD	BC,IX
0B175D 09                  A  5858    	ADD	HL,BC
0B175E 77                  A  5859    	LD	(HL),A
                           A  5860    ;  499		bmp.compression = *(uint32_t *) & m
                           A  5861    .LINE 499
                           A  5862    
0B175F ED2310              A  5863    	LEA	HL,IY+%10
0B1762 ED07                A  5864    	LD	BC,(HL)
0B1764 23                  A  5865    	INC	HL
0B1765 23                  A  5866    	INC	HL
0B1766 23                  A  5867    	INC	HL
0B1767 7E                  A  5868    	LD	A,(HL)
0B1768 FD21B4FB FF         A  5869    	LD	IY,-1100
0B176D DDE5D1              A  5870    	LD	DE,IX
0B1770 FD19                A  5871    	ADD	IY,DE
0B1772 FD0F00              A  5872    	LD	(IY),BC
0B1775 FD7703              A  5873    	LD	(IY+%3),A
                           A  5874    ;  500		bmp.color_table_size = * (uint32_t 
                           A  5875    .LINE 500
                           A  5876    
0B1778 DD31FC              A  5877    	LD	IY,(IX+%FFFFFFFC)
0B177B ED2320              A  5878    	LEA	HL,IY+%20
0B177E ED07                A  5879    	LD	BC,(HL)
0B1780 23                  A  5880    	INC	HL
0B1781 23                  A  5881    	INC	HL
0B1782 23                  A  5882    	INC	HL
0B1783 7E                  A  5883    	LD	A,(HL)
0B1784 FD21C8FB FF         A  5884    	LD	IY,-1080
0B1789 DDE5D1              A  5885    	LD	DE,IX
0B178C FD19                A  5886    	ADD	IY,DE
0B178E FD0F00              A  5887    	LD	(IY),BC
0B1791 FD7703              A  5888    	LD	(IY+%3),A
                           A  5889    ;  501	
                           A  5890    ;  502	    if (bmp.color_table_size == 0 && bm
                           A  5891    .LINE 502
                           A  5892    
0B1794 FD21C8FB FF         A  5893    	LD	IY,-1080
0B1799 DDE5C1              A  5894    	LD	BC,IX
0B179C FD09                A  5895    	ADD	IY,BC
0B179E FD2700              A  5896    	LD	HL,(IY)
0B17A1 FD5E03              A  5897    	LD	E,(IY+%3)
0B17A4 01000000            A  5898    	LD	BC,0
0B17A8 AF                  A  5899    	XOR	A,A
0B17A9 CD 6A 41 0B         A  5900    	CALL	__lcmpu
0B17AD 20 22               A  5901    	JR	NZ,L_138
0B17AF 21A7FBFF            A  5902    	LD	HL,-1113
0B17B3 DDE5C1              A  5903    	LD	BC,IX
0B17B6 09                  A  5904    	ADD	HL,BC
0B17B7 7E                  A  5905    	LD	A,(HL)
0B17B8 FE08                A  5906    	CP	A,%8
0B17BA 20 15               A  5907    	JR	NZ,L_138
                           A  5908    ;  503	        bmp.color_table_size = 256;
                           A  5909    .LINE 503
                           A  5910    
0B17BC 01000100            A  5911    	LD	BC,256
0B17C0 FD21C8FB FF         A  5912    	LD	IY,-1080
0B17C5 DDE5D1              A  5913    	LD	DE,IX
0B17C8 FD19                A  5914    	ADD	IY,DE
0B17CA FD0F00              A  5915    	LD	(IY),BC
0B17CD FD360300            A  5916    	LD	(IY+%3),%0
                           A  5917    ;  504	    }
0B17D1                     A  5918    L_138:
                           A  5919    .LINE 504
                           A  5920    
                           A  5921    ;  505	
                           A  5922    ;  506		if (bmp.color_table_size > 0) mos_f
                           A  5923    .LINE 506
                           A  5924    
0B17D1 FD21C8FB FF         A  5925    	LD	IY,-1080
0B17D6 DDE5C1              A  5926    	LD	BC,IX
0B17D9 FD09                A  5927    	ADD	IY,BC
0B17DB FD0700              A  5928    	LD	BC,(IY)
0B17DE FD7E03              A  5929    	LD	A,(IY+%3)
0B17E1 B7                  A  5930    	OR	A,A
0B17E2 ED62                A  5931    	SBC	HL,HL
0B17E4 1E00                A  5932    	LD	E,%0
0B17E6 CD 6A 41 0B         A  5933    	CALL	__lcmpu
0B17EA 30 25               A  5934    	JR	NC,L_139
0B17EC 21C8FBFF            A  5935    	LD	HL,-1080
0B17F0 DDE5C1              A  5936    	LD	BC,IX
0B17F3 09                  A  5937    	ADD	HL,BC
0B17F4 ED27                A  5938    	LD	HL,(HL)
0B17F6 29                  A  5939    	ADD	HL,HL
0B17F7 29                  A  5940    	ADD	HL,HL
0B17F8 E5                  A  5941    	PUSH	HL
0B17F9 DDE5E1              A  5942    	LD	HL,IX
0B17FC 01CCFBFF            A  5943    	LD	BC,-1076
0B1800 09                  A  5944    	ADD	HL,BC
0B1801 E5C1                A  5945    	LD	BC,HL
0B1803 C5                  A  5946    	PUSH	BC
0B1804 DD4EFF              A  5947    	LD	C,(IX+%FFFFFFFF)
0B1807 0600                A  5948    	LD	B,%0
0B1809 C5                  A  5949    	PUSH	BC
0B180A CD BE 35 0B         A  5950    	CALL	_mos_fread
0B180E C1                  A  5951    	POP	BC
0B180F C1                  A  5952    	POP	BC
0B1810 C1                  A  5953    	POP	BC
0B1811                     A  5954    L_139:
                           A  5955    ;  507		
                           A  5956    ;  508		bmp.row_padding = (4 - (bmp.bmp_wid
                           A  5957    .LINE 508
                           A  5958    
0B1811 21A3FBFF            A  5959    	LD	HL,-1117
0B1815 DDE5C1              A  5960    	LD	BC,IX
0B1818 09                  A  5961    	ADD	HL,BC
0B1819 ED07                A  5962    	LD	BC,(HL)
0B181B CD 1E 3A 0B         A  5963    	CALL	__stoiu
0B181F E5D1                A  5964    	LD	DE,HL
0B1821 21A7FBFF            A  5965    	LD	HL,-1113
0B1825 DDE5C1              A  5966    	LD	BC,IX
0B1828 09                  A  5967    	ADD	HL,BC
0B1829 7E                  A  5968    	LD	A,(HL)
0B182A B7ED62              A  5969    	UEXT	HL
0B182D 6F                  A  5970    	LD	L,A
0B182E 01080000            A  5971    	LD	BC,8
0B1832 CD E7 40 0B         A  5972    	CALL	__idivs
0B1836 E5C1                A  5973    	LD	BC,HL
0B1838 D5E1                A  5974    	LD	HL,DE
0B183A CD 86 40 0B         A  5975    	CALL	__imuls
0B183E 01040000            A  5976    	LD	BC,4
0B1842 CD FA 37 0B         A  5977    	CALL	__irems
0B1846 E5C1                A  5978    	LD	BC,HL
0B1848 21040000            A  5979    	LD	HL,4
0B184C B7                  A  5980    	OR	A,A
0B184D ED42                A  5981    	SBC	HL,BC
0B184F 01040000            A  5982    	LD	BC,4
0B1853 CD FA 37 0B         A  5983    	CALL	__irems
0B1857 DD75D0              A  5984    	LD	(IX+%FFFFFFD0),L
0B185A DD74D1              A  5985    	LD	(IX+%FFFFFFD1),H
                           A  5986    ;  509		bmp.non_pad_row = bmp.bmp_width * b
                           A  5987    .LINE 509
                           A  5988    
0B185D 21A3FBFF            A  5989    	LD	HL,-1117
0B1861 DDE5C1              A  5990    	LD	BC,IX
0B1864 09                  A  5991    	ADD	HL,BC
0B1865 ED07                A  5992    	LD	BC,(HL)
0B1867 CD 1E 3A 0B         A  5993    	CALL	__stoiu
0B186B E5D1                A  5994    	LD	DE,HL
0B186D 21A7FBFF            A  5995    	LD	HL,-1113
0B1871 DDE5C1              A  5996    	LD	BC,IX
0B1874 09                  A  5997    	ADD	HL,BC
0B1875 7E                  A  5998    	LD	A,(HL)
0B1876 B7ED62              A  5999    	UEXT	HL
0B1879 6F                  A  6000    	LD	L,A
0B187A E5C1                A  6001    	LD	BC,HL
0B187C D5E1                A  6002    	LD	HL,DE
0B187E CD 86 40 0B         A  6003    	CALL	__imuls
0B1882 01080000            A  6004    	LD	BC,8
0B1886 CD E7 40 0B         A  6005    	CALL	__idivs
0B188A DD75D2              A  6006    	LD	(IX+%FFFFFFD2),L
0B188D DD74D3              A  6007    	LD	(IX+%FFFFFFD3),H
                           A  6008    ;  510		row_rgba2222 = (char * ) malloc(bmp
                           A  6009    .LINE 510
                           A  6010    
0B1890 21A3FBFF            A  6011    	LD	HL,-1117
0B1894 DDE5C1              A  6012    	LD	BC,IX
0B1897 09                  A  6013    	ADD	HL,BC
0B1898 ED07                A  6014    	LD	BC,(HL)
0B189A CD 1E 3A 0B         A  6015    	CALL	__stoiu
0B189E E5                  A  6016    	PUSH	HL
0B189F CD 47 37 0B         A  6017    	CALL	_malloc
0B18A3 C1                  A  6018    	POP	BC
0B18A4 DD2FF7              A  6019    	LD	(IX+%FFFFFFF7),HL
                           A  6020    ;  511		
                           A  6021    ;  512		if ((bmp.compression != 0) && (bmp.
                           A  6022    .LINE 512
                           A  6023    
0B18A7 FD21B4FB FF         A  6024    	LD	IY,-1100
0B18AC DDE5C1              A  6025    	LD	BC,IX
0B18AF FD09                A  6026    	ADD	IY,BC
0B18B1 FD2700              A  6027    	LD	HL,(IY)
0B18B4 FD5E03              A  6028    	LD	E,(IY+%3)
0B18B7 01000000            A  6029    	LD	BC,0
0B18BB AF                  A  6030    	XOR	A,A
0B18BC CD 6A 41 0B         A  6031    	CALL	__lcmpu
0B18C0 28 48               A  6032    	JR	Z,L_174
0B18C2 FD21B4FB FF         A  6033    	LD	IY,-1100
0B18C7 DDE5C1              A  6034    	LD	BC,IX
0B18CA FD09                A  6035    	ADD	IY,BC
0B18CC FD2700              A  6036    	LD	HL,(IY)
0B18CF FD5E03              A  6037    	LD	E,(IY+%3)
0B18D2 01030000            A  6038    	LD	BC,3
0B18D6 AF                  A  6039    	XOR	A,A
0B18D7 CD 6A 41 0B         A  6040    	CALL	__lcmpu
0B18DB 28 2D               A  6041    	JR	Z,L_174
                           A  6042    ;  513			printf("Non standard BMP compre
                           A  6043    .LINE 513
                           A  6044    
0B18DD 01 24 3A 0B         A  6045    	LD	BC,___print_uputch
0B18E1 ED43 3C 44 0B       A  6046    	LD	(___print_xputch),BC
0B18E6 01 D8 45 0B         A  6047    	LD	BC,L__117
0B18EA C5                  A  6048    	PUSH	BC
0B18EB CD 6C 38 0B         A  6049    	CALL	___print_sendstring
0B18EF C1                  A  6050    	POP	BC
                           A  6051    ;  514			return bmp;
                           A  6052    .LINE 514
                           A  6053    
0B18F0 ED2206              A  6054    	LEA	HL,IX+%6
0B18F3 ED17                A  6055    	LD	DE,(HL)
0B18F5 DDE5E1              A  6056    	LD	HL,IX
0B18F8 01A3FBFF            A  6057    	LD	BC,-1117
0B18FC 09                  A  6058    	ADD	HL,BC
0B18FD 01310400            A  6059    	LD	BC,1073
0B1901 EDB0                A  6060    	LDIR	
0B1903 DD2706              A  6061    	LD	HL,(IX+%6)
0B1906 C3 8E 20 0B         A  6062    	JR	L_176
                           A  6063    ;  515		}
0B190A                     A  6064    L_174:
                           A  6065    .LINE 515
                           A  6066    
                           A  6067    ;  516		
                           A  6068    ;  517		if ((bmp.compression == 3) || (bmp.
                           A  6069    .LINE 517
                           A  6070    
0B190A FD21B4FB FF         A  6071    	LD	IY,-1100
0B190F DDE5C1              A  6072    	LD	BC,IX
0B1912 FD09                A  6073    	ADD	IY,BC
0B1914 FD2700              A  6074    	LD	HL,(IY)
0B1917 FD5E03              A  6075    	LD	E,(IY+%3)
0B191A 01030000            A  6076    	LD	BC,3
0B191E AF                  A  6077    	XOR	A,A
0B191F CD 6A 41 0B         A  6078    	CALL	__lcmpu
0B1923 28 3A               A  6079    	JR	Z,L_172
0B1925 FD21B4FB FF         A  6080    	LD	IY,-1100
0B192A DDE5C1              A  6081    	LD	BC,IX
0B192D FD09                A  6082    	ADD	IY,BC
0B192F FD2700              A  6083    	LD	HL,(IY)
0B1932 FD5E03              A  6084    	LD	E,(IY+%3)
0B1935 01060000            A  6085    	LD	BC,6
0B1939 AF                  A  6086    	XOR	A,A
0B193A CD 6A 41 0B         A  6087    	CALL	__lcmpu
0B193E C2 2C 1C 0B         A  6088    	JR	NZ,L_173
0B1942 FD21B0FB FF         A  6089    	LD	IY,-1104
0B1947 DDE5C1              A  6090    	LD	BC,IX
0B194A FD09                A  6091    	ADD	IY,BC
0B194C FD2700              A  6092    	LD	HL,(IY)
0B194F FD5E03              A  6093    	LD	E,(IY+%3)
0B1952 016C0000            A  6094    	LD	BC,108
0B1956 AF                  A  6095    	XOR	A,A
0B1957 CD 6A 41 0B         A  6096    	CALL	__lcmpu
0B195B DA 2C 1C 0B         A  6097    	JR	C,L_173
0B195F                     A  6098    L_172:
                           A  6099    ;  518			
                           A  6100    ;  519			if (bmp.bmp_bitdepth == 16) {
                           A  6101    .LINE 519
                           A  6102    
0B195F 21A7FBFF            A  6103    	LD	HL,-1113
0B1963 DDE5C1              A  6104    	LD	BC,IX
0B1966 09                  A  6105    	ADD	HL,BC
0B1967 7E                  A  6106    	LD	A,(HL)
0B1968 FE10                A  6107    	CP	A,%10
0B196A 20 2D               A  6108    	JR	NZ,L_151
                           A  6109    ;  520				
                           A  6110    ;  521				printf("16-bit BMP files no
                           A  6111    .LINE 521
                           A  6112    
0B196C 01 24 3A 0B         A  6113    	LD	BC,___print_uputch
0B1970 ED43 3C 44 0B       A  6114    	LD	(___print_xputch),BC
0B1975 01 01 46 0B         A  6115    	LD	BC,L__122
0B1979 C5                  A  6116    	PUSH	BC
0B197A CD 6C 38 0B         A  6117    	CALL	___print_sendstring
0B197E C1                  A  6118    	POP	BC
                           A  6119    ;  522				return bmp;
                           A  6120    .LINE 522
                           A  6121    
0B197F ED2206              A  6122    	LEA	HL,IX+%6
0B1982 ED17                A  6123    	LD	DE,(HL)
0B1984 DDE5E1              A  6124    	LD	HL,IX
0B1987 01A3FBFF            A  6125    	LD	BC,-1117
0B198B 09                  A  6126    	ADD	HL,BC
0B198C 01310400            A  6127    	LD	BC,1073
0B1990 EDB0                A  6128    	LDIR	
0B1992 DD2706              A  6129    	LD	HL,(IX+%6)
0B1995 C3 8E 20 0B         A  6130    	JR	L_176
                           A  6131    ;  523	
                           A  6132    ;  524			} else if (bmp.bmp_bitdepth == 
0B1999                     A  6133    L_151:
                           A  6134    .LINE 524
                           A  6135    
0B1999 21A7FBFF            A  6136    	LD	HL,-1113
0B199D 09                  A  6137    	ADD	HL,BC
0B199E 7E                  A  6138    	LD	A,(HL)
0B199F FE20                A  6139    	CP	A,%20
0B19A1 C2 3B 20 0B         A  6140    	JR	NZ,L_175
                           A  6141    ;  525						
                           A  6142    ;  526				char * src;
                           A  6143    ;  527				
                           A  6144    ;  528				bmp.redBitField = *(uint32_
                           A  6145    .LINE 528
                           A  6146    
0B19A5 DD31FC              A  6147    	LD	IY,(IX+%FFFFFFFC)
0B19A8 ED2328              A  6148    	LEA	HL,IY+%28
0B19AB ED07                A  6149    	LD	BC,(HL)
0B19AD 23                  A  6150    	INC	HL
0B19AE 23                  A  6151    	INC	HL
0B19AF 23                  A  6152    	INC	HL
0B19B0 7E                  A  6153    	LD	A,(HL)
0B19B1 FD21B8FB FF         A  6154    	LD	IY,-1096
0B19B6 DDE5D1              A  6155    	LD	DE,IX
0B19B9 FD19                A  6156    	ADD	IY,DE
0B19BB FD0F00              A  6157    	LD	(IY),BC
0B19BE FD7703              A  6158    	LD	(IY+%3),A
                           A  6159    ;  529				bmp.red_pos = getByte(bmp.r
                           A  6160    .LINE 529
                           A  6161    
0B19C1 FD21B8FB FF         A  6162    	LD	IY,-1096
0B19C6 DDE5C1              A  6163    	LD	BC,IX
0B19C9 FD09                A  6164    	ADD	IY,BC
0B19CB FD0700              A  6165    	LD	BC,(IY)
0B19CE FD7E03              A  6166    	LD	A,(IY+%3)
0B19D1 2600                A  6167    	LD	H,%0
0B19D3 6F                  A  6168    	LD	L,A
0B19D4 E5                  A  6169    	PUSH	HL
0B19D5 C5                  A  6170    	PUSH	BC
0B19D6 CD 56 0C 0B         A  6171    	CALL	_getByte
0B19DA C1                  A  6172    	POP	BC
0B19DB C1                  A  6173    	POP	BC
0B19DC DD77CC              A  6174    	LD	(IX+%FFFFFFCC),A
                           A  6175    ;  530				bmp.greenBitField = *(uint3
                           A  6176    .LINE 530
                           A  6177    
0B19DF DD31FC              A  6178    	LD	IY,(IX+%FFFFFFFC)
0B19E2 ED232C              A  6179    	LEA	HL,IY+%2C
0B19E5 ED07                A  6180    	LD	BC,(HL)
0B19E7 23                  A  6181    	INC	HL
0B19E8 23                  A  6182    	INC	HL
0B19E9 23                  A  6183    	INC	HL
0B19EA 7E                  A  6184    	LD	A,(HL)
0B19EB FD21BCFB FF         A  6185    	LD	IY,-1092
0B19F0 DDE5D1              A  6186    	LD	DE,IX
0B19F3 FD19                A  6187    	ADD	IY,DE
0B19F5 FD0F00              A  6188    	LD	(IY),BC
0B19F8 FD7703              A  6189    	LD	(IY+%3),A
                           A  6190    ;  531				bmp.green_pos = getByte(bmp
                           A  6191    .LINE 531
                           A  6192    
0B19FB FD21BCFB FF         A  6193    	LD	IY,-1092
0B1A00 DDE5C1              A  6194    	LD	BC,IX
0B1A03 FD09                A  6195    	ADD	IY,BC
0B1A05 FD0700              A  6196    	LD	BC,(IY)
0B1A08 FD7E03              A  6197    	LD	A,(IY+%3)
0B1A0B 2600                A  6198    	LD	H,%0
0B1A0D 6F                  A  6199    	LD	L,A
0B1A0E E5                  A  6200    	PUSH	HL
0B1A0F C5                  A  6201    	PUSH	BC
0B1A10 CD 56 0C 0B         A  6202    	CALL	_getByte
0B1A14 C1                  A  6203    	POP	BC
0B1A15 C1                  A  6204    	POP	BC
0B1A16 DD77CD              A  6205    	LD	(IX+%FFFFFFCD),A
                           A  6206    ;  532				bmp.blueBitField = *(uint32
                           A  6207    .LINE 532
                           A  6208    
0B1A19 DD31FC              A  6209    	LD	IY,(IX+%FFFFFFFC)
0B1A1C ED2330              A  6210    	LEA	HL,IY+%30
0B1A1F ED07                A  6211    	LD	BC,(HL)
0B1A21 23                  A  6212    	INC	HL
0B1A22 23                  A  6213    	INC	HL
0B1A23 23                  A  6214    	INC	HL
0B1A24 7E                  A  6215    	LD	A,(HL)
0B1A25 FD21C0FB FF         A  6216    	LD	IY,-1088
0B1A2A DDE5D1              A  6217    	LD	DE,IX
0B1A2D FD19                A  6218    	ADD	IY,DE
0B1A2F FD0F00              A  6219    	LD	(IY),BC
0B1A32 FD7703              A  6220    	LD	(IY+%3),A
                           A  6221    ;  533				bmp.blue_pos = getByte(bmp.
                           A  6222    .LINE 533
                           A  6223    
0B1A35 FD21C0FB FF         A  6224    	LD	IY,-1088
0B1A3A DDE5C1              A  6225    	LD	BC,IX
0B1A3D FD09                A  6226    	ADD	IY,BC
0B1A3F FD0700              A  6227    	LD	BC,(IY)
0B1A42 FD7E03              A  6228    	LD	A,(IY+%3)
0B1A45 2600                A  6229    	LD	H,%0
0B1A47 6F                  A  6230    	LD	L,A
0B1A48 E5                  A  6231    	PUSH	HL
0B1A49 C5                  A  6232    	PUSH	BC
0B1A4A CD 56 0C 0B         A  6233    	CALL	_getByte
0B1A4E C1                  A  6234    	POP	BC
0B1A4F C1                  A  6235    	POP	BC
0B1A50 DD77CE              A  6236    	LD	(IX+%FFFFFFCE),A
                           A  6237    ;  534				bmp.alphaBitField = *(uint3
                           A  6238    .LINE 534
                           A  6239    
0B1A53 DD31FC              A  6240    	LD	IY,(IX+%FFFFFFFC)
0B1A56 ED2334              A  6241    	LEA	HL,IY+%34
0B1A59 ED07                A  6242    	LD	BC,(HL)
0B1A5B 23                  A  6243    	INC	HL
0B1A5C 23                  A  6244    	INC	HL
0B1A5D 23                  A  6245    	INC	HL
0B1A5E 7E                  A  6246    	LD	A,(HL)
0B1A5F FD21C4FB FF         A  6247    	LD	IY,-1084
0B1A64 DDE5D1              A  6248    	LD	DE,IX
0B1A67 FD19                A  6249    	ADD	IY,DE
0B1A69 FD0F00              A  6250    	LD	(IY),BC
0B1A6C FD7703              A  6251    	LD	(IY+%3),A
                           A  6252    ;  535				bmp.alpha_pos = getByte(bmp
                           A  6253    .LINE 535
                           A  6254    
0B1A6F FD21C4FB FF         A  6255    	LD	IY,-1084
0B1A74 DDE5C1              A  6256    	LD	BC,IX
0B1A77 FD09                A  6257    	ADD	IY,BC
0B1A79 FD0700              A  6258    	LD	BC,(IY)
0B1A7C FD7E03              A  6259    	LD	A,(IY+%3)
0B1A7F 2600                A  6260    	LD	H,%0
0B1A81 6F                  A  6261    	LD	L,A
0B1A82 E5                  A  6262    	PUSH	HL
0B1A83 C5                  A  6263    	PUSH	BC
0B1A84 CD 56 0C 0B         A  6264    	CALL	_getByte
0B1A88 C1                  A  6265    	POP	BC
0B1A89 C1                  A  6266    	POP	BC
0B1A8A DD77CF              A  6267    	LD	(IX+%FFFFFFCF),A
                           A  6268    ;  536				
                           A  6269    ;  537			    src = (char * ) malloc(bmp.
                           A  6270    .LINE 537
                           A  6271    
0B1A8D 21A3FBFF            A  6272    	LD	HL,-1117
0B1A91 DDE5C1              A  6273    	LD	BC,IX
0B1A94 09                  A  6274    	ADD	HL,BC
0B1A95 ED07                A  6275    	LD	BC,(HL)
0B1A97 CD 1E 3A 0B         A  6276    	CALL	__stoiu
0B1A9B E5D1                A  6277    	LD	DE,HL
0B1A9D 21A7FBFF            A  6278    	LD	HL,-1113
0B1AA1 DDE5C1              A  6279    	LD	BC,IX
0B1AA4 09                  A  6280    	ADD	HL,BC
0B1AA5 7E                  A  6281    	LD	A,(HL)
0B1AA6 B7ED62              A  6282    	UEXT	HL
0B1AA9 6F                  A  6283    	LD	L,A
0B1AAA E5C1                A  6284    	LD	BC,HL
0B1AAC D5E1                A  6285    	LD	HL,DE
0B1AAE CD 86 40 0B         A  6286    	CALL	__imuls
0B1AB2 01080000            A  6287    	LD	BC,8
0B1AB6 CD E7 40 0B         A  6288    	CALL	__idivs
0B1ABA E5                  A  6289    	PUSH	HL
0B1ABB CD 47 37 0B         A  6290    	CALL	_malloc
0B1ABF C1                  A  6291    	POP	BC
0B1AC0 DD2FED              A  6292    	LD	(IX+%FFFFFFED),HL
                           A  6293    ;  538				mos_flseek(file, bmp.pixels
                           A  6294    .LINE 538
                           A  6295    
0B1AC3 21A5FBFF            A  6296    	LD	HL,-1115
0B1AC7 DDE5C1              A  6297    	LD	BC,IX
0B1ACA 09                  A  6298    	ADD	HL,BC
0B1ACB ED07                A  6299    	LD	BC,(HL)
0B1ACD CD 1E 3A 0B         A  6300    	CALL	__stoiu
0B1AD1 E5D1                A  6301    	LD	DE,HL
0B1AD3 1B                  A  6302    	DEC	DE
0B1AD4 DD07D2              A  6303    	LD	BC,(IX+%FFFFFFD2)
0B1AD7 CD 1E 3A 0B         A  6304    	CALL	__stoiu
0B1ADB E5C1                A  6305    	LD	BC,HL
0B1ADD C5E1                A  6306    	LD	HL,BC
0B1ADF 0191FBFF            A  6307    	LD	BC,-1135	; spill
0B1AE3 CD 57 38 0B         A  6308    	CALL	__istix
0B1AE7 DD07D0              A  6309    	LD	BC,(IX+%FFFFFFD0)
0B1AEA CD 1E 3A 0B         A  6310    	CALL	__stoiu
0B1AEE 0191FBFF            A  6311    	LD	BC,-1135	; unspill
0B1AF2 E5                  A  6312    	PUSH	HL
0B1AF3 CD 72 43 0B         A  6313    	CALL	__ildix
0B1AF7 E5C1                A  6314    	LD	BC,HL
0B1AF9 E1                  A  6315    	POP	HL
0B1AFA 09                  A  6316    	ADD	HL,BC
0B1AFB E5C1                A  6317    	LD	BC,HL
0B1AFD D5E1                A  6318    	LD	HL,DE
0B1AFF CD 86 40 0B         A  6319    	CALL	__imuls
0B1B03 E5C1                A  6320    	LD	BC,HL
0B1B05 CD 20 41 0B         A  6321    	CALL	__itol
0B1B09 FD21A8FB FF         A  6322    	LD	IY,-1112
0B1B0E DDE5D1              A  6323    	LD	DE,IX
0B1B11 FD19                A  6324    	ADD	IY,DE
0B1B13 FD2700              A  6325    	LD	HL,(IY)
0B1B16 FD5E03              A  6326    	LD	E,(IY+%3)
0B1B19 CD 3C 36 0B         A  6327    	CALL	__ladd
0B1B1D 4B                  A  6328    	LD	C,E
0B1B1E 0600                A  6329    	LD	B,%0
0B1B20 C5                  A  6330    	PUSH	BC
0B1B21 E5                  A  6331    	PUSH	HL
0B1B22 DD4EFF              A  6332    	LD	C,(IX+%FFFFFFFF)
0B1B25 C5                  A  6333    	PUSH	BC
0B1B26 CD F8 35 0B         A  6334    	CALL	_mos_flseek
0B1B2A C1                  A  6335    	POP	BC
0B1B2B C1                  A  6336    	POP	BC
0B1B2C C1                  A  6337    	POP	BC
                           A  6338    ;  539				clear_buffer(slot);
                           A  6339    .LINE 539
                           A  6340    
0B1B2D DD4E0C              A  6341    	LD	C,(IX+%C)
0B1B30 0600                A  6342    	LD	B,%0
0B1B32 C5                  A  6343    	PUSH	BC
0B1B33 CD 67 05 0B         A  6344    	CALL	_clear_buffer
0B1B37 C1                  A  6345    	POP	BC
                           A  6346    ;  540	
                           A  6347    ;  541				for (y = bmp.bmp_height - 1
                           A  6348    .LINE 541
                           A  6349    
0B1B38 21A5FBFF            A  6350    	LD	HL,-1115
0B1B3C DDE5C1              A  6351    	LD	BC,IX
0B1B3F 09                  A  6352    	ADD	HL,BC
0B1B40 ED27                A  6353    	LD	HL,(HL)
0B1B42 2B                  A  6354    	DEC	HL
0B1B43 DD75FA              A  6355    	LD	(IX+%FFFFFFFA),L
0B1B46 DD74FB              A  6356    	LD	(IX+%FFFFFFFB),H
0B1B49 C3 10 1C 0B         A  6357    	JR	L_147
0B1B4D                     A  6358    L_145:
                           A  6359    ;  542	
                           A  6360    ;  543					//printf("Row: %u\r\n",
                           A  6361    ;  544					mos_fread(file, src, bm
                           A  6362    .LINE 544
                           A  6363    
0B1B4D DD07D2              A  6364    	LD	BC,(IX+%FFFFFFD2)
0B1B50 CD 1E 3A 0B         A  6365    	CALL	__stoiu
0B1B54 E5                  A  6366    	PUSH	HL
0B1B55 DD07ED              A  6367    	LD	BC,(IX+%FFFFFFED)
0B1B58 C5                  A  6368    	PUSH	BC
0B1B59 DD4EFF              A  6369    	LD	C,(IX+%FFFFFFFF)
0B1B5C 0600                A  6370    	LD	B,%0
0B1B5E C5                  A  6371    	PUSH	BC
0B1B5F CD BE 35 0B         A  6372    	CALL	_mos_fread
0B1B63 C1                  A  6373    	POP	BC
0B1B64 C1                  A  6374    	POP	BC
0B1B65 C1                  A  6375    	POP	BC
                           A  6376    ;  545					generic8888_to_rgba2222
                           A  6377    .LINE 545
                           A  6378    
0B1B66 DD4ECF              A  6379    	LD	C,(IX+%FFFFFFCF)
0B1B69 0600                A  6380    	LD	B,%0
0B1B6B C5                  A  6381    	PUSH	BC
0B1B6C DD4ECE              A  6382    	LD	C,(IX+%FFFFFFCE)
0B1B6F C5                  A  6383    	PUSH	BC
0B1B70 DD4ECD              A  6384    	LD	C,(IX+%FFFFFFCD)
0B1B73 C5                  A  6385    	PUSH	BC
0B1B74 DD4ECC              A  6386    	LD	C,(IX+%FFFFFFCC)
0B1B77 C5                  A  6387    	PUSH	BC
0B1B78 21A7FBFF            A  6388    	LD	HL,-1113
0B1B7C DDE5C1              A  6389    	LD	BC,IX
0B1B7F 09                  A  6390    	ADD	HL,BC
0B1B80 7E                  A  6391    	LD	A,(HL)
0B1B81 B7ED62              A  6392    	UEXT	HL
0B1B84 6F                  A  6393    	LD	L,A
0B1B85 01080000            A  6394    	LD	BC,8
0B1B89 CD E7 40 0B         A  6395    	CALL	__idivs
0B1B8D 4D                  A  6396    	LD	C,L
0B1B8E 0600                A  6397    	LD	B,%0
0B1B90 C5                  A  6398    	PUSH	BC
0B1B91 21A3FBFF            A  6399    	LD	HL,-1117
0B1B95 DDE5C1              A  6400    	LD	BC,IX
0B1B98 09                  A  6401    	ADD	HL,BC
0B1B99 ED07                A  6402    	LD	BC,(HL)
0B1B9B CD 1E 3A 0B         A  6403    	CALL	__stoiu
0B1B9F E5                  A  6404    	PUSH	HL
0B1BA0 DD07F7              A  6405    	LD	BC,(IX+%FFFFFFF7)
0B1BA3 C5                  A  6406    	PUSH	BC
0B1BA4 DD07ED              A  6407    	LD	BC,(IX+%FFFFFFED)
0B1BA7 C5                  A  6408    	PUSH	BC
0B1BA8 CD 73 0A 0B         A  6409    	CALL	_generic8888_to_rgba2222
0B1BAC FD211800 00         A  6410    	LD	IY,24
0B1BB1 FD39                A  6411    	ADD	IY,SP
0B1BB3 FDF9                A  6412    	LD	SP,IY
                           A  6413    ;  546					add_stream_to_buffer(sl
                           A  6414    .LINE 546
                           A  6415    
0B1BB5 21A3FBFF            A  6416    	LD	HL,-1117
0B1BB9 DDE5C1              A  6417    	LD	BC,IX
0B1BBC 09                  A  6418    	ADD	HL,BC
0B1BBD ED07                A  6419    	LD	BC,(HL)
0B1BBF C5                  A  6420    	PUSH	BC
0B1BC0 DD07F7              A  6421    	LD	BC,(IX+%FFFFFFF7)
0B1BC3 C5                  A  6422    	PUSH	BC
0B1BC4 DD4E0C              A  6423    	LD	C,(IX+%C)
0B1BC7 0600                A  6424    	LD	B,%0
0B1BC9 C5                  A  6425    	PUSH	BC
0B1BCA CD A6 05 0B         A  6426    	CALL	_add_stream_to_buffer
0B1BCE C1                  A  6427    	POP	BC
0B1BCF C1                  A  6428    	POP	BC
0B1BD0 C1                  A  6429    	POP	BC
                           A  6430    ;  547					mos_flseek(file, fo -> 
                           A  6431    .LINE 547
                           A  6432    
0B1BD1 DD07D2              A  6433    	LD	BC,(IX+%FFFFFFD2)
0B1BD4 CD 1E 3A 0B         A  6434    	CALL	__stoiu
0B1BD8 29                  A  6435    	ADD	HL,HL
0B1BD9 E5D1                A  6436    	LD	DE,HL
0B1BDB DD07D0              A  6437    	LD	BC,(IX+%FFFFFFD0)
0B1BDE CD 1E 3A 0B         A  6438    	CALL	__stoiu
0B1BE2 19                  A  6439    	ADD	HL,DE
0B1BE3 E5C1                A  6440    	LD	BC,HL
0B1BE5 CD 20 41 0B         A  6441    	CALL	__itol
0B1BE9 DD31F0              A  6442    	LD	IY,(IX+%FFFFFFF0)
0B1BEC FD2711              A  6443    	LD	HL,(IY+%11)
0B1BEF FD5E14              A  6444    	LD	E,(IY+%14)
0B1BF2 CD 13 3E 0B         A  6445    	CALL	__lsub
0B1BF6 4B                  A  6446    	LD	C,E
0B1BF7 0600                A  6447    	LD	B,%0
0B1BF9 C5                  A  6448    	PUSH	BC
0B1BFA E5                  A  6449    	PUSH	HL
0B1BFB DD4EFF              A  6450    	LD	C,(IX+%FFFFFFFF)
0B1BFE C5                  A  6451    	PUSH	BC
0B1BFF CD F8 35 0B         A  6452    	CALL	_mos_flseek
0B1C03 C1                  A  6453    	POP	BC
0B1C04 C1                  A  6454    	POP	BC
0B1C05 C1                  A  6455    	POP	BC
0B1C06 DD27FA              A  6456    	LD	HL,(IX+%FFFFFFFA)
0B1C09 2B                  A  6457    	DEC	HL
0B1C0A DD75FA              A  6458    	LD	(IX+%FFFFFFFA),L
0B1C0D DD74FB              A  6459    	LD	(IX+%FFFFFFFB),H
                           A  6460    ;  548	
                           A  6461    ;  549				}
0B1C10                     A  6462    L_147:
                           A  6463    .LINE 549
                           A  6464    
0B1C10 49010000            A  6465    	LD.LIS	BC,0
0B1C14 DD27FA              A  6466    	LD	HL,(IX+%FFFFFFFA)
0B1C17 B7                  A  6467    	OR	A,A
0B1C18 40ED42              A  6468    	SBC.SIS	HL,BC
0B1C1B F2 4D 1B 0B         A  6469    	JP	P,L_145
                           A  6470    ;  550				free(src);
                           A  6471    .LINE 550
                           A  6472    
0B1C1F DD07ED              A  6473    	LD	BC,(IX+%FFFFFFED)
0B1C22 C5                  A  6474    	PUSH	BC
0B1C23 CD 42 36 0B         A  6475    	CALL	_free
0B1C27 C1                  A  6476    	POP	BC
                           A  6477    ;  551				
                           A  6478    ;  552			}
                           A  6479    ;  553			
                           A  6480    ;  554		} else if (bmp.compression == 0) {
                           A  6481    .LINE 554
                           A  6482    
0B1C28 C3 3B 20 0B         A  6483    	JR	L_175
0B1C2C                     A  6484    L_173:
0B1C2C FD21B4FB FF         A  6485    	LD	IY,-1100
0B1C31 DDE5C1              A  6486    	LD	BC,IX
0B1C34 FD09                A  6487    	ADD	IY,BC
0B1C36 FD2700              A  6488    	LD	HL,(IY)
0B1C39 FD5E03              A  6489    	LD	E,(IY+%3)
0B1C3C 01000000            A  6490    	LD	BC,0
0B1C40 AF                  A  6491    	XOR	A,A
0B1C41 CD 6A 41 0B         A  6492    	CALL	__lcmpu
0B1C45 C2 3B 20 0B         A  6493    	JR	NZ,L_175
                           A  6494    ;  555	
                           A  6495    ;  556			if (bmp.bmp_bitdepth == 16) {
                           A  6496    .LINE 556
                           A  6497    
0B1C49 21A7FBFF            A  6498    	LD	HL,-1113
0B1C4D DDE5C1              A  6499    	LD	BC,IX
0B1C50 09                  A  6500    	ADD	HL,BC
0B1C51 7E                  A  6501    	LD	A,(HL)
0B1C52 FE10                A  6502    	CP	A,%10
0B1C54 20 2D               A  6503    	JR	NZ,L_163
                           A  6504    ;  557				
                           A  6505    ;  558				printf("16-bit BMP files no
                           A  6506    .LINE 558
                           A  6507    
0B1C56 01 24 3A 0B         A  6508    	LD	BC,___print_uputch
0B1C5A ED43 3C 44 0B       A  6509    	LD	(___print_xputch),BC
0B1C5F 01 5F 46 0B         A  6510    	LD	BC,L__127
0B1C63 C5                  A  6511    	PUSH	BC
0B1C64 CD 6C 38 0B         A  6512    	CALL	___print_sendstring
0B1C68 C1                  A  6513    	POP	BC
                           A  6514    ;  559				return bmp;
                           A  6515    .LINE 559
                           A  6516    
0B1C69 ED2206              A  6517    	LEA	HL,IX+%6
0B1C6C ED17                A  6518    	LD	DE,(HL)
0B1C6E DDE5E1              A  6519    	LD	HL,IX
0B1C71 01A3FBFF            A  6520    	LD	BC,-1117
0B1C75 09                  A  6521    	ADD	HL,BC
0B1C76 01310400            A  6522    	LD	BC,1073
0B1C7A EDB0                A  6523    	LDIR	
0B1C7C DD2706              A  6524    	LD	HL,(IX+%6)
0B1C7F C3 8E 20 0B         A  6525    	JR	L_176
                           A  6526    ;  560				
                           A  6527    ;  561			} else if (bmp.bmp_bitdepth == 
0B1C83                     A  6528    L_163:
                           A  6529    .LINE 561
                           A  6530    
0B1C83 21A7FBFF            A  6531    	LD	HL,-1113
0B1C87 09                  A  6532    	ADD	HL,BC
0B1C88 7E                  A  6533    	LD	A,(HL)
0B1C89 FE08                A  6534    	CP	A,%8
0B1C8B C2 88 1E 0B         A  6535    	JR	NZ,L_170
                           A  6536    ;  562				
                           A  6537    ;  563				int16_t x,y;
                           A  6538    ;  564				uint8_t index, b, g, r;
                           A  6539    ;  565	
                           A  6540    ;  566				mos_flseek(file, bmp.pixels
                           A  6541    .LINE 566
                           A  6542    
0B1C8F 21A5FBFF            A  6543    	LD	HL,-1115
0B1C93 09                  A  6544    	ADD	HL,BC
0B1C94 ED07                A  6545    	LD	BC,(HL)
0B1C96 CD 1E 3A 0B         A  6546    	CALL	__stoiu
0B1C9A E5D1                A  6547    	LD	DE,HL
0B1C9C 1B                  A  6548    	DEC	DE
0B1C9D DD07D2              A  6549    	LD	BC,(IX+%FFFFFFD2)
0B1CA0 CD 1E 3A 0B         A  6550    	CALL	__stoiu
0B1CA4 E5C1                A  6551    	LD	BC,HL
0B1CA6 C5E1                A  6552    	LD	HL,BC
0B1CA8 0194FBFF            A  6553    	LD	BC,-1132	; spill
0B1CAC CD 57 38 0B         A  6554    	CALL	__istix
0B1CB0 DD07D0              A  6555    	LD	BC,(IX+%FFFFFFD0)
0B1CB3 CD 1E 3A 0B         A  6556    	CALL	__stoiu
0B1CB7 0194FBFF            A  6557    	LD	BC,-1132	; unspill
0B1CBB E5                  A  6558    	PUSH	HL
0B1CBC CD 72 43 0B         A  6559    	CALL	__ildix
0B1CC0 E5C1                A  6560    	LD	BC,HL
0B1CC2 E1                  A  6561    	POP	HL
0B1CC3 09                  A  6562    	ADD	HL,BC
0B1CC4 E5C1                A  6563    	LD	BC,HL
0B1CC6 D5E1                A  6564    	LD	HL,DE
0B1CC8 CD 86 40 0B         A  6565    	CALL	__imuls
0B1CCC E5C1                A  6566    	LD	BC,HL
0B1CCE CD 20 41 0B         A  6567    	CALL	__itol
0B1CD2 FD21A8FB FF         A  6568    	LD	IY,-1112
0B1CD7 DDE5D1              A  6569    	LD	DE,IX
0B1CDA FD19                A  6570    	ADD	IY,DE
0B1CDC FD2700              A  6571    	LD	HL,(IY)
0B1CDF FD5E03              A  6572    	LD	E,(IY+%3)
0B1CE2 CD 3C 36 0B         A  6573    	CALL	__ladd
0B1CE6 4B                  A  6574    	LD	C,E
0B1CE7 0600                A  6575    	LD	B,%0
0B1CE9 C5                  A  6576    	PUSH	BC
0B1CEA E5                  A  6577    	PUSH	HL
0B1CEB DD4EFF              A  6578    	LD	C,(IX+%FFFFFFFF)
0B1CEE C5                  A  6579    	PUSH	BC
0B1CEF CD F8 35 0B         A  6580    	CALL	_mos_flseek
0B1CF3 C1                  A  6581    	POP	BC
0B1CF4 C1                  A  6582    	POP	BC
0B1CF5 C1                  A  6583    	POP	BC
                           A  6584    ;  567				clear_buffer(slot);
                           A  6585    .LINE 567
                           A  6586    
0B1CF6 DD4E0C              A  6587    	LD	C,(IX+%C)
0B1CF9 0600                A  6588    	LD	B,%0
0B1CFB C5                  A  6589    	PUSH	BC
0B1CFC CD 67 05 0B         A  6590    	CALL	_clear_buffer
0B1D00 C1                  A  6591    	POP	BC
                           A  6592    ;  568				
                           A  6593    ;  569				for (y = bmp.bmp_height - 1
                           A  6594    .LINE 569
                           A  6595    
0B1D01 21A5FBFF            A  6596    	LD	HL,-1115
0B1D05 DDE5C1              A  6597    	LD	BC,IX
0B1D08 09                  A  6598    	ADD	HL,BC
0B1D09 ED27                A  6599    	LD	HL,(HL)
0B1D0B 2B                  A  6600    	DEC	HL
0B1D0C DD75F3              A  6601    	LD	(IX+%FFFFFFF3),L
0B1D0F DD74F4              A  6602    	LD	(IX+%FFFFFFF4),H
0B1D12 C3 6F 1E 0B         A  6603    	JR	L_160
0B1D16                     A  6604    L_158:
                           A  6605    ;  570					for (x = 0; x < bmp.bmp
                           A  6606    .LINE 570
                           A  6607    
0B1D16 DD36F500            A  6608    	LD	(IX+%FFFFFFF5),%0
0B1D1A DD36F600            A  6609    	LD	(IX+%FFFFFFF6),%0
0B1D1E C3 EC 1D 0B         A  6610    	JR	L_156
0B1D22                     A  6611    L_154:
                           A  6612    ;  571	
                           A  6613    ;  572						index = (char) mos_
                           A  6614    .LINE 572
                           A  6615    
0B1D22 DD4EFF              A  6616    	LD	C,(IX+%FFFFFFFF)
0B1D25 0600                A  6617    	LD	B,%0
0B1D27 C5                  A  6618    	PUSH	BC
0B1D28 CD BE 34 0B         A  6619    	CALL	_mos_fgetc
0B1D2C C1                  A  6620    	POP	BC
0B1D2D DD77EC              A  6621    	LD	(IX+%FFFFFFEC),A
                           A  6622    ;  573						b = bmp.color_table
                           A  6623    .LINE 573
                           A  6624    
0B1D30 DDE5FDE1            A  6625    	LD	IY,IX
0B1D34 01CCFBFF            A  6626    	LD	BC,-1076
0B1D38 FD09                A  6627    	ADD	IY,BC
0B1D3A 219DFBFF            A  6628    	LD	HL,-1123
0B1D3E DDE5C1              A  6629    	LD	BC,IX
0B1D41 09                  A  6630    	ADD	HL,BC
0B1D42 ED3E                A  6631    	LD	(HL),IY
0B1D44 DD7EEC              A  6632    	LD	A,(IX+%FFFFFFEC)
0B1D47 B7ED62              A  6633    	UEXT	HL
0B1D4A 6F                  A  6634    	LD	L,A
0B1D4B 29                  A  6635    	ADD	HL,HL
0B1D4C 29                  A  6636    	ADD	HL,HL
0B1D4D FD219DFB FF         A  6637    	LD	IY,-1123
0B1D52 DDE5C1              A  6638    	LD	BC,IX
0B1D55 FD09                A  6639    	ADD	IY,BC
0B1D57 FD0700              A  6640    	LD	BC,(IY)
0B1D5A 09                  A  6641    	ADD	HL,BC
0B1D5B FD21A0FB FF         A  6642    	LD	IY,-1120
0B1D60 DDE5C1              A  6643    	LD	BC,IX
0B1D63 FD09                A  6644    	ADD	IY,BC
0B1D65 FD2F00              A  6645    	LD	(IY),HL
0B1D68 21A0FBFF            A  6646    	LD	HL,-1120
0B1D6C DDE5C1              A  6647    	LD	BC,IX
0B1D6F 09                  A  6648    	ADD	HL,BC
0B1D70 ED27                A  6649    	LD	HL,(HL)
0B1D72 7E                  A  6650    	LD	A,(HL)
0B1D73 DD77EB              A  6651    	LD	(IX+%FFFFFFEB),A
                           A  6652    ;  574						g = bmp.color_table
                           A  6653    .LINE 574
                           A  6654    
0B1D76 21A0FBFF            A  6655    	LD	HL,-1120
0B1D7A DDE5C1              A  6656    	LD	BC,IX
0B1D7D 09                  A  6657    	ADD	HL,BC
0B1D7E ED27                A  6658    	LD	HL,(HL)
0B1D80 23                  A  6659    	INC	HL
0B1D81 7E                  A  6660    	LD	A,(HL)
0B1D82 DD77EA              A  6661    	LD	(IX+%FFFFFFEA),A
                           A  6662    ;  575						r = bmp.color_table
                           A  6663    .LINE 575
                           A  6664    
0B1D85 21A0FBFF            A  6665    	LD	HL,-1120
0B1D89 DDE5C1              A  6666    	LD	BC,IX
0B1D8C 09                  A  6667    	ADD	HL,BC
0B1D8D ED31                A  6668    	LD	IY,(HL)
0B1D8F ED2302              A  6669    	LEA	HL,IY+%2
0B1D92 7E                  A  6670    	LD	A,(HL)
0B1D93 DD77E9              A  6671    	LD	(IX+%FFFFFFE9),A
                           A  6672    ;  576						
                           A  6673    ;  577						row_rgba2222[x] = 	
                           A  6674    ;  578											
                           A  6675    ;  579											
                           A  6676    ;  580											
                           A  6677    .LINE 580
                           A  6678    
0B1D96 DD7EEA              A  6679    	LD	A,(IX+%FFFFFFEA)
0B1D99 B7ED62              A  6680    	UEXT	HL
0B1D9C 6F                  A  6681    	LD	L,A
0B1D9D 3E06                A  6682    	LD	A,%6
0B1D9F CD 32 38 0B         A  6683    	CALL	__ishrs_b
0B1DA3 7D                  A  6684    	LD	A,L
0B1DA4 E603                A  6685    	AND	A,%3
0B1DA6 87                  A  6686    	ADD	A,A
0B1DA7 87                  A  6687    	ADD	A,A
0B1DA8 47                  A  6688    	LD	B,A
0B1DA9 DD7EE9              A  6689    	LD	A,(IX+%FFFFFFE9)
0B1DAC B7ED62              A  6690    	UEXT	HL
0B1DAF 6F                  A  6691    	LD	L,A
0B1DB0 3E06                A  6692    	LD	A,%6
0B1DB2 CD 32 38 0B         A  6693    	CALL	__ishrs_b
0B1DB6 7D                  A  6694    	LD	A,L
0B1DB7 E603                A  6695    	AND	A,%3
0B1DB9 4F                  A  6696    	LD	C,A
0B1DBA 78                  A  6697    	LD	A,B
0B1DBB B1                  A  6698    	OR	A,C
0B1DBC 47                  A  6699    	LD	B,A
0B1DBD DD7EEB              A  6700    	LD	A,(IX+%FFFFFFEB)
0B1DC0 B7ED62              A  6701    	UEXT	HL
0B1DC3 6F                  A  6702    	LD	L,A
0B1DC4 3E06                A  6703    	LD	A,%6
0B1DC6 CD 32 38 0B         A  6704    	CALL	__ishrs_b
0B1DCA 7D                  A  6705    	LD	A,L
0B1DCB E603                A  6706    	AND	A,%3
0B1DCD 87                  A  6707    	ADD	A,A
0B1DCE 87                  A  6708    	ADD	A,A
0B1DCF 87                  A  6709    	ADD	A,A
0B1DD0 87                  A  6710    	ADD	A,A
0B1DD1 4F                  A  6711    	LD	C,A
0B1DD2 78                  A  6712    	LD	A,B
0B1DD3 B1                  A  6713    	OR	A,C
0B1DD4 F6C0                A  6714    	OR	A,%C0
0B1DD6 DD07F5              A  6715    	LD	BC,(IX+%FFFFFFF5)
0B1DD9 CD 6A 43 0B         A  6716    	CALL	__stoi
0B1DDD DD07F7              A  6717    	LD	BC,(IX+%FFFFFFF7)
0B1DE0 09                  A  6718    	ADD	HL,BC
0B1DE1 77                  A  6719    	LD	(HL),A
0B1DE2 DD27F5              A  6720    	LD	HL,(IX+%FFFFFFF5)
0B1DE5 23                  A  6721    	INC	HL
0B1DE6 DD75F5              A  6722    	LD	(IX+%FFFFFFF5),L
0B1DE9 DD74F6              A  6723    	LD	(IX+%FFFFFFF6),H
                           A  6724    ;  581						
                           A  6725    ;  582	
                           A  6726    ;  583					}
0B1DEC                     A  6727    L_156:
                           A  6728    .LINE 583
                           A  6729    
0B1DEC 21A3FBFF            A  6730    	LD	HL,-1117
0B1DF0 DDE5C1              A  6731    	LD	BC,IX
0B1DF3 09                  A  6732    	ADD	HL,BC
0B1DF4 ED07                A  6733    	LD	BC,(HL)
0B1DF6 CD 1E 3A 0B         A  6734    	CALL	__stoiu
0B1DFA E5D1                A  6735    	LD	DE,HL
0B1DFC DD07F5              A  6736    	LD	BC,(IX+%FFFFFFF5)
0B1DFF CD 6A 43 0B         A  6737    	CALL	__stoi
0B1E03 B7                  A  6738    	OR	A,A
0B1E04 ED52                A  6739    	SBC	HL,DE
0B1E06 FA 10 1E 0B         A  6740    	JP	M,L__133
0B1E0A EA 22 1D 0B         A  6741    	JP	PE,L_154
0B1E0E 18 04               A  6742    	JR	L__134
0B1E10                     A  6743    L__133:
0B1E10 E2 22 1D 0B         A  6744    	JP	PO,L_154
0B1E14                     A  6745    L__134:
                           A  6746    ;  584					
                           A  6747    ;  585					add_stream_to_buffer(sl
                           A  6748    .LINE 585
                           A  6749    
0B1E14 21A3FBFF            A  6750    	LD	HL,-1117
0B1E18 DDE5C1              A  6751    	LD	BC,IX
0B1E1B 09                  A  6752    	ADD	HL,BC
0B1E1C ED07                A  6753    	LD	BC,(HL)
0B1E1E C5                  A  6754    	PUSH	BC
0B1E1F DD07F7              A  6755    	LD	BC,(IX+%FFFFFFF7)
0B1E22 C5                  A  6756    	PUSH	BC
0B1E23 DD4E0C              A  6757    	LD	C,(IX+%C)
0B1E26 0600                A  6758    	LD	B,%0
0B1E28 C5                  A  6759    	PUSH	BC
0B1E29 CD A6 05 0B         A  6760    	CALL	_add_stream_to_buffer
0B1E2D C1                  A  6761    	POP	BC
0B1E2E C1                  A  6762    	POP	BC
0B1E2F C1                  A  6763    	POP	BC
                           A  6764    ;  586					mos_flseek(file, fo -> 
                           A  6765    .LINE 586
                           A  6766    
0B1E30 DD07D2              A  6767    	LD	BC,(IX+%FFFFFFD2)
0B1E33 CD 1E 3A 0B         A  6768    	CALL	__stoiu
0B1E37 29                  A  6769    	ADD	HL,HL
0B1E38 E5D1                A  6770    	LD	DE,HL
0B1E3A DD07D0              A  6771    	LD	BC,(IX+%FFFFFFD0)
0B1E3D CD 1E 3A 0B         A  6772    	CALL	__stoiu
0B1E41 19                  A  6773    	ADD	HL,DE
0B1E42 E5C1                A  6774    	LD	BC,HL
0B1E44 CD 20 41 0B         A  6775    	CALL	__itol
0B1E48 DD31F0              A  6776    	LD	IY,(IX+%FFFFFFF0)
0B1E4B FD2711              A  6777    	LD	HL,(IY+%11)
0B1E4E FD5E14              A  6778    	LD	E,(IY+%14)
0B1E51 CD 13 3E 0B         A  6779    	CALL	__lsub
0B1E55 4B                  A  6780    	LD	C,E
0B1E56 0600                A  6781    	LD	B,%0
0B1E58 C5                  A  6782    	PUSH	BC
0B1E59 E5                  A  6783    	PUSH	HL
0B1E5A DD4EFF              A  6784    	LD	C,(IX+%FFFFFFFF)
0B1E5D C5                  A  6785    	PUSH	BC
0B1E5E CD F8 35 0B         A  6786    	CALL	_mos_flseek
0B1E62 C1                  A  6787    	POP	BC
0B1E63 C1                  A  6788    	POP	BC
0B1E64 C1                  A  6789    	POP	BC
0B1E65 DD27F3              A  6790    	LD	HL,(IX+%FFFFFFF3)
0B1E68 2B                  A  6791    	DEC	HL
0B1E69 DD75F3              A  6792    	LD	(IX+%FFFFFFF3),L
0B1E6C DD74F4              A  6793    	LD	(IX+%FFFFFFF4),H
                           A  6794    ;  587	
                           A  6795    ;  588				}
0B1E6F                     A  6796    L_160:
                           A  6797    .LINE 588
                           A  6798    
0B1E6F 49010000            A  6799    	LD.LIS	BC,0
0B1E73 DD27F3              A  6800    	LD	HL,(IX+%FFFFFFF3)
0B1E76 B7                  A  6801    	OR	A,A
0B1E77 40ED42              A  6802    	SBC.SIS	HL,BC
0B1E7A F2 84 1E 0B         A  6803    	JP	P,L__135
0B1E7E EA 16 1D 0B         A  6804    	JP	PE,L_158
0B1E82 18 04               A  6805    	JR	L__136
0B1E84                     A  6806    L__135:
0B1E84 E2 16 1D 0B         A  6807    	JP	PO,L_158
0B1E88                     A  6808    L__136:
                           A  6809    ;  589	
                           A  6810    ;  590			}
0B1E88                     A  6811    L_170:
                           A  6812    .LINE 590
                           A  6813    
                           A  6814    ;  591			
                           A  6815    ;  592			if (bmp.bmp_bitdepth == 24) {
                           A  6816    .LINE 592
                           A  6817    
0B1E88 21A7FBFF            A  6818    	LD	HL,-1113
0B1E8C DDE5C1              A  6819    	LD	BC,IX
0B1E8F 09                  A  6820    	ADD	HL,BC
0B1E90 7E                  A  6821    	LD	A,(HL)
0B1E91 FE18                A  6822    	CP	A,%18
0B1E93 C2 3B 20 0B         A  6823    	JR	NZ,L_175
                           A  6824    ;  593			
                           A  6825    ;  594				//uint16_t new_row_size;
                           A  6826    ;  595				
                           A  6827    ;  596			    char * src = (char * ) mall
                           A  6828    .LINE 596
                           A  6829    
0B1E97 21A3FBFF            A  6830    	LD	HL,-1117
0B1E9B 09                  A  6831    	ADD	HL,BC
0B1E9C ED07                A  6832    	LD	BC,(HL)
0B1E9E CD 1E 3A 0B         A  6833    	CALL	__stoiu
0B1EA2 E5D1                A  6834    	LD	DE,HL
0B1EA4 21A7FBFF            A  6835    	LD	HL,-1113
0B1EA8 DDE5C1              A  6836    	LD	BC,IX
0B1EAB 09                  A  6837    	ADD	HL,BC
0B1EAC 7E                  A  6838    	LD	A,(HL)
0B1EAD B7ED62              A  6839    	UEXT	HL
0B1EB0 6F                  A  6840    	LD	L,A
0B1EB1 E5C1                A  6841    	LD	BC,HL
0B1EB3 D5E1                A  6842    	LD	HL,DE
0B1EB5 CD 86 40 0B         A  6843    	CALL	__imuls
0B1EB9 01080000            A  6844    	LD	BC,8
0B1EBD CD E7 40 0B         A  6845    	CALL	__idivs
0B1EC1 E5                  A  6846    	PUSH	HL
0B1EC2 CD 47 37 0B         A  6847    	CALL	_malloc
0B1EC6 C1                  A  6848    	POP	BC
0B1EC7 DD2FE6              A  6849    	LD	(IX+%FFFFFFE6),HL
                           A  6850    ;  597				mos_flseek(file, bmp.pixels
                           A  6851    .LINE 597
                           A  6852    
0B1ECA 21A5FBFF            A  6853    	LD	HL,-1115
0B1ECE DDE5C1              A  6854    	LD	BC,IX
0B1ED1 09                  A  6855    	ADD	HL,BC
0B1ED2 ED07                A  6856    	LD	BC,(HL)
0B1ED4 CD 1E 3A 0B         A  6857    	CALL	__stoiu
0B1ED8 E5D1                A  6858    	LD	DE,HL
0B1EDA 1B                  A  6859    	DEC	DE
0B1EDB DD07D2              A  6860    	LD	BC,(IX+%FFFFFFD2)
0B1EDE CD 1E 3A 0B         A  6861    	CALL	__stoiu
0B1EE2 E5C1                A  6862    	LD	BC,HL
0B1EE4 C5E1                A  6863    	LD	HL,BC
0B1EE6 0197FBFF            A  6864    	LD	BC,-1129	; spill
0B1EEA CD 57 38 0B         A  6865    	CALL	__istix
0B1EEE DD07D0              A  6866    	LD	BC,(IX+%FFFFFFD0)
0B1EF1 CD 1E 3A 0B         A  6867    	CALL	__stoiu
0B1EF5 0197FBFF            A  6868    	LD	BC,-1129	; unspill
0B1EF9 E5                  A  6869    	PUSH	HL
0B1EFA CD 72 43 0B         A  6870    	CALL	__ildix
0B1EFE E5C1                A  6871    	LD	BC,HL
0B1F00 E1                  A  6872    	POP	HL
0B1F01 09                  A  6873    	ADD	HL,BC
0B1F02 E5C1                A  6874    	LD	BC,HL
0B1F04 D5E1                A  6875    	LD	HL,DE
0B1F06 CD 86 40 0B         A  6876    	CALL	__imuls
0B1F0A E5C1                A  6877    	LD	BC,HL
0B1F0C CD 20 41 0B         A  6878    	CALL	__itol
0B1F10 FD21A8FB FF         A  6879    	LD	IY,-1112
0B1F15 DDE5D1              A  6880    	LD	DE,IX
0B1F18 FD19                A  6881    	ADD	IY,DE
0B1F1A FD2700              A  6882    	LD	HL,(IY)
0B1F1D FD5E03              A  6883    	LD	E,(IY+%3)
0B1F20 CD 3C 36 0B         A  6884    	CALL	__ladd
0B1F24 4B                  A  6885    	LD	C,E
0B1F25 0600                A  6886    	LD	B,%0
0B1F27 C5                  A  6887    	PUSH	BC
0B1F28 E5                  A  6888    	PUSH	HL
0B1F29 DD4EFF              A  6889    	LD	C,(IX+%FFFFFFFF)
0B1F2C C5                  A  6890    	PUSH	BC
0B1F2D CD F8 35 0B         A  6891    	CALL	_mos_flseek
0B1F31 C1                  A  6892    	POP	BC
0B1F32 C1                  A  6893    	POP	BC
0B1F33 C1                  A  6894    	POP	BC
                           A  6895    ;  598				clear_buffer(slot);
                           A  6896    .LINE 598
                           A  6897    
0B1F34 DD4E0C              A  6898    	LD	C,(IX+%C)
0B1F37 0600                A  6899    	LD	B,%0
0B1F39 C5                  A  6900    	PUSH	BC
0B1F3A CD 67 05 0B         A  6901    	CALL	_clear_buffer
0B1F3E C1                  A  6902    	POP	BC
                           A  6903    ;  599				
                           A  6904    ;  600				for (y = bmp.bmp_height - 1
                           A  6905    .LINE 600
                           A  6906    
0B1F3F 21A5FBFF            A  6907    	LD	HL,-1115
0B1F43 DDE5C1              A  6908    	LD	BC,IX
0B1F46 09                  A  6909    	ADD	HL,BC
0B1F47 ED27                A  6910    	LD	HL,(HL)
0B1F49 2B                  A  6911    	DEC	HL
0B1F4A DD75FA              A  6912    	LD	(IX+%FFFFFFFA),L
0B1F4D DD74FB              A  6913    	LD	(IX+%FFFFFFFB),H
0B1F50 C3 19 20 0B         A  6914    	JR	L_167
0B1F54                     A  6915    L_165:
                           A  6916    ;  601	
                           A  6917    ;  602					mos_fread(file, src, bm
                           A  6918    .LINE 602
                           A  6919    
0B1F54 DD07D2              A  6920    	LD	BC,(IX+%FFFFFFD2)
0B1F57 CD 1E 3A 0B         A  6921    	CALL	__stoiu
0B1F5B E5                  A  6922    	PUSH	HL
0B1F5C DD07E6              A  6923    	LD	BC,(IX+%FFFFFFE6)
0B1F5F C5                  A  6924    	PUSH	BC
0B1F60 DD4EFF              A  6925    	LD	C,(IX+%FFFFFFFF)
0B1F63 0600                A  6926    	LD	B,%0
0B1F65 C5                  A  6927    	PUSH	BC
0B1F66 CD BE 35 0B         A  6928    	CALL	_mos_fread
0B1F6A C1                  A  6929    	POP	BC
0B1F6B C1                  A  6930    	POP	BC
0B1F6C C1                  A  6931    	POP	BC
                           A  6932    ;  603					generic8888_to_rgba2222
                           A  6933    .LINE 603
                           A  6934    
0B1F6D 01FFFFFF            A  6935    	LD	BC,16777215
0B1F71 C5                  A  6936    	PUSH	BC
0B1F72 01000000            A  6937    	LD	BC,0
0B1F76 C5                  A  6938    	PUSH	BC
0B1F77 01010000            A  6939    	LD	BC,1
0B1F7B C5                  A  6940    	PUSH	BC
0B1F7C 01020000            A  6941    	LD	BC,2
0B1F80 C5                  A  6942    	PUSH	BC
0B1F81 21A7FBFF            A  6943    	LD	HL,-1113
0B1F85 DDE5C1              A  6944    	LD	BC,IX
0B1F88 09                  A  6945    	ADD	HL,BC
0B1F89 7E                  A  6946    	LD	A,(HL)
0B1F8A B7ED62              A  6947    	UEXT	HL
0B1F8D 6F                  A  6948    	LD	L,A
0B1F8E 01080000            A  6949    	LD	BC,8
0B1F92 CD E7 40 0B         A  6950    	CALL	__idivs
0B1F96 4D                  A  6951    	LD	C,L
0B1F97 0600                A  6952    	LD	B,%0
0B1F99 C5                  A  6953    	PUSH	BC
0B1F9A 21A3FBFF            A  6954    	LD	HL,-1117
0B1F9E DDE5C1              A  6955    	LD	BC,IX
0B1FA1 09                  A  6956    	ADD	HL,BC
0B1FA2 ED07                A  6957    	LD	BC,(HL)
0B1FA4 CD 1E 3A 0B         A  6958    	CALL	__stoiu
0B1FA8 E5                  A  6959    	PUSH	HL
0B1FA9 DD07F7              A  6960    	LD	BC,(IX+%FFFFFFF7)
0B1FAC C5                  A  6961    	PUSH	BC
0B1FAD DD07E6              A  6962    	LD	BC,(IX+%FFFFFFE6)
0B1FB0 C5                  A  6963    	PUSH	BC
0B1FB1 CD 73 0A 0B         A  6964    	CALL	_generic8888_to_rgba2222
0B1FB5 FD211800 00         A  6965    	LD	IY,24
0B1FBA FD39                A  6966    	ADD	IY,SP
0B1FBC FDF9                A  6967    	LD	SP,IY
                           A  6968    ;  604					add_stream_to_buffer(sl
                           A  6969    .LINE 604
                           A  6970    
0B1FBE 21A3FBFF            A  6971    	LD	HL,-1117
0B1FC2 DDE5C1              A  6972    	LD	BC,IX
0B1FC5 09                  A  6973    	ADD	HL,BC
0B1FC6 ED07                A  6974    	LD	BC,(HL)
0B1FC8 C5                  A  6975    	PUSH	BC
0B1FC9 DD07F7              A  6976    	LD	BC,(IX+%FFFFFFF7)
0B1FCC C5                  A  6977    	PUSH	BC
0B1FCD DD4E0C              A  6978    	LD	C,(IX+%C)
0B1FD0 0600                A  6979    	LD	B,%0
0B1FD2 C5                  A  6980    	PUSH	BC
0B1FD3 CD A6 05 0B         A  6981    	CALL	_add_stream_to_buffer
0B1FD7 C1                  A  6982    	POP	BC
0B1FD8 C1                  A  6983    	POP	BC
0B1FD9 C1                  A  6984    	POP	BC
                           A  6985    ;  605					mos_flseek(file, fo -> 
                           A  6986    .LINE 605
                           A  6987    
0B1FDA DD07D2              A  6988    	LD	BC,(IX+%FFFFFFD2)
0B1FDD CD 1E 3A 0B         A  6989    	CALL	__stoiu
0B1FE1 29                  A  6990    	ADD	HL,HL
0B1FE2 E5D1                A  6991    	LD	DE,HL
0B1FE4 DD07D0              A  6992    	LD	BC,(IX+%FFFFFFD0)
0B1FE7 CD 1E 3A 0B         A  6993    	CALL	__stoiu
0B1FEB 19                  A  6994    	ADD	HL,DE
0B1FEC E5C1                A  6995    	LD	BC,HL
0B1FEE CD 20 41 0B         A  6996    	CALL	__itol
0B1FF2 DD31F0              A  6997    	LD	IY,(IX+%FFFFFFF0)
0B1FF5 FD2711              A  6998    	LD	HL,(IY+%11)
0B1FF8 FD5E14              A  6999    	LD	E,(IY+%14)
0B1FFB CD 13 3E 0B         A  7000    	CALL	__lsub
0B1FFF 4B                  A  7001    	LD	C,E
0B2000 0600                A  7002    	LD	B,%0
0B2002 C5                  A  7003    	PUSH	BC
0B2003 E5                  A  7004    	PUSH	HL
0B2004 DD4EFF              A  7005    	LD	C,(IX+%FFFFFFFF)
0B2007 C5                  A  7006    	PUSH	BC
0B2008 CD F8 35 0B         A  7007    	CALL	_mos_flseek
0B200C C1                  A  7008    	POP	BC
0B200D C1                  A  7009    	POP	BC
0B200E C1                  A  7010    	POP	BC
0B200F DD27FA              A  7011    	LD	HL,(IX+%FFFFFFFA)
0B2012 2B                  A  7012    	DEC	HL
0B2013 DD75FA              A  7013    	LD	(IX+%FFFFFFFA),L
0B2016 DD74FB              A  7014    	LD	(IX+%FFFFFFFB),H
                           A  7015    ;  606	
                           A  7016    ;  607				}		
0B2019                     A  7017    L_167:
                           A  7018    .LINE 607
                           A  7019    
0B2019 49010000            A  7020    	LD.LIS	BC,0
0B201D DD27FA              A  7021    	LD	HL,(IX+%FFFFFFFA)
0B2020 B7                  A  7022    	OR	A,A
0B2021 40ED42              A  7023    	SBC.SIS	HL,BC
0B2024 F2 2E 20 0B         A  7024    	JP	P,L__137
0B2028 EA 54 1F 0B         A  7025    	JP	PE,L_165
0B202C 18 04               A  7026    	JR	L__138
0B202E                     A  7027    L__137:
0B202E E2 54 1F 0B         A  7028    	JP	PO,L_165
0B2032                     A  7029    L__138:
                           A  7030    ;  608				free(src);
                           A  7031    .LINE 608
                           A  7032    
0B2032 DD07E6              A  7033    	LD	BC,(IX+%FFFFFFE6)
0B2035 C5                  A  7034    	PUSH	BC
0B2036 CD 42 36 0B         A  7035    	CALL	_free
0B203A C1                  A  7036    	POP	BC
                           A  7037    ;  609			
                           A  7038    ;  610			}
                           A  7039    ;  611		}
0B203B                     A  7040    L_175:
                           A  7041    .LINE 611
                           A  7042    
                           A  7043    ;  612		
                           A  7044    ;  613		assign_buffer_to_bitmap(slot,1,bmp.
                           A  7045    .LINE 613
                           A  7046    
0B203B 21A5FBFF            A  7047    	LD	HL,-1115
0B203F DDE5C1              A  7048    	LD	BC,IX
0B2042 09                  A  7049    	ADD	HL,BC
0B2043 ED07                A  7050    	LD	BC,(HL)
0B2045 C5                  A  7051    	PUSH	BC
0B2046 21A3FBFF            A  7052    	LD	HL,-1117
0B204A DDE5C1              A  7053    	LD	BC,IX
0B204D 09                  A  7054    	ADD	HL,BC
0B204E ED07                A  7055    	LD	BC,(HL)
0B2050 C5                  A  7056    	PUSH	BC
0B2051 01010000            A  7057    	LD	BC,1
0B2055 C5                  A  7058    	PUSH	BC
0B2056 DD4E0C              A  7059    	LD	C,(IX+%C)
0B2059 0600                A  7060    	LD	B,%0
0B205B C5                  A  7061    	PUSH	BC
0B205C CD 3B 06 0B         A  7062    	CALL	_assign_buffer_to_bitmap
0B2060 C1                  A  7063    	POP	BC
0B2061 C1                  A  7064    	POP	BC
0B2062 C1                  A  7065    	POP	BC
0B2063 C1                  A  7066    	POP	BC
                           A  7067    ;  614		free(row_rgba2222);
                           A  7068    .LINE 614
                           A  7069    
0B2064 DD07F7              A  7070    	LD	BC,(IX+%FFFFFFF7)
0B2067 C5                  A  7071    	PUSH	BC
0B2068 CD 42 36 0B         A  7072    	CALL	_free
0B206C C1                  A  7073    	POP	BC
                           A  7074    ;  615		
                           A  7075    ;  616		mos_fclose(file);
                           A  7076    .LINE 616
                           A  7077    
0B206D DD4EFF              A  7078    	LD	C,(IX+%FFFFFFFF)
0B2070 0600                A  7079    	LD	B,%0
0B2072 C5                  A  7080    	PUSH	BC
0B2073 CD A9 34 0B         A  7081    	CALL	_mos_fclose
0B2077 C1                  A  7082    	POP	BC
                           A  7083    ;  617		return bmp;
                           A  7084    .LINE 617
                           A  7085    
0B2078 ED2206              A  7086    	LEA	HL,IX+%6
0B207B ED17                A  7087    	LD	DE,(HL)
0B207D DDE5E1              A  7088    	LD	HL,IX
0B2080 01A3FBFF            A  7089    	LD	BC,-1117
0B2084 09                  A  7090    	ADD	HL,BC
0B2085 01310400            A  7091    	LD	BC,1073
0B2089 EDB0                A  7092    	LDIR	
0B208B DD2706              A  7093    	LD	HL,(IX+%6)
                           A  7094    ;  618		
                           A  7095    ;  619	}
0B208E                     A  7096    L_176:
                           A  7097    .LINE 619
                           A  7098    
0B208E DDF9                A  7099    	LD	SP,IX
0B2090 DDE1                A  7100    	POP	IX
0B2092 C9                  A  7101    	RET	
                           A  7102    
                           A  7103    
                           A  7104    ;**************************** _load_bmp_clean *
                           A  7105    ;Name                         Addr/Register   S
                           A  7106    ;_mos_fclose                         IMPORT  --
                           A  7107    ;_mos_fgetc                          IMPORT  --
                           A  7108    ;_free                               IMPORT  --
                           A  7109    ;_mos_flseek                         IMPORT  --
                           A  7110    ;_malloc                             IMPORT  --
                           A  7111    ;_mos_fread                          IMPORT  --
                           A  7112    ;___print_sendstring                 IMPORT  --
                           A  7113    ;___print_xputch                     IMPORT    
                           A  7114    ;___print_uputch                     IMPORT  --
                           A  7115    ;_mos_getfil                         IMPORT  --
                           A  7116    ;_mos_fopen                          IMPORT  --
                           A  7117    ;_memset                             IMPORT  --
                           A  7118    ;bmp                                IX-1117   1
                           A  7119    ;initial_header                       IX-44    
                           A  7120    ;src                                  IX-26    
                           A  7121    ;r                                    IX-23    
                           A  7122    ;g                                    IX-22    
                           A  7123    ;b                                    IX-21    
                           A  7124    ;index                                IX-20    
                           A  7125    ;src                                  IX-19    
                           A  7126    ;fo                                   IX-16    
                           A  7127    ;y                                    IX-13    
                           A  7128    ;x                                    IX-11    
                           A  7129    ;row_rgba2222                          IX-9    
                           A  7130    ;y                                     IX-6    
                           A  7131    ;main_header                           IX-4    
                           A  7132    ;file                                  IX-1    
                           A  7133    ;slot                                 IX+12    
                           A  7134    ;filename                              IX+9    
                           A  7135    
                           A  7136    
                           A  7137    ; Stack Frame Size: 1150 (bytes)
                           A  7138    ;       Spill Code: -3 (instruction)
                           A  7139    
                           A  7140    
                           A  7141    .ENDFUNC "load_bmp_clean",619,"_load_bmp_clean"
                           A  7142    	SEGMENT STRSECT
0B45BD                     A  7143    L__110:
0B45BD 4572726F 723A2063   A  7144    	DB	"Error: could not open "
0B45C5 6F756C64 206E6F74 
0B45CD 206F7065 6E20 
0B45D3 00                  A  7145    	DB	0
0B45D4                     A  7146    L__111:
0B45D4 2E                  A  7147    	DB	"."
0B45D5 0D0A00              A  7148    	DB	13,10,0
0B45D8                     A  7149    L__117:
0B45D8 4E6F6E20 7374616E   A  7150    	DB	"Non standard BMP compression, exiting.
0B45E0 64617264 20424D50 
0B45E8 20636F6D 70726573 
0B45F0 73696F6E 2C206578 
0B45F8 6974696E 672E 
0B45FE 0D0A00              A  7151    	DB	13,10,0
0B4601                     A  7152    L__122:
0B4601 31362D62 69742042   A  7153    	DB	"16-bit BMP files not supported, use 8-
0B4609 4D502066 696C6573 
0B4611 206E6F74 20737570 
0B4619 706F7274 65642C20 
0B4621 75736520 382D6269 
0B4629 74202873 6D616C6C 
0B4631 292C2032 342D6269 
0B4639 74202866 61737429 
0B4641 206F7220 33322D62 
0B4649 69742028 616C7068 
0B4651 612D656E 61626C65 
0B4659 64292E 
0B465C 0D0A00              A  7154    	DB	13,10,0
0B465F                     A  7155    L__127:
0B465F 31362D62 69742042   A  7156    	DB	"16-bit BMP files not supported, use 8-
0B4667 4D502066 696C6573 
0B466F 206E6F74 20737570 
0B4677 706F7274 65642C20 
0B467F 75736520 382D6269 
0B4687 74202873 6D616C6C 
0B468F 292C2032 342D6269 
0B4697 74202866 61737429 
0B469F 206F7220 33322D62 
0B46A7 69742028 616C7068 
0B46AF 612D656E 61626C65 
0B46B7 64292E 
0B46BA 0D0A00              A  7157    	DB	13,10,0
                           A  7158    	SEGMENT CODE
                           A  7159    ;  620	
                           A  7160    ;  621	uint16_t strtou16(const char *str) {
0B2093                     A  7161    _strtou16:
                           A  7162    .DEFINE "_strtou16"
                           A  7163    
                           A  7164    .VALUE _strtou16
                           A  7165    
                           A  7166    .CLASS 2
                           A  7167    
                           A  7168    .TYPE 77
                           A  7169    
                           A  7170    .ENDEF
                           A  7171    
                           A  7172    .BEGFUNC "strtou16",621,"_strtou16"
                           A  7173    
                           A  7174    .LINE 621
                           A  7175    
                           A  7176    .DEFINE "str"
                           A  7177    
                           A  7178    .CLASS 65
                           A  7179    
                           A  7180    .VALUE 6
                           A  7181    
                           A  7182    .TYPE 194
                           A  7183    
                           A  7184    .ENDEF
                           A  7185    
                           A  7186    .DEFINE "result"
                           A  7187    
                           A  7188    .CLASS 65
                           A  7189    
                           A  7190    .VALUE -2
                           A  7191    
                           A  7192    .TYPE 13
                           A  7193    
                           A  7194    .ENDEF
                           A  7195    
                           A  7196    .DEFINE "digit"
                           A  7197    
                           A  7198    .CLASS 65
                           A  7199    
                           A  7200    .VALUE -4
                           A  7201    
                           A  7202    .TYPE 13
                           A  7203    
                           A  7204    .ENDEF
                           A  7205    
0B2093 DDE5                A  7206    	PUSH	IX
0B2095 DD210000 00         A  7207    	LD	IX,0
0B209A DD39                A  7208    	ADD	IX,SP
0B209C C5                  A  7209    	PUSH	BC
0B209D 3B                  A  7210    	DEC	SP
                           A  7211    ;  622	    uint16_t result = 0;
                           A  7212    .LINE 622
                           A  7213    
0B209E DD36FE00            A  7214    	LD	(IX+%FFFFFFFE),%0
0B20A2 DD36FF00            A  7215    	LD	(IX+%FFFFFFFF),%0
                           A  7216    ;  623	    const uint16_t maxDiv10 = 6553;  //
                           A  7217    ;  624	    const uint16_t maxMod10 = 5;     //
                           A  7218    ;  625	
                           A  7219    ;  626	    while (*str == ' ' || *str == '\t' 
                           A  7220    .LINE 626
                           A  7221    
0B20A6 18 07               A  7222    	JR	L_180
0B20A8                     A  7223    L_181:
                           A  7224    ;  627	        str++;
                           A  7225    .LINE 627
                           A  7226    
0B20A8 DD0706              A  7227    	LD	BC,(IX+%6)
0B20AB 03                  A  7228    	INC	BC
0B20AC DD0F06              A  7229    	LD	(IX+%6),BC
                           A  7230    ;  628	    }
0B20AF                     A  7231    L_180:
                           A  7232    .LINE 628
                           A  7233    
0B20AF DD2706              A  7234    	LD	HL,(IX+%6)
0B20B2 7E                  A  7235    	LD	A,(HL)
0B20B3 47                  A  7236    	LD	B,A
0B20B4 17ED62              A  7237    	SEXT	HL
0B20B7 68                  A  7238    	LD	L,B
0B20B8 01200000            A  7239    	LD	BC,32
0B20BC B7                  A  7240    	OR	A,A
0B20BD ED42                A  7241    	SBC	HL,BC
0B20BF 28 E7               A  7242    	JR	Z,L_181
0B20C1 DD2706              A  7243    	LD	HL,(IX+%6)
0B20C4 7E                  A  7244    	LD	A,(HL)
0B20C5 47                  A  7245    	LD	B,A
0B20C6 17ED62              A  7246    	SEXT	HL
0B20C9 68                  A  7247    	LD	L,B
0B20CA 01090000            A  7248    	LD	BC,9
0B20CE B7                  A  7249    	OR	A,A
0B20CF ED42                A  7250    	SBC	HL,BC
0B20D1 28 D5               A  7251    	JR	Z,L_181
0B20D3 DD2706              A  7252    	LD	HL,(IX+%6)
0B20D6 7E                  A  7253    	LD	A,(HL)
0B20D7 47                  A  7254    	LD	B,A
0B20D8 17ED62              A  7255    	SEXT	HL
0B20DB 68                  A  7256    	LD	L,B
0B20DC 010A0000            A  7257    	LD	BC,10
0B20E0 B7                  A  7258    	OR	A,A
0B20E1 ED42                A  7259    	SBC	HL,BC
0B20E3 28 C3               A  7260    	JR	Z,L_181
                           A  7261    ;  629	
                           A  7262    ;  630	    while (*str >= '0' && *str <= '9') 
                           A  7263    .LINE 630
                           A  7264    
0B20E5 18 5F               A  7265    	JR	L_188
0B20E7                     A  7266    L_189:
                           A  7267    ;  631	        uint16_t digit = *str - '0';
                           A  7268    .LINE 631
                           A  7269    
0B20E7 DD2706              A  7270    	LD	HL,(IX+%6)
0B20EA 7E                  A  7271    	LD	A,(HL)
0B20EB 47                  A  7272    	LD	B,A
0B20EC 17ED62              A  7273    	SEXT	HL
0B20EF 68                  A  7274    	LD	L,B
0B20F0 E5FDE1              A  7275    	LD	IY,HL
0B20F3 ED23D0              A  7276    	LEA	HL,IY+%FFFFFFD0
0B20F6 DD75FC              A  7277    	LD	(IX+%FFFFFFFC),L
0B20F9 DD74FD              A  7278    	LD	(IX+%FFFFFFFD),H
                           A  7279    ;  632	        if (result > maxDiv10 || (resul
                           A  7280    .LINE 632
                           A  7281    
0B20FC DD07FE              A  7282    	LD	BC,(IX+%FFFFFFFE)
0B20FF 49219919            A  7283    	LD.LIS	HL,6553
0B2103 B7                  A  7284    	OR	A,A
0B2104 40ED42              A  7285    	SBC.SIS	HL,BC
0B2107 38 1A               A  7286    	JR	C,L_185
0B2109 49019919            A  7287    	LD.LIS	BC,6553
0B210D DD27FE              A  7288    	LD	HL,(IX+%FFFFFFFE)
0B2110 B7                  A  7289    	OR	A,A
0B2111 40ED42              A  7290    	SBC.SIS	HL,BC
0B2114 20 13               A  7291    	JR	NZ,L_186
0B2116 DD07FC              A  7292    	LD	BC,(IX+%FFFFFFFC)
0B2119 49210500            A  7293    	LD.LIS	HL,5
0B211D B7                  A  7294    	OR	A,A
0B211E 40ED42              A  7295    	SBC.SIS	HL,BC
0B2121 30 06               A  7296    	JR	NC,L_186
0B2123                     A  7297    L_185:
                           A  7298    ;  633	            return 65535;
                           A  7299    .LINE 633
                           A  7300    
0B2123 4921FFFF            A  7301    	LD.LIS	HL,65535
0B2127 18 5E               A  7302    	JR	L_192
                           A  7303    ;  634	        }
0B2129                     A  7304    L_186:
                           A  7305    .LINE 634
                           A  7306    
                           A  7307    ;  635	        result = result * 10 + digit;
                           A  7308    .LINE 635
                           A  7309    
0B2129 49210A00            A  7310    	LD.LIS	HL,10
0B212D DD07FE              A  7311    	LD	BC,(IX+%FFFFFFFE)
0B2130 CD 7E 43 0B         A  7312    	CALL	__smulu
0B2134 DD07FC              A  7313    	LD	BC,(IX+%FFFFFFFC)
0B2137 4009                A  7314    	ADD.SIS	HL,BC
0B2139 DD75FE              A  7315    	LD	(IX+%FFFFFFFE),L
0B213C DD74FF              A  7316    	LD	(IX+%FFFFFFFF),H
                           A  7317    ;  636	        str++;
                           A  7318    .LINE 636
                           A  7319    
0B213F DD0706              A  7320    	LD	BC,(IX+%6)
0B2142 03                  A  7321    	INC	BC
0B2143 DD0F06              A  7322    	LD	(IX+%6),BC
                           A  7323    ;  637	    }
0B2146                     A  7324    L_188:
                           A  7325    .LINE 637
                           A  7326    
0B2146 DD2706              A  7327    	LD	HL,(IX+%6)
0B2149 7E                  A  7328    	LD	A,(HL)
0B214A 47                  A  7329    	LD	B,A
0B214B 17ED62              A  7330    	SEXT	HL
0B214E 68                  A  7331    	LD	L,B
0B214F 01300000            A  7332    	LD	BC,48
0B2153 B7                  A  7333    	OR	A,A
0B2154 ED42                A  7334    	SBC	HL,BC
0B2156 FA 60 21 0B         A  7335    	JP	M,L__148
0B215A EA 84 21 0B         A  7336    	JP	PE,L_191
0B215E 18 04               A  7337    	JR	L__149
0B2160                     A  7338    L__148:
0B2160 E2 84 21 0B         A  7339    	JP	PO,L_191
0B2164                     A  7340    L__149:
0B2164 DD2706              A  7341    	LD	HL,(IX+%6)
0B2167 7E                  A  7342    	LD	A,(HL)
0B2168 47                  A  7343    	LD	B,A
0B2169 17ED62              A  7344    	SEXT	HL
0B216C 68                  A  7345    	LD	L,B
0B216D E5C1                A  7346    	LD	BC,HL
0B216F 21390000            A  7347    	LD	HL,57
0B2173 B7                  A  7348    	OR	A,A
0B2174 ED42                A  7349    	SBC	HL,BC
0B2176 F2 80 21 0B         A  7350    	JP	P,L__150
0B217A EA E7 20 0B         A  7351    	JP	PE,L_189
0B217E 18 04               A  7352    	JR	L__151
0B2180                     A  7353    L__150:
0B2180 E2 E7 20 0B         A  7354    	JP	PO,L_189
0B2184                     A  7355    L__151:
0B2184                     A  7356    L_191:
                           A  7357    ;  638	
                           A  7358    ;  639	    return result;
                           A  7359    .LINE 639
                           A  7360    
0B2184 DD27FE              A  7361    	LD	HL,(IX+%FFFFFFFE)
                           A  7362    ;  640	}
0B2187                     A  7363    L_192:
                           A  7364    .LINE 640
                           A  7365    
0B2187 DDF9                A  7366    	LD	SP,IX
0B2189 DDE1                A  7367    	POP	IX
0B218B C9                  A  7368    	RET	
                           A  7369    
                           A  7370    
                           A  7371    ;**************************** _strtou16 *******
                           A  7372    ;Name                         Addr/Register   S
                           A  7373    ;digit                                 IX-4    
                           A  7374    ;result                                IX-2    
                           A  7375    ;str                                   IX+6    
                           A  7376    
                           A  7377    
                           A  7378    ; Stack Frame Size: 13 (bytes)
                           A  7379    ;       Spill Code: -3 (instruction)
                           A  7380    
                           A  7381    
                           A  7382    .ENDFUNC "strtou16",640,"_strtou16"
                           A  7383    ;  641	
                           A  7384    ;  642	uint8_t strtou8(const char *str) {
0B218C                     A  7385    _strtou8:
                           A  7386    .DEFINE "_strtou8"
                           A  7387    
                           A  7388    .VALUE _strtou8
                           A  7389    
                           A  7390    .CLASS 2
                           A  7391    
                           A  7392    .TYPE 76
                           A  7393    
                           A  7394    .ENDEF
                           A  7395    
                           A  7396    .BEGFUNC "strtou8",642,"_strtou8"
                           A  7397    
                           A  7398    .LINE 642
                           A  7399    
                           A  7400    .DEFINE "str"
                           A  7401    
                           A  7402    .CLASS 65
                           A  7403    
                           A  7404    .VALUE 6
                           A  7405    
                           A  7406    .TYPE 194
                           A  7407    
                           A  7408    .ENDEF
                           A  7409    
                           A  7410    .DEFINE "result"
                           A  7411    
                           A  7412    .CLASS 65
                           A  7413    
                           A  7414    .VALUE -1
                           A  7415    
                           A  7416    .TYPE 12
                           A  7417    
                           A  7418    .ENDEF
                           A  7419    
                           A  7420    .DEFINE "digit"
                           A  7421    
                           A  7422    .CLASS 65
                           A  7423    
                           A  7424    .VALUE -2
                           A  7425    
                           A  7426    .TYPE 12
                           A  7427    
                           A  7428    .ENDEF
                           A  7429    
0B218C DDE5                A  7430    	PUSH	IX
0B218E DD210000 00         A  7431    	LD	IX,0
0B2193 DD39                A  7432    	ADD	IX,SP
0B2195 3B                  A  7433    	DEC	SP
0B2196 3B                  A  7434    	DEC	SP
                           A  7435    ;  643	    uint8_t result = 0;
                           A  7436    .LINE 643
                           A  7437    
0B2197 DD36FF00            A  7438    	LD	(IX+%FFFFFFFF),%0
                           A  7439    ;  644	    const uint8_t maxDiv10 = 255 / 10;
                           A  7440    ;  645	    const uint8_t maxMod10 = 255 % 10;
                           A  7441    ;  646	
                           A  7442    ;  647	    while (*str == ' ' || *str == '\t' 
                           A  7443    .LINE 647
                           A  7444    
0B219B 18 07               A  7445    	JR	L_196
0B219D                     A  7446    L_197:
                           A  7447    ;  648	        str++;
                           A  7448    .LINE 648
                           A  7449    
0B219D DD0706              A  7450    	LD	BC,(IX+%6)
0B21A0 03                  A  7451    	INC	BC
0B21A1 DD0F06              A  7452    	LD	(IX+%6),BC
                           A  7453    ;  649	    }
0B21A4                     A  7454    L_196:
                           A  7455    .LINE 649
                           A  7456    
0B21A4 DD2706              A  7457    	LD	HL,(IX+%6)
0B21A7 7E                  A  7458    	LD	A,(HL)
0B21A8 47                  A  7459    	LD	B,A
0B21A9 17ED62              A  7460    	SEXT	HL
0B21AC 68                  A  7461    	LD	L,B
0B21AD 01200000            A  7462    	LD	BC,32
0B21B1 B7                  A  7463    	OR	A,A
0B21B2 ED42                A  7464    	SBC	HL,BC
0B21B4 28 E7               A  7465    	JR	Z,L_197
0B21B6 DD2706              A  7466    	LD	HL,(IX+%6)
0B21B9 7E                  A  7467    	LD	A,(HL)
0B21BA 47                  A  7468    	LD	B,A
0B21BB 17ED62              A  7469    	SEXT	HL
0B21BE 68                  A  7470    	LD	L,B
0B21BF 01090000            A  7471    	LD	BC,9
0B21C3 B7                  A  7472    	OR	A,A
0B21C4 ED42                A  7473    	SBC	HL,BC
0B21C6 28 D5               A  7474    	JR	Z,L_197
0B21C8 DD2706              A  7475    	LD	HL,(IX+%6)
0B21CB 7E                  A  7476    	LD	A,(HL)
0B21CC 47                  A  7477    	LD	B,A
0B21CD 17ED62              A  7478    	SEXT	HL
0B21D0 68                  A  7479    	LD	L,B
0B21D1 010A0000            A  7480    	LD	BC,10
0B21D5 B7                  A  7481    	OR	A,A
0B21D6 ED42                A  7482    	SBC	HL,BC
0B21D8 28 C3               A  7483    	JR	Z,L_197
                           A  7484    ;  650	
                           A  7485    ;  651	    while (*str >= '0' && *str <= '9') 
                           A  7486    .LINE 651
                           A  7487    
0B21DA 18 37               A  7488    	JR	L_204
0B21DC                     A  7489    L_205:
                           A  7490    ;  652	        uint8_t digit = *str - '0';
                           A  7491    .LINE 652
                           A  7492    
0B21DC DD2706              A  7493    	LD	HL,(IX+%6)
0B21DF 7E                  A  7494    	LD	A,(HL)
0B21E0 D630                A  7495    	SUB	A,%30
0B21E2 DD77FE              A  7496    	LD	(IX+%FFFFFFFE),A
                           A  7497    ;  653	        if (result > maxDiv10 || (resul
                           A  7498    .LINE 653
                           A  7499    
0B21E5 3E19                A  7500    	LD	A,%19
0B21E7 DDBEFF              A  7501    	CP	A,(IX+%FFFFFFFF)
0B21EA 38 0E               A  7502    	JR	C,L_201
0B21EC DD7EFF              A  7503    	LD	A,(IX+%FFFFFFFF)
0B21EF FE19                A  7504    	CP	A,%19
0B21F1 20 0B               A  7505    	JR	NZ,L_202
0B21F3 3E05                A  7506    	LD	A,%5
0B21F5 DDBEFE              A  7507    	CP	A,(IX+%FFFFFFFE)
0B21F8 30 04               A  7508    	JR	NC,L_202
0B21FA                     A  7509    L_201:
                           A  7510    ;  654	            return 255;
                           A  7511    .LINE 654
                           A  7512    
0B21FA 3EFF                A  7513    	LD	A,%FF
0B21FC 18 56               A  7514    	JR	L_208
                           A  7515    ;  655	        }
0B21FE                     A  7516    L_202:
                           A  7517    .LINE 655
                           A  7518    
                           A  7519    ;  656	        result = result * 10 + digit;
                           A  7520    .LINE 656
                           A  7521    
0B21FE 060A                A  7522    	LD	B,%A
0B2200 DD4EFF              A  7523    	LD	C,(IX+%FFFFFFFF)
0B2203 ED4C                A  7524    	MLT	BC
0B2205 79                  A  7525    	LD	A,C
0B2206 DD86FE              A  7526    	ADD	A,(IX+%FFFFFFFE)
0B2209 DD77FF              A  7527    	LD	(IX+%FFFFFFFF),A
                           A  7528    ;  657	        str++;
                           A  7529    .LINE 657
                           A  7530    
0B220C DD0706              A  7531    	LD	BC,(IX+%6)
0B220F 03                  A  7532    	INC	BC
0B2210 DD0F06              A  7533    	LD	(IX+%6),BC
                           A  7534    ;  658	    }
0B2213                     A  7535    L_204:
                           A  7536    .LINE 658
                           A  7537    
0B2213 DD2706              A  7538    	LD	HL,(IX+%6)
0B2216 7E                  A  7539    	LD	A,(HL)
0B2217 47                  A  7540    	LD	B,A
0B2218 17ED62              A  7541    	SEXT	HL
0B221B 68                  A  7542    	LD	L,B
0B221C 01300000            A  7543    	LD	BC,48
0B2220 B7                  A  7544    	OR	A,A
0B2221 ED42                A  7545    	SBC	HL,BC
0B2223 FA 2D 22 0B         A  7546    	JP	M,L__161
0B2227 EA 51 22 0B         A  7547    	JP	PE,L_207
0B222B 18 04               A  7548    	JR	L__162
0B222D                     A  7549    L__161:
0B222D E2 51 22 0B         A  7550    	JP	PO,L_207
0B2231                     A  7551    L__162:
0B2231 DD2706              A  7552    	LD	HL,(IX+%6)
0B2234 7E                  A  7553    	LD	A,(HL)
0B2235 47                  A  7554    	LD	B,A
0B2236 17ED62              A  7555    	SEXT	HL
0B2239 68                  A  7556    	LD	L,B
0B223A E5C1                A  7557    	LD	BC,HL
0B223C 21390000            A  7558    	LD	HL,57
0B2240 B7                  A  7559    	OR	A,A
0B2241 ED42                A  7560    	SBC	HL,BC
0B2243 F2 4D 22 0B         A  7561    	JP	P,L__163
0B2247 EA DC 21 0B         A  7562    	JP	PE,L_205
0B224B 18 04               A  7563    	JR	L__164
0B224D                     A  7564    L__163:
0B224D E2 DC 21 0B         A  7565    	JP	PO,L_205
0B2251                     A  7566    L__164:
0B2251                     A  7567    L_207:
                           A  7568    ;  659	
                           A  7569    ;  660	    return result;
                           A  7570    .LINE 660
                           A  7571    
0B2251 DD7EFF              A  7572    	LD	A,(IX+%FFFFFFFF)
                           A  7573    ;  661	}
0B2254                     A  7574    L_208:
                           A  7575    .LINE 661
                           A  7576    
0B2254 DDF9                A  7577    	LD	SP,IX
0B2256 DDE1                A  7578    	POP	IX
0B2258 C9                  A  7579    	RET	
                           A  7580    
                           A  7581    
                           A  7582    ;**************************** _strtou8 ********
                           A  7583    ;Name                         Addr/Register   S
                           A  7584    ;digit                                 IX-2    
                           A  7585    ;result                                IX-1    
                           A  7586    ;str                                   IX+6    
                           A  7587    
                           A  7588    
                           A  7589    ; Stack Frame Size: 11 (bytes)
                           A  7590    ;       Spill Code: -3 (instruction)
                           A  7591    
                           A  7592    
                           A  7593    .ENDFUNC "strtou8",661,"_strtou8"
                           A  7594    ;  662	
                           A  7595    ;  663	uint24_t strtou24(const char *str) {
0B2259                     A  7596    _strtou24:
                           A  7597    .DEFINE "_strtou24"
                           A  7598    
                           A  7599    .VALUE _strtou24
                           A  7600    
                           A  7601    .CLASS 2
                           A  7602    
                           A  7603    .TYPE 78
                           A  7604    
                           A  7605    .ENDEF
                           A  7606    
                           A  7607    .BEGFUNC "strtou24",663,"_strtou24"
                           A  7608    
                           A  7609    .LINE 663
                           A  7610    
                           A  7611    .DEFINE "str"
                           A  7612    
                           A  7613    .CLASS 65
                           A  7614    
                           A  7615    .VALUE 6
                           A  7616    
                           A  7617    .TYPE 194
                           A  7618    
                           A  7619    .ENDEF
                           A  7620    
                           A  7621    .DEFINE "result"
                           A  7622    
                           A  7623    .CLASS 65
                           A  7624    
                           A  7625    .VALUE -4
                           A  7626    
                           A  7627    .TYPE 15
                           A  7628    
                           A  7629    .ENDEF
                           A  7630    
                           A  7631    .DEFINE "digit"
                           A  7632    
                           A  7633    .CLASS 65
                           A  7634    
                           A  7635    .VALUE -8
                           A  7636    
                           A  7637    .TYPE 15
                           A  7638    
                           A  7639    .ENDEF
                           A  7640    
0B2259 DDE5                A  7641    	PUSH	IX
0B225B DD210000 00         A  7642    	LD	IX,0
0B2260 DD39                A  7643    	ADD	IX,SP
0B2262 C5                  A  7644    	PUSH	BC
0B2263 C5                  A  7645    	PUSH	BC
0B2264 3B                  A  7646    	DEC	SP
0B2265 3B                  A  7647    	DEC	SP
                           A  7648    ;  664	    uint32_t result = 0;
                           A  7649    .LINE 664
                           A  7650    
0B2266 01000000            A  7651    	LD	BC,0
0B226A AF                  A  7652    	XOR	A,A
0B226B DD0FFC              A  7653    	LD	(IX+%FFFFFFFC),BC
0B226E DD77FF              A  7654    	LD	(IX+%FFFFFFFF),A
                           A  7655    ;  665	    const uint32_t maxDiv10 = 1677721;
                           A  7656    ;  666	    const uint32_t maxMod10 = 5;
                           A  7657    ;  667	
                           A  7658    ;  668	    while (*str == ' ' || *str == '\t' 
                           A  7659    .LINE 668
                           A  7660    
0B2271 18 07               A  7661    	JR	L_212
0B2273                     A  7662    L_213:
                           A  7663    ;  669	        str++;
                           A  7664    .LINE 669
                           A  7665    
0B2273 DD0706              A  7666    	LD	BC,(IX+%6)
0B2276 03                  A  7667    	INC	BC
0B2277 DD0F06              A  7668    	LD	(IX+%6),BC
                           A  7669    ;  670	    }
0B227A                     A  7670    L_212:
                           A  7671    .LINE 670
                           A  7672    
0B227A DD2706              A  7673    	LD	HL,(IX+%6)
0B227D 7E                  A  7674    	LD	A,(HL)
0B227E 47                  A  7675    	LD	B,A
0B227F 17ED62              A  7676    	SEXT	HL
0B2282 68                  A  7677    	LD	L,B
0B2283 01200000            A  7678    	LD	BC,32
0B2287 B7                  A  7679    	OR	A,A
0B2288 ED42                A  7680    	SBC	HL,BC
0B228A 28 E7               A  7681    	JR	Z,L_213
0B228C DD2706              A  7682    	LD	HL,(IX+%6)
0B228F 7E                  A  7683    	LD	A,(HL)
0B2290 47                  A  7684    	LD	B,A
0B2291 17ED62              A  7685    	SEXT	HL
0B2294 68                  A  7686    	LD	L,B
0B2295 01090000            A  7687    	LD	BC,9
0B2299 B7                  A  7688    	OR	A,A
0B229A ED42                A  7689    	SBC	HL,BC
0B229C 28 D5               A  7690    	JR	Z,L_213
0B229E DD2706              A  7691    	LD	HL,(IX+%6)
0B22A1 7E                  A  7692    	LD	A,(HL)
0B22A2 47                  A  7693    	LD	B,A
0B22A3 17ED62              A  7694    	SEXT	HL
0B22A6 68                  A  7695    	LD	L,B
0B22A7 010A0000            A  7696    	LD	BC,10
0B22AB B7                  A  7697    	OR	A,A
0B22AC ED42                A  7698    	SBC	HL,BC
0B22AE 28 C3               A  7699    	JR	Z,L_213
                           A  7700    ;  671		
                           A  7701    ;  672	    while (*str >= '0' && *str <= '9') 
                           A  7702    .LINE 672
                           A  7703    
0B22B0 18 7A               A  7704    	JR	L_220
0B22B2                     A  7705    L_221:
                           A  7706    ;  673	        uint32_t digit = *str - '0';
                           A  7707    .LINE 673
                           A  7708    
0B22B2 DD2706              A  7709    	LD	HL,(IX+%6)
0B22B5 7E                  A  7710    	LD	A,(HL)
0B22B6 47                  A  7711    	LD	B,A
0B22B7 17ED62              A  7712    	SEXT	HL
0B22BA 68                  A  7713    	LD	L,B
0B22BB 5C                  A  7714    	LD	E,H
0B22BC 01300000            A  7715    	LD	BC,48
0B22C0 AF                  A  7716    	XOR	A,A
0B22C1 CD 13 3E 0B         A  7717    	CALL	__lsub
0B22C5 DD2FF8              A  7718    	LD	(IX+%FFFFFFF8),HL
0B22C8 DD73FB              A  7719    	LD	(IX+%FFFFFFFB),E
                           A  7720    ;  674	        if (result > maxDiv10 || (resul
                           A  7721    .LINE 674
                           A  7722    
0B22CB 21999919            A  7723    	LD	HL,1677721
0B22CF 1E00                A  7724    	LD	E,%0
0B22D1 DD07FC              A  7725    	LD	BC,(IX+%FFFFFFFC)
0B22D4 DD7EFF              A  7726    	LD	A,(IX+%FFFFFFFF)
0B22D7 CD 6A 41 0B         A  7727    	CALL	__lcmpu
0B22DB 38 23               A  7728    	JR	C,L_217
0B22DD DD27FC              A  7729    	LD	HL,(IX+%FFFFFFFC)
0B22E0 DD5EFF              A  7730    	LD	E,(IX+%FFFFFFFF)
0B22E3 01999919            A  7731    	LD	BC,1677721
0B22E7 AF                  A  7732    	XOR	A,A
0B22E8 CD 6A 41 0B         A  7733    	CALL	__lcmpu
0B22EC 20 18               A  7734    	JR	NZ,L_218
0B22EE 21050000            A  7735    	LD	HL,5
0B22F2 1E00                A  7736    	LD	E,%0
0B22F4 DD07F8              A  7737    	LD	BC,(IX+%FFFFFFF8)
0B22F7 DD7EFB              A  7738    	LD	A,(IX+%FFFFFFFB)
0B22FA CD 6A 41 0B         A  7739    	CALL	__lcmpu
0B22FE 30 06               A  7740    	JR	NC,L_218
0B2300                     A  7741    L_217:
                           A  7742    ;  675	            return 16777215;
                           A  7743    .LINE 675
                           A  7744    
0B2300 21FFFFFF            A  7745    	LD	HL,16777215
0B2304 18 67               A  7746    	JR	L_224
                           A  7747    ;  676	        }
0B2306                     A  7748    L_218:
                           A  7749    .LINE 676
                           A  7750    
                           A  7751    ;  677	        result = result * 10 + digit;
                           A  7752    .LINE 677
                           A  7753    
0B2306 DD27FC              A  7754    	LD	HL,(IX+%FFFFFFFC)
0B2309 DD5EFF              A  7755    	LD	E,(IX+%FFFFFFFF)
0B230C 010A0000            A  7756    	LD	BC,10
0B2310 AF                  A  7757    	XOR	A,A
0B2311 CD 93 43 0B         A  7758    	CALL	__lmulu
0B2315 DD07F8              A  7759    	LD	BC,(IX+%FFFFFFF8)
0B2318 DD7EFB              A  7760    	LD	A,(IX+%FFFFFFFB)
0B231B CD 3C 36 0B         A  7761    	CALL	__ladd
0B231F DD2FFC              A  7762    	LD	(IX+%FFFFFFFC),HL
0B2322 DD73FF              A  7763    	LD	(IX+%FFFFFFFF),E
                           A  7764    ;  678	        str++;
                           A  7765    .LINE 678
                           A  7766    
0B2325 DD0706              A  7767    	LD	BC,(IX+%6)
0B2328 03                  A  7768    	INC	BC
0B2329 DD0F06              A  7769    	LD	(IX+%6),BC
                           A  7770    ;  679	    }
0B232C                     A  7771    L_220:
                           A  7772    .LINE 679
                           A  7773    
0B232C DD2706              A  7774    	LD	HL,(IX+%6)
0B232F 7E                  A  7775    	LD	A,(HL)
0B2330 47                  A  7776    	LD	B,A
0B2331 17ED62              A  7777    	SEXT	HL
0B2334 68                  A  7778    	LD	L,B
0B2335 01300000            A  7779    	LD	BC,48
0B2339 B7                  A  7780    	OR	A,A
0B233A ED42                A  7781    	SBC	HL,BC
0B233C FA 46 23 0B         A  7782    	JP	M,L__174
0B2340 EA 6A 23 0B         A  7783    	JP	PE,L_223
0B2344 18 04               A  7784    	JR	L__175
0B2346                     A  7785    L__174:
0B2346 E2 6A 23 0B         A  7786    	JP	PO,L_223
0B234A                     A  7787    L__175:
0B234A DD2706              A  7788    	LD	HL,(IX+%6)
0B234D 7E                  A  7789    	LD	A,(HL)
0B234E 47                  A  7790    	LD	B,A
0B234F 17ED62              A  7791    	SEXT	HL
0B2352 68                  A  7792    	LD	L,B
0B2353 E5C1                A  7793    	LD	BC,HL
0B2355 21390000            A  7794    	LD	HL,57
0B2359 B7                  A  7795    	OR	A,A
0B235A ED42                A  7796    	SBC	HL,BC
0B235C F2 66 23 0B         A  7797    	JP	P,L__176
0B2360 EA B2 22 0B         A  7798    	JP	PE,L_221
0B2364 18 04               A  7799    	JR	L__177
0B2366                     A  7800    L__176:
0B2366 E2 B2 22 0B         A  7801    	JP	PO,L_221
0B236A                     A  7802    L__177:
0B236A                     A  7803    L_223:
                           A  7804    ;  680	
                           A  7805    ;  681	    return result;
                           A  7806    .LINE 681
                           A  7807    
0B236A DD27FC              A  7808    	LD	HL,(IX+%FFFFFFFC)
                           A  7809    ;  682	}
0B236D                     A  7810    L_224:
                           A  7811    .LINE 682
                           A  7812    
0B236D DDF9                A  7813    	LD	SP,IX
0B236F DDE1                A  7814    	POP	IX
0B2371 C9                  A  7815    	RET	
                           A  7816    
                           A  7817    
                           A  7818    ;**************************** _strtou24 *******
                           A  7819    ;Name                         Addr/Register   S
                           A  7820    ;digit                                 IX-8    
                           A  7821    ;result                                IX-4    
                           A  7822    ;str                                   IX+6    
                           A  7823    
                           A  7824    
                           A  7825    ; Stack Frame Size: 17 (bytes)
                           A  7826    ;       Spill Code: -3 (instruction)
                           A  7827    
                           A  7828    
                           A  7829    .ENDFUNC "strtou24",682,"_strtou24"
                           A  7830    ;  683	
                           A  7831    ;  684	int main(int argc, char * argv[]) {
0B2372                     A  7832    _main:
                           A  7833    .DEFINE "_main"
                           A  7834    
                           A  7835    .VALUE _main
                           A  7836    
                           A  7837    .CLASS 2
                           A  7838    
                           A  7839    .TYPE 68
                           A  7840    
                           A  7841    .ENDEF
                           A  7842    
                           A  7843    .BEGFUNC "main",684,"_main"
                           A  7844    
                           A  7845    .LINE 684
                           A  7846    
                           A  7847    .DEFINE "argc"
                           A  7848    
                           A  7849    .CLASS 65
                           A  7850    
                           A  7851    .VALUE 6
                           A  7852    
                           A  7853    .TYPE 4
                           A  7854    
                           A  7855    .ENDEF
                           A  7856    
                           A  7857    .DEFINE "argv"
                           A  7858    
                           A  7859    .CLASS 65
                           A  7860    
                           A  7861    .VALUE 9
                           A  7862    
                           A  7863    .TYPE 290
                           A  7864    
                           A  7865    .ENDEF
                           A  7866    
                           A  7867    .DEFINE "bitmap_slot"
                           A  7868    
                           A  7869    .CLASS 65
                           A  7870    
                           A  7871    .VALUE -1
                           A  7872    
                           A  7873    .TYPE 12
                           A  7874    
                           A  7875    .ENDEF
                           A  7876    
                           A  7877    .DEFINE "x"
                           A  7878    
                           A  7879    .CLASS 65
                           A  7880    
                           A  7881    .VALUE -7
                           A  7882    
                           A  7883    .TYPE 14
                           A  7884    
                           A  7885    .ENDEF
                           A  7886    
                           A  7887    .DEFINE "y"
                           A  7888    
                           A  7889    .CLASS 65
                           A  7890    
                           A  7891    .VALUE -13
                           A  7892    
                           A  7893    .TYPE 14
                           A  7894    
                           A  7895    .ENDEF
                           A  7896    
                           A  7897    .DEFINE "bmp"
                           A  7898    
                           A  7899    .CLASS 65
                           A  7900    
                           A  7901    .VALUE -1086
                           A  7902    
                           A  7903    .TAG "NONAME6"
                           A  7904    
                           A  7905    .TYPE 8
                           A  7906    
                           A  7907    .ENDEF
                           A  7908    
0B2372 DDE5                A  7909    	PUSH	IX
0B2374 DD210000 00         A  7910    	LD	IX,0
0B2379 DD39                A  7911    	ADD	IX,SP
0B237B 21CCE6FF            A  7912    	LD	HL,-6452
0B237F 39                  A  7913    	ADD	HL,SP
0B2380 F9                  A  7914    	LD	SP,HL
                           A  7915    ;  685	
                           A  7916    ;  686	    uint24_t x, y;
                           A  7917    ;  687		uint8_t bitmap_slot = 0;
                           A  7918    .LINE 687
                           A  7919    
0B2381 DD36FF00            A  7920    	LD	(IX+%FFFFFFFF),%0
                           A  7921    ;  688		bmp_info bmp;
                           A  7922    ;  689		
                           A  7923    ;  690		//Args = 0:binary name, 1:filname, 
                           A  7924    ;  691		
                           A  7925    ;  692		if ((argc < 2) || (argc == 4) || (a
                           A  7926    .LINE 692
                           A  7927    
0B2385 01020000            A  7928    	LD	BC,2
0B2389 DD2706              A  7929    	LD	HL,(IX+%6)
0B238C B7                  A  7930    	OR	A,A
0B238D ED42                A  7931    	SBC	HL,BC
0B238F FA 99 23 0B         A  7932    	JP	M,L__192
0B2393 EA C1 23 0B         A  7933    	JP	PE,L_227
0B2397 18 04               A  7934    	JR	L__193
0B2399                     A  7935    L__192:
0B2399 E2 C1 23 0B         A  7936    	JP	PO,L_227
0B239D                     A  7937    L__193:
0B239D 01040000            A  7938    	LD	BC,4
0B23A1 DD2706              A  7939    	LD	HL,(IX+%6)
0B23A4 B7                  A  7940    	OR	A,A
0B23A5 ED42                A  7941    	SBC	HL,BC
0B23A7 28 18               A  7942    	JR	Z,L_227
0B23A9 DD0706              A  7943    	LD	BC,(IX+%6)
0B23AC 21050000            A  7944    	LD	HL,5
0B23B0 B7                  A  7945    	OR	A,A
0B23B1 ED42                A  7946    	SBC	HL,BC
0B23B3 F2 BD 23 0B         A  7947    	JP	P,L__194
0B23B7 EA F4 23 0B         A  7948    	JP	PE,L_229
0B23BB 18 04               A  7949    	JR	L__195
0B23BD                     A  7950    L__194:
0B23BD E2 F4 23 0B         A  7951    	JP	PO,L_229
0B23C1                     A  7952    L__195:
0B23C1                     A  7953    L_227:
                           A  7954    ;  693	        // printf("Usage is %s <filenam
                           A  7955    ;  694	        // return 0;
                           A  7956    ;  695			bmp = load_bmp_clean(argv[1], 0
                           A  7957    .LINE 695
                           A  7958    
0B23C1 01000000            A  7959    	LD	BC,0
0B23C5 C5                  A  7960    	PUSH	BC
0B23C6 DD3109              A  7961    	LD	IY,(IX+%9)
0B23C9 ED2303              A  7962    	LEA	HL,IY+%3
0B23CC ED07                A  7963    	LD	BC,(HL)
0B23CE C5                  A  7964    	PUSH	BC
0B23CF DDE5E1              A  7965    	LD	HL,IX
0B23D2 0191F7FF            A  7966    	LD	BC,-2159
0B23D6 09                  A  7967    	ADD	HL,BC
0B23D7 E5C1                A  7968    	LD	BC,HL
0B23D9 C5                  A  7969    	PUSH	BC
0B23DA CD 11 16 0B         A  7970    	CALL	_load_bmp_clean
0B23DE C1                  A  7971    	POP	BC
0B23DF C1                  A  7972    	POP	BC
0B23E0 C1                  A  7973    	POP	BC
0B23E1 DDE5FDE1            A  7974    	LD	IY,IX
0B23E5 01C2FBFF            A  7975    	LD	BC,-1086
0B23E9 FD09                A  7976    	ADD	IY,BC
0B23EB FDE5D1              A  7977    	LD	DE,IY
0B23EE 01310400            A  7978    	LD	BC,1073
0B23F2 EDB0                A  7979    	LDIR	
                           A  7980    ;  696	    }
0B23F4                     A  7981    L_229:
                           A  7982    .LINE 696
                           A  7983    
                           A  7984    ;  697		
                           A  7985    ;  698		if (argc > 2) bitmap_slot = strtou8
                           A  7986    .LINE 698
                           A  7987    
0B23F4 DD0706              A  7988    	LD	BC,(IX+%6)
0B23F7 21020000            A  7989    	LD	HL,2
0B23FB B7                  A  7990    	OR	A,A
0B23FC ED42                A  7991    	SBC	HL,BC
0B23FE F2 08 24 0B         A  7992    	JP	P,L__196
0B2402 EA 1D 24 0B         A  7993    	JP	PE,L_245
0B2406 18 04               A  7994    	JR	L__197
0B2408                     A  7995    L__196:
0B2408 E2 1D 24 0B         A  7996    	JP	PO,L_245
0B240C                     A  7997    L__197:
0B240C DD3109              A  7998    	LD	IY,(IX+%9)
0B240F ED2306              A  7999    	LEA	HL,IY+%6
0B2412 ED07                A  8000    	LD	BC,(HL)
0B2414 C5                  A  8001    	PUSH	BC
0B2415 CD 8C 21 0B         A  8002    	CALL	_strtou8
0B2419 C1                  A  8003    	POP	BC
0B241A DD77FF              A  8004    	LD	(IX+%FFFFFFFF),A
0B241D                     A  8005    L_245:
                           A  8006    ;  699		
                           A  8007    ;  700	    //vdp_mode(8);
                           A  8008    ;  701		
                           A  8009    ;  702		if (argc == 2) {
                           A  8010    .LINE 702
                           A  8011    
0B241D 01020000            A  8012    	LD	BC,2
0B2421 DD2706              A  8013    	LD	HL,(IX+%6)
0B2424 B7                  A  8014    	OR	A,A
0B2425 ED42                A  8015    	SBC	HL,BC
0B2427 20 37               A  8016    	JR	NZ,L_244
                           A  8017    ;  703			
                           A  8018    ;  704			bmp = load_bmp_clean(argv[1], 0
                           A  8019    .LINE 704
                           A  8020    
0B2429 01000000            A  8021    	LD	BC,0
0B242D C5                  A  8022    	PUSH	BC
0B242E DD3109              A  8023    	LD	IY,(IX+%9)
0B2431 ED2303              A  8024    	LEA	HL,IY+%3
0B2434 ED07                A  8025    	LD	BC,(HL)
0B2436 C5                  A  8026    	PUSH	BC
0B2437 DDE5E1              A  8027    	LD	HL,IX
0B243A 0160F3FF            A  8028    	LD	BC,-3232
0B243E 09                  A  8029    	ADD	HL,BC
0B243F E5C1                A  8030    	LD	BC,HL
0B2441 C5                  A  8031    	PUSH	BC
0B2442 CD 11 16 0B         A  8032    	CALL	_load_bmp_clean
0B2446 C1                  A  8033    	POP	BC
0B2447 C1                  A  8034    	POP	BC
0B2448 C1                  A  8035    	POP	BC
0B2449 DDE5FDE1            A  8036    	LD	IY,IX
0B244D 01C2FBFF            A  8037    	LD	BC,-1086
0B2451 FD09                A  8038    	ADD	IY,BC
0B2453 FDE5D1              A  8039    	LD	DE,IY
0B2456 01310400            A  8040    	LD	BC,1073
0B245A EDB0                A  8041    	LDIR	
                           A  8042    ;  705			
                           A  8043    ;  706		} else if (argc == 3) {
                           A  8044    .LINE 706
                           A  8045    
0B245C C3 6F 26 0B         A  8046    	JR	L_246
0B2460                     A  8047    L_244:
0B2460 01030000            A  8048    	LD	BC,3
0B2464 DD2706              A  8049    	LD	HL,(IX+%6)
0B2467 B7                  A  8050    	OR	A,A
0B2468 ED42                A  8051    	SBC	HL,BC
0B246A 20 73               A  8052    	JR	NZ,L_242
                           A  8053    ;  707			
                           A  8054    ;  708			if (strcmp(argv[2], "/i") == 0)
                           A  8055    .LINE 708
                           A  8056    
0B246C 01 BD 46 0B         A  8057    	LD	BC,L__185
0B2470 C5                  A  8058    	PUSH	BC
0B2471 DD3109              A  8059    	LD	IY,(IX+%9)
0B2474 ED2306              A  8060    	LEA	HL,IY+%6
0B2477 ED07                A  8061    	LD	BC,(HL)
0B2479 C5                  A  8062    	PUSH	BC
0B247A CD E6 39 0B         A  8063    	CALL	_strcmp
0B247E C1                  A  8064    	POP	BC
0B247F C1                  A  8065    	POP	BC
0B2480 01000000            A  8066    	LD	BC,0
0B2484 B7                  A  8067    	OR	A,A
0B2485 ED42                A  8068    	SBC	HL,BC
0B2487 20 1E               A  8069    	JR	NZ,L_231
0B2489 DD3109              A  8070    	LD	IY,(IX+%9)
0B248C ED2303              A  8071    	LEA	HL,IY+%3
0B248F ED07                A  8072    	LD	BC,(HL)
0B2491 C5                  A  8073    	PUSH	BC
0B2492 DDE5E1              A  8074    	LD	HL,IX
0B2495 012FEFFF            A  8075    	LD	BC,-4305
0B2499 09                  A  8076    	ADD	HL,BC
0B249A E5C1                A  8077    	LD	BC,HL
0B249C C5                  A  8078    	PUSH	BC
0B249D CD E0 0D 0B         A  8079    	CALL	_get_info
0B24A1 C1                  A  8080    	POP	BC
0B24A2 C1                  A  8081    	POP	BC
                           A  8082    ;  709			else bmp = load_bmp_clean(argv[
                           A  8083    .LINE 709
                           A  8084    
0B24A3 C3 6F 26 0B         A  8085    	JR	L_246
0B24A7                     A  8086    L_231:
0B24A7 DD4EFF              A  8087    	LD	C,(IX+%FFFFFFFF)
0B24AA 0600                A  8088    	LD	B,%0
0B24AC C5                  A  8089    	PUSH	BC
0B24AD DD3109              A  8090    	LD	IY,(IX+%9)
0B24B0 ED2303              A  8091    	LEA	HL,IY+%3
0B24B3 ED07                A  8092    	LD	BC,(HL)
0B24B5 C5                  A  8093    	PUSH	BC
0B24B6 DDE5E1              A  8094    	LD	HL,IX
0B24B9 01FEEAFF            A  8095    	LD	BC,-5378
0B24BD 09                  A  8096    	ADD	HL,BC
0B24BE E5C1                A  8097    	LD	BC,HL
0B24C0 C5                  A  8098    	PUSH	BC
0B24C1 CD 11 16 0B         A  8099    	CALL	_load_bmp_clean
0B24C5 C1                  A  8100    	POP	BC
0B24C6 C1                  A  8101    	POP	BC
0B24C7 C1                  A  8102    	POP	BC
0B24C8 DDE5FDE1            A  8103    	LD	IY,IX
0B24CC 01C2FBFF            A  8104    	LD	BC,-1086
0B24D0 FD09                A  8105    	ADD	IY,BC
0B24D2 FDE5D1              A  8106    	LD	DE,IY
0B24D5 01310400            A  8107    	LD	BC,1073
0B24D9 EDB0                A  8108    	LDIR	
                           A  8109    ;  710			
                           A  8110    ;  711		} else if (argc == 5) {
                           A  8111    .LINE 711
                           A  8112    
0B24DB C3 6F 26 0B         A  8113    	JR	L_246
0B24DF                     A  8114    L_242:
0B24DF 01050000            A  8115    	LD	BC,5
0B24E3 DD2706              A  8116    	LD	HL,(IX+%6)
0B24E6 B7                  A  8117    	OR	A,A
0B24E7 ED42                A  8118    	SBC	HL,BC
0B24E9 C2 6F 26 0B         A  8119    	JR	NZ,L_246
                           A  8120    ;  712		
                           A  8121    ;  713			bmp = load_bmp_clean(argv[1], b
                           A  8122    .LINE 713
                           A  8123    
0B24ED DD4EFF              A  8124    	LD	C,(IX+%FFFFFFFF)
0B24F0 0600                A  8125    	LD	B,%0
0B24F2 C5                  A  8126    	PUSH	BC
0B24F3 DD3109              A  8127    	LD	IY,(IX+%9)
0B24F6 ED2303              A  8128    	LEA	HL,IY+%3
0B24F9 ED07                A  8129    	LD	BC,(HL)
0B24FB C5                  A  8130    	PUSH	BC
0B24FC DDE5E1              A  8131    	LD	HL,IX
0B24FF 01CDE6FF            A  8132    	LD	BC,-6451
0B2503 09                  A  8133    	ADD	HL,BC
0B2504 E5C1                A  8134    	LD	BC,HL
0B2506 C5                  A  8135    	PUSH	BC
0B2507 CD 11 16 0B         A  8136    	CALL	_load_bmp_clean
0B250B C1                  A  8137    	POP	BC
0B250C C1                  A  8138    	POP	BC
0B250D C1                  A  8139    	POP	BC
0B250E DDE5FDE1            A  8140    	LD	IY,IX
0B2512 01C2FBFF            A  8141    	LD	BC,-1086
0B2516 FD09                A  8142    	ADD	IY,BC
0B2518 FDE5D1              A  8143    	LD	DE,IY
0B251B 01310400            A  8144    	LD	BC,1073
0B251F EDB0                A  8145    	LDIR	
                           A  8146    ;  714			
                           A  8147    ;  715			if (argv[3][0] == 'C' || argv[3
                           A  8148    .LINE 715
                           A  8149    
0B2521 DD3109              A  8150    	LD	IY,(IX+%9)
0B2524 ED3309              A  8151    	LEA	IY,IY+%9
0B2527 DD3EF6              A  8152    	LD	(IX+%FFFFFFF6),IY
0B252A DD27F6              A  8153    	LD	HL,(IX+%FFFFFFF6)
0B252D ED27                A  8154    	LD	HL,(HL)
0B252F 7E                  A  8155    	LD	A,(HL)
0B2530 47                  A  8156    	LD	B,A
0B2531 17ED62              A  8157    	SEXT	HL
0B2534 68                  A  8158    	LD	L,B
0B2535 01430000            A  8159    	LD	BC,67
0B2539 B7                  A  8160    	OR	A,A
0B253A ED42                A  8161    	SBC	HL,BC
0B253C 28 14               A  8162    	JR	Z,L_233
0B253E DD27F6              A  8163    	LD	HL,(IX+%FFFFFFF6)
0B2541 ED27                A  8164    	LD	HL,(HL)
0B2543 7E                  A  8165    	LD	A,(HL)
0B2544 47                  A  8166    	LD	B,A
0B2545 17ED62              A  8167    	SEXT	HL
0B2548 68                  A  8168    	LD	L,B
0B2549 01630000            A  8169    	LD	BC,99
0B254D B7                  A  8170    	OR	A,A
0B254E ED42                A  8171    	SBC	HL,BC
0B2550 20 54               A  8172    	JR	NZ,L_234
0B2552                     A  8173    L_233:
0B2552 FDE5                A  8174    	PUSH	IY
0B2554 C5                  A  8175    	PUSH	BC
0B2555 FD21CCE6 FF         A  8176    	LD	IY,-6452
0B255A DDE5C1              A  8177    	LD	BC,IX
0B255D FD09                A  8178    	ADD	IY,BC
0B255F FD7700              A  8179    	LD	(IY),A
0B2562 C1                  A  8180    	POP	BC
0B2563 FDE1                A  8181    	POP	IY
0B2565 CD F2 32 0B         A  8182    	CALL	_getsysvar_scrwidth
0B2569 FDE5                A  8183    	PUSH	IY
0B256B C5                  A  8184    	PUSH	BC
0B256C FD21CCE6 FF         A  8185    	LD	IY,-6452
0B2571 DDE5C1              A  8186    	LD	BC,IX
0B2574 FD09                A  8187    	ADD	IY,BC
0B2576 FD7E00              A  8188    	LD	A,(IY)
0B2579 C1                  A  8189    	POP	BC
0B257A FDE1                A  8190    	POP	IY
0B257C E5C1                A  8191    	LD	BC,HL
0B257E CD 1E 3A 0B         A  8192    	CALL	__stoiu
0B2582 E5D1                A  8193    	LD	DE,HL
0B2584 21C2FBFF            A  8194    	LD	HL,-1086
0B2588 DDE5C1              A  8195    	LD	BC,IX
0B258B 09                  A  8196    	ADD	HL,BC
0B258C ED07                A  8197    	LD	BC,(HL)
0B258E CD 1E 3A 0B         A  8198    	CALL	__stoiu
0B2592 E5C1                A  8199    	LD	BC,HL
0B2594 D5E1                A  8200    	LD	HL,DE
0B2596 B7                  A  8201    	OR	A,A
0B2597 ED42                A  8202    	SBC	HL,BC
0B2599 01020000            A  8203    	LD	BC,2
0B259D CD E7 40 0B         A  8204    	CALL	__idivs
0B25A1 DD2FF9              A  8205    	LD	(IX+%FFFFFFF9),HL
                           A  8206    ;  716			else x = strtou16(argv[4]);
                           A  8207    .LINE 716
                           A  8208    
0B25A4 18 17               A  8209    	JR	L_238
0B25A6                     A  8210    L_234:
0B25A6 DD3109              A  8211    	LD	IY,(IX+%9)
0B25A9 ED230C              A  8212    	LEA	HL,IY+%C
0B25AC ED07                A  8213    	LD	BC,(HL)
0B25AE C5                  A  8214    	PUSH	BC
0B25AF CD 93 20 0B         A  8215    	CALL	_strtou16
0B25B3 C1                  A  8216    	POP	BC
0B25B4 E5C1                A  8217    	LD	BC,HL
0B25B6 CD 1E 3A 0B         A  8218    	CALL	__stoiu
0B25BA DD2FF9              A  8219    	LD	(IX+%FFFFFFF9),HL
0B25BD                     A  8220    L_238:
                           A  8221    ;  717			
                           A  8222    ;  718			if (argv[4][0] == 'C' || argv[4
                           A  8223    .LINE 718
                           A  8224    
0B25BD DD3109              A  8225    	LD	IY,(IX+%9)
0B25C0 ED330C              A  8226    	LEA	IY,IY+%C
0B25C3 DD3EFC              A  8227    	LD	(IX+%FFFFFFFC),IY
0B25C6 DD27FC              A  8228    	LD	HL,(IX+%FFFFFFFC)
0B25C9 ED27                A  8229    	LD	HL,(HL)
0B25CB 7E                  A  8230    	LD	A,(HL)
0B25CC 47                  A  8231    	LD	B,A
0B25CD 17ED62              A  8232    	SEXT	HL
0B25D0 68                  A  8233    	LD	L,B
0B25D1 01430000            A  8234    	LD	BC,67
0B25D5 B7                  A  8235    	OR	A,A
0B25D6 ED42                A  8236    	SBC	HL,BC
0B25D8 28 14               A  8237    	JR	Z,L_236
0B25DA DD27FC              A  8238    	LD	HL,(IX+%FFFFFFFC)
0B25DD ED27                A  8239    	LD	HL,(HL)
0B25DF 7E                  A  8240    	LD	A,(HL)
0B25E0 47                  A  8241    	LD	B,A
0B25E1 17ED62              A  8242    	SEXT	HL
0B25E4 68                  A  8243    	LD	L,B
0B25E5 01630000            A  8244    	LD	BC,99
0B25E9 B7                  A  8245    	OR	A,A
0B25EA ED42                A  8246    	SBC	HL,BC
0B25EC 20 54               A  8247    	JR	NZ,L_237
0B25EE                     A  8248    L_236:
0B25EE FDE5                A  8249    	PUSH	IY
0B25F0 C5                  A  8250    	PUSH	BC
0B25F1 FD21CCE6 FF         A  8251    	LD	IY,-6452
0B25F6 DDE5C1              A  8252    	LD	BC,IX
0B25F9 FD09                A  8253    	ADD	IY,BC
0B25FB FD7700              A  8254    	LD	(IY),A
0B25FE C1                  A  8255    	POP	BC
0B25FF FDE1                A  8256    	POP	IY
0B2601 CD 05 33 0B         A  8257    	CALL	_getsysvar_scrheight
0B2605 FDE5                A  8258    	PUSH	IY
0B2607 C5                  A  8259    	PUSH	BC
0B2608 FD21CCE6 FF         A  8260    	LD	IY,-6452
0B260D DDE5C1              A  8261    	LD	BC,IX
0B2610 FD09                A  8262    	ADD	IY,BC
0B2612 FD7E00              A  8263    	LD	A,(IY)
0B2615 C1                  A  8264    	POP	BC
0B2616 FDE1                A  8265    	POP	IY
0B2618 E5C1                A  8266    	LD	BC,HL
0B261A CD 1E 3A 0B         A  8267    	CALL	__stoiu
0B261E E5D1                A  8268    	LD	DE,HL
0B2620 21C4FBFF            A  8269    	LD	HL,-1084
0B2624 DDE5C1              A  8270    	LD	BC,IX
0B2627 09                  A  8271    	ADD	HL,BC
0B2628 ED07                A  8272    	LD	BC,(HL)
0B262A CD 1E 3A 0B         A  8273    	CALL	__stoiu
0B262E E5C1                A  8274    	LD	BC,HL
0B2630 D5E1                A  8275    	LD	HL,DE
0B2632 B7                  A  8276    	OR	A,A
0B2633 ED42                A  8277    	SBC	HL,BC
0B2635 01020000            A  8278    	LD	BC,2
0B2639 CD E7 40 0B         A  8279    	CALL	__idivs
0B263D DD2FF3              A  8280    	LD	(IX+%FFFFFFF3),HL
                           A  8281    ;  719			else y = strtou16(argv[4]);
                           A  8282    .LINE 719
                           A  8283    
0B2640 18 14               A  8284    	JR	L_239
0B2642                     A  8285    L_237:
0B2642 DD27FC              A  8286    	LD	HL,(IX+%FFFFFFFC)
0B2645 ED07                A  8287    	LD	BC,(HL)
0B2647 C5                  A  8288    	PUSH	BC
0B2648 CD 93 20 0B         A  8289    	CALL	_strtou16
0B264C C1                  A  8290    	POP	BC
0B264D E5C1                A  8291    	LD	BC,HL
0B264F CD 1E 3A 0B         A  8292    	CALL	__stoiu
0B2653 DD2FF3              A  8293    	LD	(IX+%FFFFFFF3),HL
0B2656                     A  8294    L_239:
                           A  8295    ;  720			
                           A  8296    ;  721			vdp_extended_select(bitmap_slot
                           A  8297    .LINE 721
                           A  8298    
0B2656 DD4EFF              A  8299    	LD	C,(IX+%FFFFFFFF)
0B2659 0600                A  8300    	LD	B,%0
0B265B C5                  A  8301    	PUSH	BC
0B265C CD 06 06 0B         A  8302    	CALL	_vdp_extended_select
0B2660 C1                  A  8303    	POP	BC
                           A  8304    ;  722			vdp_bitmapDrawSelected(x,y);
                           A  8305    .LINE 722
                           A  8306    
0B2661 DD07F3              A  8307    	LD	BC,(IX+%FFFFFFF3)
0B2664 C5                  A  8308    	PUSH	BC
0B2665 DD07F9              A  8309    	LD	BC,(IX+%FFFFFFF9)
0B2668 C5                  A  8310    	PUSH	BC
0B2669 CD E4 2B 0B         A  8311    	CALL	_vdp_bitmapDrawSelected
0B266D C1                  A  8312    	POP	BC
0B266E C1                  A  8313    	POP	BC
                           A  8314    ;  723			
                           A  8315    ;  724		}
0B266F                     A  8316    L_246:
                           A  8317    .LINE 724
                           A  8318    
                           A  8319    ;  725	
                           A  8320    ;  726	    return 0;
                           A  8321    .LINE 726
                           A  8322    
0B266F B7                  A  8323    	OR	A,A
0B2670 ED62                A  8324    	SBC	HL,HL
                           A  8325    .LINE 727
                           A  8326    
0B2672 DDF9                A  8327    	LD	SP,IX
0B2674 DDE1                A  8328    	POP	IX
0B2676 C9                  A  8329    	RET	
                           A  8330    
                           A  8331    
                           A  8332    ;**************************** _main ***********
                           A  8333    ;Name                         Addr/Register   S
                           A  8334    ;_vdp_bitmapDrawSelected             IMPORT  --
                           A  8335    ;_getsysvar_scrheight                IMPORT  --
                           A  8336    ;_getsysvar_scrwidth                 IMPORT  --
                           A  8337    ;_strcmp                             IMPORT  --
                           A  8338    ;bmp                                IX-1086   1
                           A  8339    ;y                                    IX-13    
                           A  8340    ;G_1                                  IX-10    
                           A  8341    ;x                                     IX-7    
                           A  8342    ;G_2                                   IX-4    
                           A  8343    ;bitmap_slot                           IX-1    
                           A  8344    ;argv                                  IX+9    
                           A  8345    ;argc                                  IX+6    
                           A  8346    
                           A  8347    
                           A  8348    ; Stack Frame Size: 6464 (bytes)
                           A  8349    ;       Spill Code: -3 (instruction)
                           A  8350    
                           A  8351    
                           A  8352    .ENDFUNC "main",727,"_main"
                           A  8353    	SEGMENT STRSECT
0B46BD                     A  8354    L__185:
0B46BD 2F69                A  8355    	DB	"/i"
0B46BF 00                  A  8356    	DB	0
                           A  8357    	XREF _write16bit:ROM
                           A  8358    	XREF _vdp_bitmapDrawSelected:ROM
                           A  8359    	XREF _mos_getfil:ROM
                           A  8360    	XREF _mos_flseek:ROM
                           A  8361    	XREF _mos_fread:ROM
                           A  8362    	XREF _mos_fgetc:ROM
                           A  8363    	XREF _mos_fclose:ROM
                           A  8364    	XREF _mos_fopen:ROM
                           A  8365    	XREF _getsysvar_scrheight:ROM
                           A  8366    	XREF _getsysvar_scrwidth:ROM
                           A  8367    	XREF _mos_puts:ROM
                           A  8368    	XREF _waitvblank:ROM
                           A  8369    	XREF _putch:ROM
                           A  8370    	XREF _strcmp:ROM
                           A  8371    	XREF _memset:ROM
                           A  8372    	XREF _memcpy:ROM
                           A  8373    	XREF _malloc:ROM
                           A  8374    	XREF _free:ROM
                           A  8375    	XREF __u_uitoa:ROM
                           A  8376    	XREF __u_itoa:ROM
                           A  8377    	XREF ___print_sendstring:ROM
                           A  8378    	XREF ___print_xputch:ROM
                           A  8379    	XREF ___print_uputch:ROM
                           A  8380    	XREF ___print_fmt:ROM
                           A  8381    	XREF __lcmpu:ROM
                           A  8382    	XREF __ladd:ROM
                           A  8383    	XREF __lsub:ROM
                           A  8384    	XREF __idivs:ROM
                           A  8385    	XREF __imuls:ROM
                           A  8386    	XREF __lmulu:ROM
                           A  8387    	XREF __smulu:ROM
                           A  8388    	XREF __bshl:ROM
                           A  8389    	XREF __irems:ROM
                           A  8390    	XREF __ishrs:ROM
                           A  8391    	XREF __stoi:ROM
                           A  8392    	XREF __stoiu:ROM
                           A  8393    	XREF __itol:ROM
                           A  8394    	XREF __ildix:ROM
                           A  8395    	XREF __istix:ROM
                           A  8396    	XREF __ladd_b:ROM
                           A  8397    	XREF __ishru_b:ROM
                           A  8398    	XREF __ishrs_b:ROM
                           A  8399    	XDEF _main
                           A  8400    	XDEF _strtou24
                           A  8401    	XDEF _strtou8
                           A  8402    	XDEF _strtou16
                           A  8403    	XDEF _load_bmp_clean
                           A  8404    	XDEF _get_info
                           A  8405    	XDEF _print_bin
                           A  8406    	XDEF _count_trailing_zeros
                           A  8407    	XDEF _getByte
                           A  8408    	XDEF _rgbx5551_to_rgba2222
                           A  8409    	XDEF _generic8888_to_rgba2222
                           A  8410    	XDEF _bgra8888_to_rgba2222
                           A  8411    	XDEF _bgr888_to_rgba2222
                           A  8412    	XDEF _reorder_and_insert
                           A  8413    	XDEF _reorder
                           A  8414    	XDEF _assign_buffer_to_bitmap
                           A  8415    	XDEF _vdp_extended_select
                           A  8416    	XDEF _add_stream_to_buffer
                           A  8417    	XDEF _clear_buffer
                           A  8418    	XDEF _rgba8888_to_rgba2222
                           A  8419    	XDEF _twiddle_buffer
                           A  8420    	XDEF _flip
                           A  8421    	XDEF _max
                           A  8422    	XDEF _min
                           A  8423    	XDEF _delay_secs
                           A  8424    	END


Errors: 0
Warnings: 0
Lines Assembled: 8425
